{"version": "0.1", "suitename": "Ephemeris tool tests targeting http://34.148.42.237:8000/galaxy/", "results": {"total": 103, "errors": 25, "failures": 0, "skips": 0}, "tests": [{"id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon/1.4.13-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon", "tool_version": "1.4.13", "test_index": 0, "time_seconds": 111.77613854408264, "inputs": {"reads": {"src": "hda", "id": "63c935dca73b50e9"}, "overlaps": {"src": "hda", "id": "d722b661aae11d62"}, "corrected_reads": {"src": "hda", "id": "9f71d4936430e847"}, "u": true, "f": true, "w": "800", "e": "0.2"}, "job": {"model_class": "Job", "id": "377272e7df65aadb", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:15:41.562287", "create_time": "2022-09-10T17:14:08.775906", "galaxy_version": "21.09", "command_version": "v1.4.13", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon/1.4.13", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-85nkn", "command_line": "ln -s '/galaxy/server/database/objects/c/9/4/dataset_c94ca62e-14f6-4cff-845d-51e2bb204942.dat' reads.fasta && ln -s '/galaxy/server/database/objects/1/5/b/dataset_15bb3878-07e9-453a-bce8-a3021c2b9a6d.dat' overlaps.sam && ln -s '/galaxy/server/database/objects/1/f/7/dataset_1f71d0c9-8596-4f91-a75c-0d8d4991d7be.dat' corrected_reads.fasta &&  racon reads.fasta overlaps.sam corrected_reads.fasta -t ${GALAXY_SLOTS:-4} -u -f -w 800 -q 10.0 -e 0.2 -m 5 -x -4 -g -8 > racon_polished_consensus.fa", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "g": "\"-8\"", "x": "\"-4\"", "m": "\"5\"", "e": "\"0.2\"", "q": "\"10.0\"", "w": "\"800\"", "f": "\"true\"", "u": "\"true\""}, "inputs": {"reads": {"id": "63c935dca73b50e9", "src": "hda", "uuid": "c94ca62e-14f6-4cff-845d-51e2bb204942"}, "overlaps": {"id": "d722b661aae11d62", "src": "hda", "uuid": "15bb3878-07e9-453a-bce8-a3021c2b9a6d"}, "corrected_reads": {"id": "9f71d4936430e847", "src": "hda", "uuid": "1f71d0c9-8596-4f91-a75c-0d8d4991d7be"}}, "outputs": {"consensus": {"id": "84642ce47d131e35", "src": "hda", "uuid": "70f35e97-26fb-464c-878d-d5f0c07807f7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[racon::Polisher::initialize] loaded target sequences 0.000825 s\n[racon::Polisher::initialize] loaded sequences 0.011087 s\n[racon::Polisher::initialize] loaded overlaps 0.008935 s\n[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.006644 s\r[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.006964 s\r[racon::Polisher::initialize] aligning overlaps [===>                ] 0.007349 s\r[racon::Polisher::initialize] aligning overlaps [====>               ] 0.007745 s\r[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.008026 s\r[racon::Polisher::initialize] aligning overlaps [======>             ] 0.008340 s\r[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.008759 s\r[racon::Polisher::initialize] aligning overlaps [========>           ] 0.009088 s\r[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.009470 s\r[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.009758 s\r[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.010186 s\r[racon::Polisher::initialize] aligning overlaps [============>       ] 0.010608 s\r[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.011051 s\r[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.011378 s\r[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.011755 s\r[racon::Polisher::initialize] aligning overlaps [================>   ] 0.012192 s\r[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.012440 s\r[racon::Polisher::initialize] aligning overlaps [==================> ] 0.012830 s\r[racon::Polisher::initialize] aligning overlaps [===================>] 0.013329 s\r[racon::Polisher::initialize] aligning overlaps [====================] 0.013730 s\n[racon::Polisher::initialize] transformed data into windows 0.000290 s\n[racon::Polisher::polish] generating consensus [=>                  ] 0.104822 s\r[racon::Polisher::polish] generating consensus [==>                 ] 0.205398 s\r[racon::Polisher::polish] generating consensus [===>                ] 0.282870 s\r[racon::Polisher::polish] generating consensus [====>               ] 0.333768 s\r[racon::Polisher::polish] generating consensus [=====>              ] 0.378067 s\r[racon::Polisher::polish] generating consensus [======>             ] 0.428982 s\r[racon::Polisher::polish] generating consensus [=======>            ] 0.489793 s\r[racon::Polisher::polish] generating consensus [========>           ] 0.566117 s\r[racon::Polisher::polish] generating consensus [=========>          ] 0.693876 s\r[racon::Polisher::polish] generating consensus [==========>         ] 0.831226 s\r[racon::Polisher::polish] generating consensus [===========>        ] 1.053168 s\r[racon::Polisher::polish] generating consensus [============>       ] 1.241393 s\r[racon::Polisher::polish] generating consensus [=============>      ] 1.406741 s\r[racon::Polisher::polish] generating consensus [==============>     ] 1.553705 s\r[racon::Polisher::polish] generating consensus [===============>    ] 1.642615 s\r[racon::Polisher::polish] generating consensus [================>   ] 1.770967 s\r[racon::Polisher::polish] generating consensus [=================>  ] 1.816764 s\r[racon::Polisher::polish] generating consensus [==================> ] 1.957387 s\r[racon::Polisher::polish] generating consensus [===================>] 2.101144 s\r[racon::Polisher::polish] generating consensus [====================] 2.199242 s\n[racon::Polisher::] total = 2.234714 s\n", "job_stdout": "", "job_stderr": "", "stderr": "[racon::Polisher::initialize] loaded target sequences 0.000825 s\n[racon::Polisher::initialize] loaded sequences 0.011087 s\n[racon::Polisher::initialize] loaded overlaps 0.008935 s\n[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.006644 s\r[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.006964 s\r[racon::Polisher::initialize] aligning overlaps [===>                ] 0.007349 s\r[racon::Polisher::initialize] aligning overlaps [====>               ] 0.007745 s\r[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.008026 s\r[racon::Polisher::initialize] aligning overlaps [======>             ] 0.008340 s\r[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.008759 s\r[racon::Polisher::initialize] aligning overlaps [========>           ] 0.009088 s\r[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.009470 s\r[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.009758 s\r[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.010186 s\r[racon::Polisher::initialize] aligning overlaps [============>       ] 0.010608 s\r[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.011051 s\r[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.011378 s\r[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.011755 s\r[racon::Polisher::initialize] aligning overlaps [================>   ] 0.012192 s\r[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.012440 s\r[racon::Polisher::initialize] aligning overlaps [==================> ] 0.012830 s\r[racon::Polisher::initialize] aligning overlaps [===================>] 0.013329 s\r[racon::Polisher::initialize] aligning overlaps [====================] 0.013730 s\n[racon::Polisher::initialize] transformed data into windows 0.000290 s\n[racon::Polisher::polish] generating consensus [=>                  ] 0.104822 s\r[racon::Polisher::polish] generating consensus [==>                 ] 0.205398 s\r[racon::Polisher::polish] generating consensus [===>                ] 0.282870 s\r[racon::Polisher::polish] generating consensus [====>               ] 0.333768 s\r[racon::Polisher::polish] generating consensus [=====>              ] 0.378067 s\r[racon::Polisher::polish] generating consensus [======>             ] 0.428982 s\r[racon::Polisher::polish] generating consensus [=======>            ] 0.489793 s\r[racon::Polisher::polish] generating consensus [========>           ] 0.566117 s\r[racon::Polisher::polish] generating consensus [=========>          ] 0.693876 s\r[racon::Polisher::polish] generating consensus [==========>         ] 0.831226 s\r[racon::Polisher::polish] generating consensus [===========>        ] 1.053168 s\r[racon::Polisher::polish] generating consensus [============>       ] 1.241393 s\r[racon::Polisher::polish] generating consensus [=============>      ] 1.406741 s\r[racon::Polisher::polish] generating consensus [==============>     ] 1.553705 s\r[racon::Polisher::polish] generating consensus [===============>    ] 1.642615 s\r[racon::Polisher::polish] generating consensus [================>   ] 1.770967 s\r[racon::Polisher::polish] generating consensus [=================>  ] 1.816764 s\r[racon::Polisher::polish] generating consensus [==================> ] 1.957387 s\r[racon::Polisher::polish] generating consensus [===================>] 2.101144 s\r[racon::Polisher::polish] generating consensus [====================] 2.199242 s\n[racon::Polisher::] total = 2.234714 s\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:15:31", "plugin": "core", "name": "end_epoch", "raw_value": "1662830131.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:15:29", "plugin": "core", "name": "start_epoch", "raw_value": "1662830129.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon/1.4.13-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon", "tool_version": "1.4.13", "test_index": 1, "time_seconds": 118.10897183418274, "inputs": {"reads": {"src": "hda", "id": "501db4918ff573a3"}, "overlaps": {"src": "hda", "id": "f9d7d67f36ffbecd"}, "corrected_reads": {"src": "hda", "id": "c2e41d7180a98b1b"}}, "job": {"model_class": "Job", "id": "c419014a9ebedccc", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:16:12.176250", "create_time": "2022-09-10T17:14:43.110555", "galaxy_version": "21.09", "command_version": "v1.4.13", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon/1.4.13", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-pkcq2", "command_line": "ln -s '/galaxy/server/database/objects/1/f/1/dataset_1f1d4458-bca9-4ca8-b2da-3759986c0b54.dat' reads.fasta && ln -s '/galaxy/server/database/objects/a/7/0/dataset_a70ed705-c469-43ad-bfa1-0b38bae80f01.dat' overlaps.paf && ln -s '/galaxy/server/database/objects/f/1/9/dataset_f19e16ce-ded1-4c2e-8e24-f385f9e83f58.dat' corrected_reads.fasta &&  racon reads.fasta overlaps.paf corrected_reads.fasta -t ${GALAXY_SLOTS:-4}   -w 500 -q 10.0 -e 0.3 -m 5 -x -4 -g -8 > racon_polished_consensus.fa", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "g": "\"-8\"", "x": "\"-4\"", "m": "\"5\"", "e": "\"0.3\"", "q": "\"10.0\"", "w": "\"500\"", "f": "\"false\"", "u": "\"false\""}, "inputs": {"reads": {"id": "501db4918ff573a3", "src": "hda", "uuid": "1f1d4458-bca9-4ca8-b2da-3759986c0b54"}, "overlaps": {"id": "f9d7d67f36ffbecd", "src": "hda", "uuid": "a70ed705-c469-43ad-bfa1-0b38bae80f01"}, "corrected_reads": {"id": "c2e41d7180a98b1b", "src": "hda", "uuid": "f19e16ce-ded1-4c2e-8e24-f385f9e83f58"}}, "outputs": {"consensus": {"id": "a166b09f94cd2e51", "src": "hda", "uuid": "b8afa37c-8453-45e2-9dbd-8be11ee29535"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[racon::Polisher::initialize] loaded target sequences 0.000722 s\n[racon::Polisher::initialize] loaded sequences 0.010334 s\n[racon::Polisher::initialize] loaded overlaps 0.000482 s\n[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.042916 s\r[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.069112 s\r[racon::Polisher::initialize] aligning overlaps [===>                ] 0.099857 s\r[racon::Polisher::initialize] aligning overlaps [====>               ] 0.117814 s\r[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.148494 s\r[racon::Polisher::initialize] aligning overlaps [======>             ] 0.164590 s\r[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.187822 s\r[racon::Polisher::initialize] aligning overlaps [========>           ] 0.211070 s\r[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.241939 s\r[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.272450 s\r[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.291972 s\r[racon::Polisher::initialize] aligning overlaps [============>       ] 0.326732 s\r[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.362504 s\r[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.391129 s\r[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.421682 s\r[racon::Polisher::initialize] aligning overlaps [================>   ] 0.465415 s\r[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.499422 s\r[racon::Polisher::initialize] aligning overlaps [==================> ] 0.520890 s\r[racon::Polisher::initialize] aligning overlaps [===================>] 0.549248 s\r[racon::Polisher::initialize] aligning overlaps [====================] 0.630873 s\n[racon::Polisher::initialize] transformed data into windows 0.000241 s\n[racon::Polisher::polish] generating consensus [=>                  ] 0.050678 s\r[racon::Polisher::polish] generating consensus [==>                 ] 0.115003 s\r[racon::Polisher::polish] generating consensus [===>                ] 0.164747 s\r[racon::Polisher::polish] generating consensus [====>               ] 0.199587 s\r[racon::Polisher::polish] generating consensus [=====>              ] 0.225912 s\r[racon::Polisher::polish] generating consensus [======>             ] 0.245895 s\r[racon::Polisher::polish] generating consensus [=======>            ] 0.272374 s\r[racon::Polisher::polish] generating consensus [========>           ] 0.297250 s\r[racon::Polisher::polish] generating consensus [=========>          ] 0.324558 s\r[racon::Polisher::polish] generating consensus [==========>         ] 0.364206 s\r[racon::Polisher::polish] generating consensus [===========>        ] 0.428670 s\r[racon::Polisher::polish] generating consensus [============>       ] 0.502714 s\r[racon::Polisher::polish] generating consensus [=============>      ] 0.599378 s\r[racon::Polisher::polish] generating consensus [==============>     ] 0.706459 s\r[racon::Polisher::polish] generating consensus [===============>    ] 0.795163 s\r[racon::Polisher::polish] generating consensus [================>   ] 0.866922 s\r[racon::Polisher::polish] generating consensus [=================>  ] 0.934899 s\r[racon::Polisher::polish] generating consensus [==================> ] 0.980471 s\r[racon::Polisher::polish] generating consensus [===================>] 1.038735 s\r[racon::Polisher::polish] generating consensus [====================] 1.375082 s\n[racon::Polisher::] total = 2.018088 s\n", "job_stdout": "", "job_stderr": "", "stderr": "[racon::Polisher::initialize] loaded target sequences 0.000722 s\n[racon::Polisher::initialize] loaded sequences 0.010334 s\n[racon::Polisher::initialize] loaded overlaps 0.000482 s\n[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.042916 s\r[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.069112 s\r[racon::Polisher::initialize] aligning overlaps [===>                ] 0.099857 s\r[racon::Polisher::initialize] aligning overlaps [====>               ] 0.117814 s\r[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.148494 s\r[racon::Polisher::initialize] aligning overlaps [======>             ] 0.164590 s\r[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.187822 s\r[racon::Polisher::initialize] aligning overlaps [========>           ] 0.211070 s\r[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.241939 s\r[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.272450 s\r[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.291972 s\r[racon::Polisher::initialize] aligning overlaps [============>       ] 0.326732 s\r[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.362504 s\r[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.391129 s\r[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.421682 s\r[racon::Polisher::initialize] aligning overlaps [================>   ] 0.465415 s\r[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.499422 s\r[racon::Polisher::initialize] aligning overlaps [==================> ] 0.520890 s\r[racon::Polisher::initialize] aligning overlaps [===================>] 0.549248 s\r[racon::Polisher::initialize] aligning overlaps [====================] 0.630873 s\n[racon::Polisher::initialize] transformed data into windows 0.000241 s\n[racon::Polisher::polish] generating consensus [=>                  ] 0.050678 s\r[racon::Polisher::polish] generating consensus [==>                 ] 0.115003 s\r[racon::Polisher::polish] generating consensus [===>                ] 0.164747 s\r[racon::Polisher::polish] generating consensus [====>               ] 0.199587 s\r[racon::Polisher::polish] generating consensus [=====>              ] 0.225912 s\r[racon::Polisher::polish] generating consensus [======>             ] 0.245895 s\r[racon::Polisher::polish] generating consensus [=======>            ] 0.272374 s\r[racon::Polisher::polish] generating consensus [========>           ] 0.297250 s\r[racon::Polisher::polish] generating consensus [=========>          ] 0.324558 s\r[racon::Polisher::polish] generating consensus [==========>         ] 0.364206 s\r[racon::Polisher::polish] generating consensus [===========>        ] 0.428670 s\r[racon::Polisher::polish] generating consensus [============>       ] 0.502714 s\r[racon::Polisher::polish] generating consensus [=============>      ] 0.599378 s\r[racon::Polisher::polish] generating consensus [==============>     ] 0.706459 s\r[racon::Polisher::polish] generating consensus [===============>    ] 0.795163 s\r[racon::Polisher::polish] generating consensus [================>   ] 0.866922 s\r[racon::Polisher::polish] generating consensus [=================>  ] 0.934899 s\r[racon::Polisher::polish] generating consensus [==================> ] 0.980471 s\r[racon::Polisher::polish] generating consensus [===================>] 1.038735 s\r[racon::Polisher::polish] generating consensus [====================] 1.375082 s\n[racon::Polisher::] total = 2.018088 s\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:16:02", "plugin": "core", "name": "end_epoch", "raw_value": "1662830162.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:16:00", "plugin": "core", "name": "start_epoch", "raw_value": "1662830160.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 0, "time_seconds": 137.94139122962952, "inputs": {"library|input_1": {"src": "hda", "id": "3b6133f7922d8c25"}, "library|input_2": {"src": "hda", "id": "2ae04ff3e4c37d29"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "2e34347c7853378c"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "0872f76532b40a85", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:52:08.106919", "create_time": "2022-09-10T16:50:14.667062", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-5zv9b", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/3/d/a/dataset_3da8e923-5940-498b-bbb3-12e7c827e6de.dat' genome && ln -s -f '/galaxy/server/database/objects/3/d/a/dataset_3da8e923-5940-498b-bbb3-12e7c827e6de.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/f/f/a/dataset_ffae7b47-4b76-4acb-bcba-d8fa57987a30.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/6/e/e/dataset_6eeec3b5-6ec1-4ba6-97a4-85f90464d8f3.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/4/6/e/dataset_46e9a8fe-8f78-427c-b191-85fdc0eaf698.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 156, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 154, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 155, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "3b6133f7922d8c25", "src": "hda", "uuid": "ffae7b47-4b76-4acb-bcba-d8fa57987a30"}, "input_2": {"id": "2ae04ff3e4c37d29", "src": "hda", "uuid": "6eeec3b5-6ec1-4ba6-97a4-85f90464d8f3"}, "own_file": {"id": "2e34347c7853378c", "src": "hda", "uuid": "3da8e923-5940-498b-bbb3-12e7c827e6de"}}, "outputs": {"output": {"id": "f57f4111d516f07f", "src": "hda", "uuid": "46e9a8fe-8f78-427c-b191-85fdc0eaf698"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/d/a/dataset_3da8e923-5940-498b-bbb3-12e7c827e6de.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 1: 40%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 1: 50%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 1: 60%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 4: 80%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\nReturning block of 446 for bucket 2\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\nGetting block 6 of 30\n  bucket 5: 50%\n  Reserving size (777) for bucket 6\n  bucket 5: 60%\n  Calculating Z arrays for bucket 6\n  bucket 5: 70%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 10%\n  bucket 5: 100%\n  bucket 6: 20%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 6: 30%\nReturning block of 739 for bucket 5\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  bucket 7: 30%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 20%\n  bucket 18: 60%\n  bucket 17: 30%\n  bucket 18: 70%\n  bucket 17: 40%\n  bucket 18: 80%\n  bucket 17: 50%\n  bucket 18: 90%\n  bucket 18: 100%\n  bucket 17: 60%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 23: 50%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 23: 60%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 2: 90%\n  bucket 3: 70%\n  bucket 2: 100%\n  bucket 1: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  Sorting block of length 484 for bucket 1\n  bucket 3: 80%\n  bucket 4: 80%\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\nGetting block 6 of 30\n  bucket 5: 30%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 10%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 20%\n  bucket 5: 90%\n  bucket 6: 30%\n  bucket 5: 100%\n  bucket 6: 40%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 50%\n  bucket 8: 70%\n  bucket 7: 60%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 7: 70%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  bucket 9: 20%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 40%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 50%\n  bucket 12: 10%\n  bucket 11: 60%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 12: 40%\n  bucket 11: 90%\n  bucket 12: 50%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 40%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 50%\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 40%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 50%\n  bucket 21: 10%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 21: 20%\n  bucket 20: 80%\n  bucket 21: 30%\n  bucket 20: 90%\n  bucket 21: 40%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 30\n  Entering block accumulator loop for bucket 22:\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 23: 30%\n  bucket 22: 60%\n  bucket 23: 40%\n  bucket 22: 70%\n  bucket 23: 50%\n  bucket 22: 80%\n  bucket 23: 60%\n  bucket 22: 90%\n  bucket 23: 70%\n  bucket 22: 100%\n  bucket 23: 80%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 23: 90%\nReturning block of 494 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 60%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/d/a/dataset_3da8e923-5940-498b-bbb3-12e7c827e6de.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 1: 40%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 1: 50%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 1: 60%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 4: 80%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\nReturning block of 446 for bucket 2\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\nGetting block 6 of 30\n  bucket 5: 50%\n  Reserving size (777) for bucket 6\n  bucket 5: 60%\n  Calculating Z arrays for bucket 6\n  bucket 5: 70%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 10%\n  bucket 5: 100%\n  bucket 6: 20%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 6: 30%\nReturning block of 739 for bucket 5\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  bucket 7: 30%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 20%\n  bucket 18: 60%\n  bucket 17: 30%\n  bucket 18: 70%\n  bucket 17: 40%\n  bucket 18: 80%\n  bucket 17: 50%\n  bucket 18: 90%\n  bucket 18: 100%\n  bucket 17: 60%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 23: 50%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 23: 60%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 2: 90%\n  bucket 3: 70%\n  bucket 2: 100%\n  bucket 1: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  Sorting block of length 484 for bucket 1\n  bucket 3: 80%\n  bucket 4: 80%\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\nGetting block 6 of 30\n  bucket 5: 30%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 10%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 20%\n  bucket 5: 90%\n  bucket 6: 30%\n  bucket 5: 100%\n  bucket 6: 40%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 50%\n  bucket 8: 70%\n  bucket 7: 60%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 7: 70%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  bucket 9: 20%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 40%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 50%\n  bucket 12: 10%\n  bucket 11: 60%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 12: 40%\n  bucket 11: 90%\n  bucket 12: 50%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 40%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 50%\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 40%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 50%\n  bucket 21: 10%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 21: 20%\n  bucket 20: 80%\n  bucket 21: 30%\n  bucket 20: 90%\n  bucket 21: 40%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 30\n  Entering block accumulator loop for bucket 22:\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 23: 30%\n  bucket 22: 60%\n  bucket 23: 40%\n  bucket 22: 70%\n  bucket 23: 50%\n  bucket 22: 80%\n  bucket 23: 60%\n  bucket 22: 90%\n  bucket 23: 70%\n  bucket 22: 100%\n  bucket 23: 80%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 23: 90%\nReturning block of 494 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 60%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:51:54", "plugin": "core", "name": "end_epoch", "raw_value": "1662828714.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:51:54", "plugin": "core", "name": "start_epoch", "raw_value": "1662828714.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam__q0jq8ec.sam v. /tmp/history_bam_converted_to_sam_8ml8wpqc.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/120/tmp -O bam -o /galaxy/server/database/objects/4/6/e/dataset_46e9a8fe-8f78-427c-b191-85fdc0eaf698.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1109:19224:11655\t77\t*\t0\t0\t*\t*\t0\t0\tAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGCATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCTGTCTCTTATACACATCTCCGAGCC\tBBB@A4FFFBBBGGGGGGGGGGHHHHHHHHFHHHHGFGHGGGFFAGFHHHFHHHGHHHHHHHHHHHFHGGHGHHGCFFGHHHGHHHGHHFHGGH3BFFGHHGHGEFFH/EG@-CFGGCC@-;BD?FGGGGGG??FGDAGDFFFFEFF@BAAFEFFBFFFFF?FD9BBFFFF/FFFFBFFFFFFF?FFBFFFF/FBBFFBFFFE?F;@B//AFFFFFFFFF//;BFFEF.BFFFB/;F/99/FBFFBDCF;B\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:19224:11655\t141\t*\t0\t0\t*\t*\t0\t0\tCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTCTGTCTCTTATACACATCTGAGCTTC\tCCCCCFFFFFFFGGGGFGGGGGHGGHGGGHHHHHHHHHHHHHGGGGGHFHHHHHHFHHHHHFHHHGGGGGHEFHCEEHHHGGGGFGGGFGGGGHEGGGEHFHHHHDGGF?AGFHGGGGGGGGHGGGGGGGHHHHHHGFFFHHHHFCEFHFHGF<EGFHFGGAGBFHHHG/C.;C:0:GGG00CFGEFGBA.9C:BBFFGFGGFFFBFGAGG.D..:A.DFFEFFFBFFF0099:9BB0BFB009000;000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:21978:9490\t77\t*\t0\t0\t*\t*\t0\t0\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCAGTT\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGAFGHGHFGDGBCGHHHHHFHHGHHHHHHHGHHHH1E?EGGGHHHHFGFHFHHHHHEDHHGHH@GGHGHHCGG?CFGFGGGGGFGB.BFGGFFGGFFFBDDBFFFFFF9-;DEFFDFBFFBB.EFF;BFBFFFFFFFFFFFFFFFFFFFFFFFFF/B9/FFFFFFFAFFFF--99AFFFFFFFA;;;FF..9//;/;;/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:21978:9490\t141\t*\t0\t0\t*\t*\t0\t0\tGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGGTCCAGTGTAGAGTTATGGGG\tBAABBFFFFFFFGGGGGGGGGGGGGHHHGHGGHHHGGGGGGGFHGGGGHHGGGGHHHHHHGGGGG?HHHGGGGGG?E1FEEE?EHHHHFHAGHHHHHHHHHFHHHHGGFDEG2FCFFGHHHHFH?FF<FFGDHHHHBGHHEGFDD<GFGFDBGHGGHH0GDFH@<AEE.::CFGGHGGBGFGG0BFAF0000BFDEGGFGGGGGFGE00BC;;B00.;AAD.;--------.-;/:9////////////;9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:22910:4079\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTCCACTTTAGCTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHGGGGGHHHHGGEHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGFHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGGHHHGGHGGGHHGHGHHHHHHHGFHHHHHHHHHHHHHHHHHHGGHHHHHHHHHHGHHHHHHGGGGGGGGGGGGGGGGGGGGFFGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFCCDFFFFFFF0BFFFFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:22910:4079\t141\t*\t0\t0\t*\t*\t0\t0\tCTCCGGGCCCATAACACTTGGGGTAGCTAAAGTGGACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCT\tCCCDCCCCCDDFGGGGGGGGGGGEGGHHHHHHGHHHHGHHHHHHGGGFGHGFHHHHHHHHHHHHHHHFHGHHHHHGGHHHHHHBGHHGGCGGHEHHHFHHHHFHHFHHHHHHGHGGHGGHHHHHHHHHGHHFFHHHHHGHHHHHHHGHHGHHGG?FGHHGHHHHHHHHHHHGGHHHHHH?CEHGFHGGF--@DFFFFFAA;DDFFFFFF?@FC.A=DD-.AFFFF;->;.ED.FFFFFFF-.:00009BBF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:24217:19077\t77\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGCCTTTGATTCCTGCCTCATCCTATTACTGTC\t>AAA3BDFFFFDGBFFEEGGGGHHGHFHHCFHGHGHHHGF3BFGFHGFEFHFHGH3EGFC1EEGBFGBHFGGFFHHHGHFHGHHGHGGHCEHEBCFF3ED3@GH4FDEG12FFHFFHG/G3FGA/@EFEFCG33FFGBBGHFHH/?BFBGFGFAGC2C/@-;@-;BFFEFADF?DFFFFFF?;AFFA;AD;..FEFFA--;9;D.9BFFBE?;.;///://///99//BB/9;F./B//BBFB9////99/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:24217:19077\t141\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGAACCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTC\tBBBBBFFFFFFFGFEGGCFGFGHHHHFHHFHHHHHHGGEEEFGHGFFAGFFEEAEGGHHBEEFAFGAEF1G3GFGGEEF@EAGGHGFF?ECGGHEEEFGGHHHHFHHFHHGFHHHC2D<FFFFAFDFF<FF1FGGBHHFF0>AGHGG00<G<<DGBGDD0<.;CGG;;:;CFFHHHHHHG?D.;.;/ACD.;FFFB0CFBFGGFGGB0;EFAFF9B/:BB/;;AEFF//:AF-A.;//:B///;BFBB:;/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:25237:11722\t77\t*\t0\t0\t*\t*\t0\t0\tCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATATCGTATGCCGT\tAABBBFFFFFBBF5BGGFGABGHGGAEFGFHHHHFHCHFHHBFGGGEHBGGHFFFFGFAEF5FHH?EGGF5AEG3?EBFHD?C/EFHFFEGEE?CFGGGHHFHB3EEFG?EEGHCFGGGGGGGEC<CDFHHHHHE.FD11FFAGBGD.DGHEA<.<<0<EHAHCFHHF./;CC0GFH0::0CFGG0FBFD;9/90BFF0CBBFGB09;B:0;CFF0.-;@AFEEF--;AFFBF/99D-;.//.../9;B-.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:25237:11722\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTCGATCTCTGTG\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHGHGHHHHHGGGGGHHHHHHHHHHHGHHHAGHHHHHGHGHGHGGGGCGF?FHGGGGGGGGHHHGHHGGGFFGGGGGGGGGGGGGGGE?DEGGGFFEF;DDFFFFFFFEFFFEFFFFFFE./B9BFFFBFFFFFFFFFFFF>-BFFA9FFFFFFFFFFFBFAFFAFFFFFBFFFFFFF/9BFFDFFDDFF-9@CDAD;:AFF/;B//....;;///;\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:27103:7153\t77\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGCTGTCTC\t33>A?FFFDFBFGCG4EGFG??GACFGGHFHCFHCHBECDEFCEGHHHHHFFGGF3AFFHHFGEGCGHHGEHGFGHHEGG?EFHHH?EGGHHGGGGHHHHHHEGGGGGHFHHGFDDGGACFCC@?/FDDGHHHGHEFFHHH0FDHHFFEDCD.<GGEHGF0CHHHF/CAGC000CCGFHFGFGFFG?:CB990;F09;FB0BBGGGGGG?;A9EBDEFA///;FF/:F?BFBBFFBFFFF///;/9B;///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:27103:7153\t141\t*\t0\t0\t*\t*\t0\t0\tNTACTTCAGGGTCNTAAAACCTNAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCANGGNAGCTCTCCNNGNNNNTGGTATTNTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACCTGTCTC\t#>>AAAFFFFFFG#AAFFGGGG#BAFFAGHHHGGGGHGHHHHFHHHHHHHGHHHHHHHEGFGGHHBGHGHHBGFFEG2GHHFHFHHHGHHGHFH#/B#??FFGHHH##?####????FHG#??CFGGGEF>CGAGAGGGFGAA@@FFFFFFFFB=@@FF?FF;FFFF@@-@-AFEF?BB/BF?E-BBFFF;:BB/BFFFB/BFFFBFBFBBFFFFFB/FFFBB/;9A@@BFFBFFFF/BBFFFFFFE/:9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:8763:7859\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGCTTTATGC\tBABAADFFFFFFGGGGGGGGFBGFGHHFBHHHHGGHHGGEHGDHHHFGHEHHHHGHHGGGGAGHHFBHHGHFHHHHHHHHGGGCEFGFFFFEHHH?FFG1FFHHFEGGGHGFEEHHHHHGGGFGGGHHHHGGGGG/C/FG-<A<GFHHFFCGHHFHGE0<<CGHHHGCHG.CCCCCE00BBFGFFG.BB0FFBFBCF0;CBFFFEEGBBBFFBF/FFF9BF/9BAFFD9AFEDAA.A/BFFFFFFFFFEB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:8763:7859\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAGCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAG\t>AAABFFFFFFFGGGGGGGGGGHHHHHHHCHFAFHHDGEGFHHHHHHHHFHHHHFHHHHHHGHGGHGGHHHFHGHHHHHFFHHHHHHBGHFFHGHGHHHHHGGEGGHHHHHGHHHHHHHHHGFGHHHHGHGHGHHCCGGGGGGGGGGAAGF?FFFFBFA@=BDDFF?-;FFF;@CFFEFEFFFFFFFFFBFDFFFFFFFFFFFFFFFFFFFFFF:FFFF/BF/FFFEFF?DECAFEFFFFFE:FFFFFFFB\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:14751:26540\t77\t*\t0\t0\t*\t*\t0\t0\tTAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACTGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGTTGTGCACGCGATAGCATTGCGCGACGCTGGCGCCGGCGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTG\tAAA?1CFFFFADGEEGFGB1112DGDGHGFGHHCG/ECEBGGHDFGHHFHGHEB1BCGFFE2EGHHGHFFFHHBFFHEFCGGHHFHHHHH111BFFHGHEHBEHGGECEFHGFHFGGDBBGHHBHHHH0GH22FGHGFFFH1BFCG0F@FGG11@GDHFG1D/1FGFHH/FCG.>0><-<@CCFFG.CC-@C?C9FFF0C---;------;9----9-9@-AAFF9B9---9-/;B9BF/9BB//B/;///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:14751:26540\t141\t*\t0\t0\t*\t*\t0\t0\tATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGTTGGGCTATTTGGGTTTTTTGACCCTGAAG\tBBBBBFBBBBBFGGGGGGGGGGHHHHGGFHGGHGGCHHHHHHGHHHGHHGEGGGHHHHHHHHHHEFHHHHHHGEE?FGHGEHGGHHHGGGGGGEHHGGGGHHGGGEGHHHGHGGGDFGHHGHGGGGGCGAFFCCDFHHHH1CGGHBHFHFCGFFCDFHGCCE.CC:EGFHHCGHHGCF?FGGGFGGG;B9;FFFFFFEGEBF0;;;0;CFBFFF?D.DE.:..99-...;;//9A.;DE.9-./:FB.;//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:15519:10008\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACC\tBBBBBFFFFFFFGGGGGGCBGGE?GGGHHHHHGHHBEGGHHGGGGGHHHHHHHHHHHGGHHHHGFGGGGHGHGCFGHHHGGGCGGHGHGGGGGHFGGGHHHHHHGCEFGGHHHHGGGGGGGHGG/CEGHHHHGFHHHGFHHGFFHGHGHFGGEGFDDGGBCGHHGFHH/CHHHHGHGHF0CFGGGGGGGFFFFFBFFFFFFGFFGGF?DGEDEEFEFFFF?FFFFFFFFFFFFFFFBFFF.BFFFBFBBA;\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:15519:10008\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAG\tBBCBCFFFFFFFGGGGGGGGGGHHHGHHHFHHBGHHHGGGGHHHHHHGHHHHHHHHHHHHHHHGGHGGHHGHHHGGBGHHHHHHHHHHHHHHHHHGGFHHHGGGEGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGDGGGGGGGGGBFFFFFFFFFFFFFFFFFFFECB-=BFFFFFFFFBB?E-A::FFBFFFFFBFFFFFFFFFFFFBFFEFFF;0BFF0:FE?FFFFBFFFFFFFFFFFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t77\t*\t0\t0\t*\t*\t0\t0\tAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCTGTCTCTTATACACATCTCCGAGCC\tBBBBBFFFFFFFGGGGGGGGGGHHHHGHHHHHHHHHHHHGGGGGHHHHHGGHGHGGGGGGHHHGFFGHHGGGGHHHHHHCGG@FGHFHFEGGGGGGHGGGGDGHHHHHHHHHHHHHHGHHGHGHHGGGGGCGHEHGHHHFHHHFF.DGHHHHHHGHHHHHHGFGHGCGHGHHHHHHHHGHHHCD?:A::FCDGEGFGFFBFGBFGGGF00CBFFFF/BFBFFFFAE.FBBFBFFFFB/BFFBFFF/ADCAD\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 1, "time_seconds": 129.53140354156494, "inputs": {"library|input_1": {"src": "hdca", "id": "8a1377a408ce266f"}, "library|unaligned_file": true, "library|paired_options|paired_options_selector": "no", "library|type": "paired_collection", "reference_genome|own_file": {"src": "hda", "id": "2e34347c7853378c"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "ce267690e0f6bf47", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:52:08.266538", "create_time": "2022-09-10T16:50:25.293017", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-5rnj2", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/3/d/a/dataset_3da8e923-5940-498b-bbb3-12e7c827e6de.dat' genome && ln -s -f '/galaxy/server/database/objects/3/d/a/dataset_3da8e923-5940-498b-bbb3-12e7c827e6de.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/f/f/a/dataset_ffae7b47-4b76-4acb-bcba-d8fa57987a30.dat' input_f.fastq &&  ln -s '/galaxy/server/database/objects/6/e/e/dataset_6eeec3b5-6ec1-4ba6-97a4-85f90464d8f3.dat' input_r.fastq &&    bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq' --un-conc '/galaxy/server/database/objects/8/2/0/dataset_82091a7d-61c5-4668-ad8a-d58beee487b7.dat'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/1/4/c/dataset_14c56edb-504d-4ff0-82e1-4c74d34a04b1.dat'  && mv '/galaxy/server/database/objects/8/2/0/dataset_82091a7d-61c5-4668-ad8a-d58beee487b7.1.dat' '/galaxy/server/database/objects/8/2/0/dataset_82091a7d-61c5-4668-ad8a-d58beee487b7.dat' && mv '/galaxy/server/database/objects/8/2/0/dataset_82091a7d-61c5-4668-ad8a-d58beee487b7.2.dat' '/galaxy/server/database/objects/3/6/f/dataset_36f4bdb8-52f1-47e6-b41e-c854e7b84176.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 156, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 2, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 2, \"src\": \"hdca\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_collection\", \"unaligned_file\": \"true\"}"}, "inputs": {"input_11": {"id": "3b6133f7922d8c25", "src": "hda", "uuid": "ffae7b47-4b76-4acb-bcba-d8fa57987a30"}, "input_12": {"id": "2ae04ff3e4c37d29", "src": "hda", "uuid": "6eeec3b5-6ec1-4ba6-97a4-85f90464d8f3"}, "own_file": {"id": "2e34347c7853378c", "src": "hda", "uuid": "3da8e923-5940-498b-bbb3-12e7c827e6de"}}, "outputs": {"output": {"id": "fab88798759eeb68", "src": "hda", "uuid": "14c56edb-504d-4ff0-82e1-4c74d34a04b1"}, "output_unaligned_reads_r": {"id": "d83b1ad10a4cba20", "src": "hda", "uuid": "36f4bdb8-52f1-47e6-b41e-c854e7b84176"}, "output_unaligned_reads_l": {"id": "d500be0eb2d071ef", "src": "hda", "uuid": "82091a7d-61c5-4668-ad8a-d58beee487b7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/d/a/dataset_3da8e923-5940-498b-bbb3-12e7c827e6de.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Reserving size (777) for bucket 4\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  bucket 6: 30%\n  Calculating Z arrays for bucket 7\n  bucket 6: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 7: 10%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 7: 20%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 10%\n  bucket 9: 10%\n  bucket 8: 20%\n  bucket 9: 20%\n  bucket 8: 30%\n  bucket 9: 30%\n  bucket 8: 40%\n  bucket 9: 40%\n  bucket 8: 50%\n  bucket 9: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 9: 60%\n  bucket 8: 80%\n  bucket 9: 70%\n  bucket 8: 90%\n  bucket 9: 80%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 14: 40%\n  bucket 15: 50%\n  bucket 14: 50%\n  bucket 15: 60%\n  bucket 14: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 14: 70%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 30%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 40%\n  bucket 23: 10%\n  bucket 22: 50%\n  bucket 23: 20%\n  bucket 22: 60%\n  bucket 23: 30%\n  bucket 22: 70%\n  bucket 23: 40%\n  bucket 22: 80%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 30\n  Entering block accumulator loop for bucket 26:\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 2: 50%\n  bucket 4: 50%\n  bucket 1: 60%\n  bucket 3: 70%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 1: 70%\n  bucket 3: 80%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  bucket 2: 100%\n  bucket 4: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\nGetting block 7 of 30\nGetting block 8 of 30\n  Reserving size (777) for bucket 6\n  bucket 5: 10%\n  Reserving size (777) for bucket 7\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 7: 70%\n  bucket 8: 70%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  Sorting block time: 00:00:00\n  bucket 8: 90%\nReturning block of 777 for bucket 5\n  bucket 6: 100%\n  bucket 7: 100%\n  bucket 8: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\nGetting block 11 of 30\n  bucket 10: 80%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 90%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 11: 20%\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\nGetting block 13 of 30\n  bucket 12: 80%\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 90%\n  bucket 13: 10%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  Sorting block time: 00:00:00\n  bucket 13: 60%\nReturning block of 372 for bucket 12\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\nGetting block 16 of 30\n  bucket 15: 40%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 50%\n  bucket 16: 10%\n  bucket 15: 60%\n  bucket 16: 20%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 30%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 15: 90%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 15: 100%\n  bucket 17: 10%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 50%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 16: 60%\n  bucket 17: 40%\n  bucket 16: 70%\n  bucket 17: 50%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 80%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 30\n  Entering block accumulator loop for bucket 21:\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 50%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 60%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 70%\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 28: 100%\n  bucket 29: 40%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 29: 60%\n  Sorting block time: 00:00:00\n  bucket 30: 40%\nReturning block of 632 for bucket 28\n  bucket 29: 70%\n  bucket 30: 50%\n  bucket 29: 80%\n  bucket 30: 60%\n  bucket 29: 90%\n  bucket 30: 70%\n  bucket 29: 100%\n  bucket 30: 80%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/d/a/dataset_3da8e923-5940-498b-bbb3-12e7c827e6de.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Reserving size (777) for bucket 4\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  bucket 6: 30%\n  Calculating Z arrays for bucket 7\n  bucket 6: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 7: 10%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 7: 20%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 10%\n  bucket 9: 10%\n  bucket 8: 20%\n  bucket 9: 20%\n  bucket 8: 30%\n  bucket 9: 30%\n  bucket 8: 40%\n  bucket 9: 40%\n  bucket 8: 50%\n  bucket 9: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 9: 60%\n  bucket 8: 80%\n  bucket 9: 70%\n  bucket 8: 90%\n  bucket 9: 80%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 14: 40%\n  bucket 15: 50%\n  bucket 14: 50%\n  bucket 15: 60%\n  bucket 14: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 14: 70%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 30%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 40%\n  bucket 23: 10%\n  bucket 22: 50%\n  bucket 23: 20%\n  bucket 22: 60%\n  bucket 23: 30%\n  bucket 22: 70%\n  bucket 23: 40%\n  bucket 22: 80%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 30\n  Entering block accumulator loop for bucket 26:\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 2: 50%\n  bucket 4: 50%\n  bucket 1: 60%\n  bucket 3: 70%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 1: 70%\n  bucket 3: 80%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  bucket 2: 100%\n  bucket 4: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\nGetting block 7 of 30\nGetting block 8 of 30\n  Reserving size (777) for bucket 6\n  bucket 5: 10%\n  Reserving size (777) for bucket 7\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 7: 70%\n  bucket 8: 70%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  Sorting block time: 00:00:00\n  bucket 8: 90%\nReturning block of 777 for bucket 5\n  bucket 6: 100%\n  bucket 7: 100%\n  bucket 8: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\nGetting block 11 of 30\n  bucket 10: 80%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 90%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 11: 20%\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\nGetting block 13 of 30\n  bucket 12: 80%\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 90%\n  bucket 13: 10%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  Sorting block time: 00:00:00\n  bucket 13: 60%\nReturning block of 372 for bucket 12\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\nGetting block 16 of 30\n  bucket 15: 40%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 50%\n  bucket 16: 10%\n  bucket 15: 60%\n  bucket 16: 20%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 30%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 15: 90%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 15: 100%\n  bucket 17: 10%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 50%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 16: 60%\n  bucket 17: 40%\n  bucket 16: 70%\n  bucket 17: 50%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 80%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 30\n  Entering block accumulator loop for bucket 21:\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 50%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 60%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 70%\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 28: 100%\n  bucket 29: 40%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 29: 60%\n  Sorting block time: 00:00:00\n  bucket 30: 40%\nReturning block of 632 for bucket 28\n  bucket 29: 70%\n  bucket 30: 50%\n  bucket 29: 80%\n  bucket 30: 60%\n  bucket 29: 90%\n  bucket 30: 70%\n  bucket 29: 100%\n  bucket 30: 80%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:51:54", "plugin": "core", "name": "end_epoch", "raw_value": "1662828714.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:51:53", "plugin": "core", "name": "start_epoch", "raw_value": "1662828713.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_3rhl13h_.sam v. /tmp/history_bam_converted_to_sam_6ui10xot.sam )\n--- local_file\n+++ history_data\n@@ -1,30 +1,31 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --passthrough -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/121/tmp -O bam -o /galaxy/server/database/objects/1/4/c/dataset_14c56edb-504d-4ff0-82e1-4c74d34a04b1.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1108:11059:23181\t165\tchrM\t2\t0\t*\t=\t2\t0\tAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACC\tCCCCCFFFFFCCGGGGGGGGGGHHHHHHHHHHHGHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHHHHHHHHHHHHHGHGHEHHGFCGGGHHHHHHHHHHHHHHHFGHHHHHGHGHGHHGGGBFGFFFFEAFFFA.BFFFEFDDFFFFFFFFFFEEFF;D;EFFFFFF0BFFFADDFFFFFBFBFFFFFBB0FFFF0::0BF000BFFFBBF0EDFF@\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:25084:18127\t161\tchrM\t2\t8\t4M24I223M\t=\t1\t-238\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tCCCCCFFFFFFFGGGGGGGGGGGGHHHHHHHHFHHHHHHHHHHHHHHGGHHGHHHHHGGGGFHHHHHFHHHHHHHHHGGHHHHHCGGHGHHGGGGGGGHHGGGGGGGGHHHGHHGGGGGGGGGGGGGGGG@CDE?EFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFE;DFBFFFFFFFFFFFFFFFFFFFAFFFFFFFBFFE0BBBFFFFFFFFFFBFFFF9BB0:0:B;\tAS:i:-97\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYS:i:-65\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1110:23303:11846\t101\tchrM\t2\t0\t*\t=\t2\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGTGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTC\t3ABB?FAB?DAAGGGFBGGBB5AFFFGFHHGGGEGHHHFHHF3EGFHHHHEFHHGGHHHGH3EFHHHHHBDGHHE?ECHGHGHHHHHHFHHHGHHHHHHHGGHGGFHHHFHHGFFHHFEGFHHHHHHEHHFDAGHHHH/BDDFGGH1FDBGHHHHHHHCGHHHFH?0CGCF>CC=@--AFBFFB?=BFDFFF//FDB;-9A-AD-.A.A=?-9-:B/AEB/BFF.A;DDFFFBBFFFF/BBFFFFBFF9B;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:14287:20817\t97\tchrM\t2\t8\t2M36I213M\t=\t1\t-250\tGCCAACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTCATCGCACCTACGTTCACTATTACAGGCGAACATACTTATTAAAGTGTGTTAATTAAT\t>>A3>AAAACFFFGFGFGGGGGHGHHHHHHHGGGGGHGHFFCGHHGBGHFHHHHAGHHHHEHHAGFFEHEAE?GHHHHEGFFFDGHGHBFFHFHHHGHGHGHBECG@@@EHGGEGCGGGGFFGGGG?BGGGGGG.-C.FEDCFFFEFFFAF/99BEFA.:9BFB/9FFFEFFFFFFEFFF/FBBFFFFFFFFFFFB//;.@@//;DFFFF//BBFFFBF;A;DF=>B//;9B//B/;/;9//9//;B/:B9\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:36\tNM:i:42\tMD:Z:0A0T69A85T16A21C18\tYS:i:-32\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1111:23624:14516\t165\tchrM\t2\t0\t*\t=\t2\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACCCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tBBBBABFFFFFFGGGGGGGGGGHHCGHHHHHHHGHHHHHHHHHHHGDGEHHHHHHGHHHHHHHHHHHHHHHGGEFGHHHHHHHHBGFHHHHHHHHHHHHHHGHGGGGCEFGGCGHHHHFHHHHGHHHHFGHHHHHHGHGHGHHBCA?B-9FGFG?D;BD?9BFFFFFFF;DFFFF-.A;ADF-@=EF??A.BFFFEF>FDFFFFFFFFFFFBFFFFFFFFFFF/FFF/BFFFFFFFBA.?@;FFBDFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t83\tchrM\t2\t40\t1M10I240M\t=\t1\t-242\tATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAAC\t//A:D9/FBFFFFFB;//FFBA@:..BFFFFFA0A;;D;:.GGFBFEC//BAGFBEGGGFFGHFHCDC@CC.ACGCCDCGF1.?GDCA/HHHGHGGGCGGHGGDGGGHGDGDCGGHHGEGHFHFGGGGEGHHHHHHGHHHHGFHHGHFGGGGHHBFHHHHHHHHGGGFHEEGB5EFHFGHHGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHGCGHHHHHHHGHHHHGGHGGGGGGGGGGFFFFFFFAAAAA\tAS:i:-41\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:14A56A169\tYS:i:-45\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:5446:12248\t89\tchrM\t2\t0\t4M39I208M\t=\t2\t0\tATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATT\tFFFEFFFFFEFFFFFFBFFFFFFFFFFBFFFFFFFFFGGFFFFGGGGGGGF?;/GGGGGEGE;EF:GGGGGGHHHHGGGHFHHHHHHHHHHHHHGGGGGGHGGGGGGGHHGHGGGGGGHHHHHHGGGGHHGGFGHHHGGGGGGHHHGFFHHHHGGGGGHHHHHHHHHGHHHHHHHHGGGGGHGHGHHHHHHHHHHGGHGGHGBGHHHHHHHHHHHHHHHHGGGGHHHHHGFGGGGGGGGFCCFFFFDCCCC\tAS:i:-137\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:39\tNM:i:42\tMD:Z:2C0A67A140\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1102:18842:24844\t153\tchrM\t2\t3\t4M24I223M\t=\t2\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB:/BFFBFF;////FA9.FFFBFFFFFFFF9FBB/.A/FEF09FGEC?C9DEGFGEFEGGGFFFGFFGGHFCHHHFFHFDD@-EA?CFGGGGHHHHGDACDFEHHHHHGGGGHHGGGGHHHGGGGGGHGGCEFGHHHGGGGGHHHHHHHHHHHGFHHHFHGGGGGHHGHHHHHHGHHHHGGHGGHHHGHGHHHHHFHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFBFFBCCCC\tAS:i:-95\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYT:Z:UP\n@@ -179,6 +180,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n@@ -199,5 +202,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH<1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 2, "time_seconds": 119.45222616195679, "inputs": {"library|input_1": {"src": "hda", "id": "3b6133f7922d8c25"}, "library|input_2": {"src": "hda", "id": "2ae04ff3e4c37d29"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "2e34347c7853378c"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "85a19f17362ec412", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:52:08.148791", "create_time": "2022-09-10T16:50:34.611996", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-vdp5l", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/3/d/a/dataset_3da8e923-5940-498b-bbb3-12e7c827e6de.dat' genome && ln -s -f '/galaxy/server/database/objects/3/d/a/dataset_3da8e923-5940-498b-bbb3-12e7c827e6de.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/f/f/a/dataset_ffae7b47-4b76-4acb-bcba-d8fa57987a30.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/6/e/e/dataset_6eeec3b5-6ec1-4ba6-97a4-85f90464d8f3.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/b/5/4/dataset_b54109ec-6b7b-469c-998e-e6928beb4893.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 156, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 154, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 155, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "3b6133f7922d8c25", "src": "hda", "uuid": "ffae7b47-4b76-4acb-bcba-d8fa57987a30"}, "input_2": {"id": "2ae04ff3e4c37d29", "src": "hda", "uuid": "6eeec3b5-6ec1-4ba6-97a4-85f90464d8f3"}, "own_file": {"id": "2e34347c7853378c", "src": "hda", "uuid": "3da8e923-5940-498b-bbb3-12e7c827e6de"}}, "outputs": {"output": {"id": "41d1cc10eb687073", "src": "hda", "uuid": "b54109ec-6b7b-469c-998e-e6928beb4893"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/d/a/dataset_3da8e923-5940-498b-bbb3-12e7c827e6de.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 3: 80%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 2: 100%\n  bucket 3: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 100%\n  bucket 4: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 30\n  bucket 6: 10%\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  bucket 6: 20%\n  Calculating Z arrays for bucket 7\n  Reserving size (777) for bucket 8\n  bucket 6: 30%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 6: 60%\n  bucket 8: 30%\n  bucket 6: 70%\n  bucket 8: 40%\n  bucket 7: 20%\n  bucket 6: 80%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 6: 90%\n  bucket 7: 30%\n  bucket 8: 70%\n  bucket 6: 100%\n  bucket 8: 80%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 7: 60%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 70%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  bucket 10: 40%\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 50%\n  bucket 11: 10%\n  bucket 10: 60%\n  bucket 11: 20%\n  bucket 10: 70%\n  bucket 11: 30%\n  bucket 10: 80%\n  bucket 11: 40%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  bucket 19: 10%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\nGetting block 26 of 30\n  bucket 25: 70%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 10%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  Sorting block time: 00:00:00\n  bucket 26: 50%\nReturning block of 416 for bucket 25\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 60%\n  bucket 29: 70%\n  bucket 28: 70%\n  bucket 29: 80%\n  bucket 28: 80%\n  bucket 29: 90%\n  bucket 28: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 100%\n  bucket 2: 90%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\nGetting block 7 of 30\n  bucket 5: 50%\n  bucket 6: 50%\n  Reserving size (777) for bucket 7\n  bucket 5: 60%\n  Calculating Z arrays for bucket 7\n  bucket 6: 60%\n  bucket 5: 70%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 7: 10%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\nGetting block 11 of 30\n  bucket 10: 20%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 14: 30%\n  bucket 15: 40%\n  bucket 14: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 50%\n  bucket 15: 70%\n  bucket 14: 60%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 14: 70%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 30\n  Entering block accumulator loop for bucket 16:\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 17: 20%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 17: 40%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 50%\n  bucket 17: 60%\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Entering block accumulator loop for bucket 24:\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 24: 80%\n  bucket 25: 70%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 25: 80%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 70%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 80%\n  bucket 28: 10%\n  bucket 27: 90%\n  bucket 28: 20%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 30%\n  bucket 28: 40%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/d/a/dataset_3da8e923-5940-498b-bbb3-12e7c827e6de.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 3: 80%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 2: 100%\n  bucket 3: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 100%\n  bucket 4: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 30\n  bucket 6: 10%\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  bucket 6: 20%\n  Calculating Z arrays for bucket 7\n  Reserving size (777) for bucket 8\n  bucket 6: 30%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 6: 60%\n  bucket 8: 30%\n  bucket 6: 70%\n  bucket 8: 40%\n  bucket 7: 20%\n  bucket 6: 80%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 6: 90%\n  bucket 7: 30%\n  bucket 8: 70%\n  bucket 6: 100%\n  bucket 8: 80%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 7: 60%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 70%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  bucket 10: 40%\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 50%\n  bucket 11: 10%\n  bucket 10: 60%\n  bucket 11: 20%\n  bucket 10: 70%\n  bucket 11: 30%\n  bucket 10: 80%\n  bucket 11: 40%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  bucket 19: 10%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\nGetting block 26 of 30\n  bucket 25: 70%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 10%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  Sorting block time: 00:00:00\n  bucket 26: 50%\nReturning block of 416 for bucket 25\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 60%\n  bucket 29: 70%\n  bucket 28: 70%\n  bucket 29: 80%\n  bucket 28: 80%\n  bucket 29: 90%\n  bucket 28: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 100%\n  bucket 2: 90%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\nGetting block 7 of 30\n  bucket 5: 50%\n  bucket 6: 50%\n  Reserving size (777) for bucket 7\n  bucket 5: 60%\n  Calculating Z arrays for bucket 7\n  bucket 6: 60%\n  bucket 5: 70%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 7: 10%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\nGetting block 11 of 30\n  bucket 10: 20%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 14: 30%\n  bucket 15: 40%\n  bucket 14: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 50%\n  bucket 15: 70%\n  bucket 14: 60%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 14: 70%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 30\n  Entering block accumulator loop for bucket 16:\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 17: 20%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 17: 40%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 50%\n  bucket 17: 60%\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Entering block accumulator loop for bucket 24:\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 24: 80%\n  bucket 25: 70%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 25: 80%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 70%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 80%\n  bucket 28: 10%\n  bucket 27: 90%\n  bucket 28: 20%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 30%\n  bucket 28: 40%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:51:54", "plugin": "core", "name": "end_epoch", "raw_value": "1662828714.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:51:54", "plugin": "core", "name": "start_epoch", "raw_value": "1662828714.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_hy3qxh4p.sam v. /tmp/history_bam_converted_to_sam_6azno05v.sam )\n--- local_file\n+++ history_data\n@@ -1,31 +1,32 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/122/tmp -O bam -o /galaxy/server/database/objects/b/5/4/dataset_b54109ec-6b7b-469c-998e-e6928beb4893.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\tRG:Z:rg1\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1108:11059:23181\t165\tchrM\t2\t0\t*\t=\t2\t0\tAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACC\tCCCCCFFFFFCCGGGGGGGGGGHHHHHHHHHHHGHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHHHHHHHHHHHHHGHGHEHHGFCGGGHHHHHHHHHHHHHHHFGHHHHHGHGHGHHGGGBFGFFFFEAFFFA.BFFFEFDDFFFFFFFFFFEEFF;D;EFFFFFF0BFFFADDFFFFFBFBFFFFFBB0FFFF0::0BF000BFFFBBF0EDFF@\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1108:25084:18127\t161\tchrM\t2\t8\t4M24I223M\t=\t1\t-238\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tCCCCCFFFFFFFGGGGGGGGGGGGHHHHHHHHFHHHHHHHHHHHHHHGGHHGHHHHHGGGGFHHHHHFHHHHHHHHHGGHHHHHCGGHGHHGGGGGGGHHGGGGGGGGHHHGHHGGGGGGGGGGGGGGGG@CDE?EFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFE;DFBFFFFFFFFFFFFFFFFFFFAFFFFFFFBFFE0BBBFFFFFFFFFFBFFFF9BB0:0:B;\tAS:i:-97\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYS:i:-65\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1110:23303:11846\t101\tchrM\t2\t0\t*\t=\t2\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGTGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTC\t3ABB?FAB?DAAGGGFBGGBB5AFFFGFHHGGGEGHHHFHHF3EGFHHHHEFHHGGHHHGH3EFHHHHHBDGHHE?ECHGHGHHHHHHFHHHGHHHHHHHGGHGGFHHHFHHGFFHHFEGFHHHHHHEHHFDAGHHHH/BDDFGGH1FDBGHHHHHHHCGHHHFH?0CGCF>CC=@--AFBFFB?=BFDFFF//FDB;-9A-AD-.A.A=?-9-:B/AEB/BFF.A;DDFFFBBFFFF/BBFFFFBFF9B;\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:14287:20817\t97\tchrM\t2\t8\t2M36I213M\t=\t1\t-250\tGCCAACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTCATCGCACCTACGTTCACTATTACAGGCGAACATACTTATTAAAGTGTGTTAATTAAT\t>>A3>AAAACFFFGFGFGGGGGHGHHHHHHHGGGGGHGHFFCGHHGBGHFHHHHAGHHHHEHHAGFFEHEAE?GHHHHEGFFFDGHGHBFFHFHHHGHGHGHBECG@@@EHGGEGCGGGGFFGGGG?BGGGGGG.-C.FEDCFFFEFFFAF/99BEFA.:9BFB/9FFFEFFFFFFEFFF/FBBFFFFFFFFFFFB//;.@@//;DFFFF//BBFFFBF;A;DF=>B//;9B//B/;/;9//9//;B/:B9\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:36\tNM:i:42\tMD:Z:0A0T69A85T16A21C18\tYS:i:-32\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:23624:14516\t165\tchrM\t2\t0\t*\t=\t2\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACCCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tBBBBABFFFFFFGGGGGGGGGGHHCGHHHHHHHGHHHHHHHHHHHGDGEHHHHHHGHHHHHHHHHHHHHHHGGEFGHHHHHHHHBGFHHHHHHHHHHHHHHGHGGGGCEFGGCGHHHHFHHHHGHHHHFGHHHHHHGHGHGHHBCA?B-9FGFG?D;BD?9BFFFFFFF;DFFFF-.A;ADF-@=EF??A.BFFFEF>FDFFFFFFFFFFFBFFFFFFFFFFF/FFF/BFFFFFFFBA.?@;FFBDFFFF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t83\tchrM\t2\t40\t1M10I240M\t=\t1\t-242\tATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAAC\t//A:D9/FBFFFFFB;//FFBA@:..BFFFFFA0A;;D;:.GGFBFEC//BAGFBEGGGFFGHFHCDC@CC.ACGCCDCGF1.?GDCA/HHHGHGGGCGGHGGDGGGHGDGDCGGHHGEGHFHFGGGGEGHHHHHHGHHHHGFHHGHFGGGGHHBFHHHHHHHHGGGFHEEGB5EFHFGHHGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHGCGHHHHHHHGHHHHGGHGGGGGGGGGGFFFFFFFAAAAA\tAS:i:-41\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:14A56A169\tYS:i:-45\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:5446:12248\t89\tchrM\t2\t0\t4M39I208M\t=\t2\t0\tATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATT\tFFFEFFFFFEFFFFFFBFFFFFFFFFFBFFFFFFFFFGGFFFFGGGGGGGF?;/GGGGGEGE;EF:GGGGGGHHHHGGGHFHHHHHHHHHHHHHGGGGGGHGGGGGGGHHGHGGGGGGHHHHHHGGGGHHGGFGHHHGGGGGGHHHGFFHHHHGGGGGHHHHHHHHHGHHHHHHHHGGGGGHGHGHHHHHHHHHHGGHGGHGBGHHHHHHHHHHHHHHHHGGGGHHHHHGFGGGGGGGGFCCFFFFDCCCC\tAS:i:-137\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:39\tNM:i:42\tMD:Z:2C0A67A140\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1102:18842:24844\t153\tchrM\t2\t3\t4M24I223M\t=\t2\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB:/BFFBFF;////FA9.FFFBFFFFFFFF9FBB/.A/FEF09FGEC?C9DEGFGEFEGGGFFFGFFGGHFCHHHFFHFDD@-EA?CFGGGGHHHHGDACDFEHHHHHGGGGHHGGGGHHHGGGGGGHGGCEFGHHHGGGGGHHHHHHHHHHHGFHHHFHGGGGGHHGHHHHHHGHHHHGGHGGHHHGHGHHHHHFHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFBFFBCCCC\tAS:i:-95\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYT:Z:UP\tRG:Z:rg1\n@@ -180,6 +181,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\tRG:Z:rg1\n@@ -200,5 +203,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH<1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\tRG:Z:rg1\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 3, "time_seconds": 107.84418153762817, "inputs": {"library|input_1": {"src": "hda", "id": "292e5e694166e97d"}, "library|input_2": {"src": "hda", "id": "602b401822298af3"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "3d0e67587f0f12ae"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "save_mapping_stats": true}, "job": {"model_class": "Job", "id": "d3e488b858fe13b4", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:53:14.616712", "create_time": "2022-09-10T16:51:44.343054", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-4m6xj", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/0/6/7/dataset_06791fa7-3e2b-4e7f-a7ef-04fa86b3093a.dat' genome && ln -s -f '/galaxy/server/database/objects/0/6/7/dataset_06791fa7-3e2b-4e7f-a7ef-04fa86b3093a.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/c/3/b/dataset_c3b0e9ed-7a5e-418b-bafe-6ea47631f872.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/8/e/a/dataset_8eafe379-5aa6-421a-b943-fd4c403e4d4b.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                2> '/galaxy/server/database/objects/8/7/9/dataset_8799b9a6-dcd3-4a55-8a10-6905ff031cb3.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/c/3/3/dataset_c333b466-a6a2-4734-9c54-b0f31978b980.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"true\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 164, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 162, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 163, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "292e5e694166e97d", "src": "hda", "uuid": "c3b0e9ed-7a5e-418b-bafe-6ea47631f872"}, "input_2": {"id": "602b401822298af3", "src": "hda", "uuid": "8eafe379-5aa6-421a-b943-fd4c403e4d4b"}, "own_file": {"id": "3d0e67587f0f12ae", "src": "hda", "uuid": "06791fa7-3e2b-4e7f-a7ef-04fa86b3093a"}}, "outputs": {"mapping_stats": {"id": "674212bb38c2da8a", "src": "hda", "uuid": "8799b9a6-dcd3-4a55-8a10-6905ff031cb3"}, "output": {"id": "2332eefb43670244", "src": "hda", "uuid": "c333b466-a6a2-4734-9c54-b0f31978b980"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/6/7/dataset_06791fa7-3e2b-4e7f-a7ef-04fa86b3093a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 4 of 30\nGetting block 3 of 30\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 4\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 4: 70%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 5: 70%\n  bucket 7: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Entering block accumulator loop for bucket 9:\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\nGetting block 15 of 30\n  bucket 14: 50%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 15: 10%\n  bucket 14: 80%\n  bucket 15: 20%\n  bucket 14: 90%\n  bucket 15: 30%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  bucket 20: 80%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\nGetting block 24 of 30\n  bucket 23: 90%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  bucket 25: 10%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\nGetting block 30 of 30\n  Calculating Z arrays for bucket 29\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 29:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 10%\n  bucket 30: 30%\n  bucket 29: 20%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 30: 60%\n  bucket 29: 50%\n  bucket 30: 70%\n  bucket 29: 60%\n  bucket 30: 80%\n  bucket 29: 70%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 1: 100%\n  bucket 4: 50%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 3: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 5: 100%\n  bucket 6: 70%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 30\n  bucket 7: 10%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  bucket 8: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Entering block accumulator loop for bucket 9:\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 11 of 30\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Reserving size (777) for bucket 11\nReturning block of 681 for bucket 10\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 19\nReturning block of 723 for bucket 18\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 50%\n  bucket 20: 10%\n  bucket 19: 60%\n  bucket 20: 20%\n  bucket 19: 70%\n  bucket 20: 30%\n  bucket 19: 80%\n  bucket 20: 40%\n  bucket 19: 90%\n  bucket 20: 50%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 30\n  Entering block accumulator loop for bucket 21:\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  bucket 25: 20%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 26: 40%\n  bucket 25: 80%\n  bucket 26: 50%\n  bucket 25: 90%\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  bucket 29: 10%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 50%\n  bucket 30: 70%\n  bucket 29: 60%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 70%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n", "stderr": "\nBuilding a SMALL index\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/6/7/dataset_06791fa7-3e2b-4e7f-a7ef-04fa86b3093a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 4 of 30\nGetting block 3 of 30\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 4\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 4: 70%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 5: 70%\n  bucket 7: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Entering block accumulator loop for bucket 9:\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\nGetting block 15 of 30\n  bucket 14: 50%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 15: 10%\n  bucket 14: 80%\n  bucket 15: 20%\n  bucket 14: 90%\n  bucket 15: 30%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  bucket 20: 80%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\nGetting block 24 of 30\n  bucket 23: 90%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  bucket 25: 10%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\nGetting block 30 of 30\n  Calculating Z arrays for bucket 29\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 29:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 10%\n  bucket 30: 30%\n  bucket 29: 20%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 30: 60%\n  bucket 29: 50%\n  bucket 30: 70%\n  bucket 29: 60%\n  bucket 30: 80%\n  bucket 29: 70%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 1: 100%\n  bucket 4: 50%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 3: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 5: 100%\n  bucket 6: 70%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 30\n  bucket 7: 10%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  bucket 8: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Entering block accumulator loop for bucket 9:\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 11 of 30\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Reserving size (777) for bucket 11\nReturning block of 681 for bucket 10\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 19\nReturning block of 723 for bucket 18\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 50%\n  bucket 20: 10%\n  bucket 19: 60%\n  bucket 20: 20%\n  bucket 19: 70%\n  bucket 20: 30%\n  bucket 19: 80%\n  bucket 20: 40%\n  bucket 19: 90%\n  bucket 20: 50%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 30\n  Entering block accumulator loop for bucket 21:\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  bucket 25: 20%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 26: 40%\n  bucket 25: 80%\n  bucket 26: 50%\n  bucket 25: 90%\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  bucket 29: 10%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 50%\n  bucket 30: 70%\n  bucket 29: 60%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 70%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:53:05", "plugin": "core", "name": "end_epoch", "raw_value": "1662828785.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:53:05", "plugin": "core", "name": "start_epoch", "raw_value": "1662828785.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_lr461w3m.sam v. /tmp/history_bam_converted_to_sam_6fs3l0w2.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/126/tmp -O bam -o /galaxy/server/database/objects/c/3/3/dataset_c333b466-a6a2-4734-9c54-b0f31978b980.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBAAFABDBBFGGGGGGGGGGHHHGHHGHHHHHHHHHGHHGHHGHHHGHGGGEGHHHHHHHHHHHHHGHHHGHHHGGHGGHHHHHHHHHHHHHHHHHHGHHHHHHHHGHHHHHGGCFEHHHGFHHHHGHHFFH?GGHHHHGHGHGHHCFGGGGGGGFFFFFFFFFFFFFFFFFFFFADFA?.FEFAFFFEFFFFFFFFFFFFDABFBBFFFFFFFFEFFBFFFFFFFFFFF/FFBFFFFFFADE>BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1110:12808:18367\t161\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACAGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTT\tABCCCCDDDFFFGGGGGGGGGGHHHHHHHHHGGGGGGHHHHFHHGHHHHHHHHHHHHHGHHHGGHHHH3GFHEFHHHHHGHHGFHHHHHFGHHHHHGHGHGGHGGGGGGGHHHGGCGGGGHHGGGGGGGGGGGGGGGGGGGF-BAEFEBEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFAFEFDFFFFFFFFFF0BFBED=@DFFFFFFFFFEFFFFFBFAFB;0:;F0\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T30G38A140A0A1\tYS:i:-138\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1110:16559:7507\t163\tchrM\t1\t23\t3M35I213M\t=\t1\t251\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAAT\t>AABBCCCCFFFGGGGGGGGGGHHHHHHHHHGGHGGHGHFHHHHFHHHHHHHHHHFHHGHHHHGHHHHHGGEEGHHHHHHHHHHHHHHHHHHHHHHGHGHGHHGGGGGGGHHGGGFGAGFGGGGGGGGGGGDDDFAGGFFFFCFAFEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFE..@BFFBD./;:0FFFFF09B/AFCA=-99BFFBFFFFFFFB:BFBFFBFB9:\tAS:i:-125\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:35\tNM:i:38\tMD:Z:1A0T69A143\tYS:i:-8\tYT:Z:CP\n********\n*SNIP *\n********\n@@ -179,6 +162,24 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF<GGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//>>1F10>B?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11</?//<@?/F<<<A-<FBGH0.00=G0<<C//./0;;GC....<C.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA>>ABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10>GGFGHHGHFFBGFGB2>F<EEF0@C@9:AAF00;9@-9.;FBBBBB->@;-A@FF<-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0<EFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD>D>D9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3>>A@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE</ECDFHHBF1DGBFBFGFH<1GHGDGGFDFE0/<--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?->;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C<->.ADDGE1GA<DBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA>ABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF<@-9?BDEFFF?B--?DFFFB9FA>B;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG<C???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 4, "time_seconds": 121.0957772731781, "inputs": {"library|input_1": {"src": "hda", "id": "6a6fac1678cf5e98"}, "library|unaligned_file": false, "library|type": "paired_interleaved", "reference_genome|own_file": {"src": "hda", "id": "f6e3a11d0bcc29e1"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "082c0f2a6b814296", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:54:09.092333", "create_time": "2022-09-10T16:52:26.183386", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-2srdb", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/7/5/c/dataset_75c2151c-23f2-4dc9-8e51-f7e4f5ced528.dat' genome && ln -s -f '/galaxy/server/database/objects/7/5/c/dataset_75c2151c-23f2-4dc9-8e51-f7e4f5ced528.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/2/5/5/dataset_25585a41-0ad4-4857-9fe7-7b564a3de395.dat' input_il.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   --interleaved 'input_il.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/a/6/b/dataset_a6b36ef7-12e7-4864-b80f-44fcec8f95f3.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 174, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 3, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 167, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_interleaved\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "6a6fac1678cf5e98", "src": "hda", "uuid": "25585a41-0ad4-4857-9fe7-7b564a3de395"}, "own_file": {"id": "f6e3a11d0bcc29e1", "src": "hda", "uuid": "75c2151c-23f2-4dc9-8e51-f7e4f5ced528"}}, "outputs": {"output": {"id": "704c16be25aba49e", "src": "hda", "uuid": "a6b36ef7-12e7-4864-b80f-44fcec8f95f3"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/7/5/c/dataset_75c2151c-23f2-4dc9-8e51-f7e4f5ced528.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  bucket 1: 10%\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 10%\n  bucket 1: 50%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 1: 100%\n  bucket 4: 50%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  Entering block accumulator loop for bucket 7:\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 40%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 50%\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 14: 60%\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 15: 40%\n  bucket 14: 80%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 30%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 40%\n  bucket 19: 10%\n  bucket 18: 50%\n  bucket 19: 20%\n  bucket 18: 60%\n  bucket 19: 30%\n  bucket 18: 70%\n  bucket 19: 40%\n  bucket 18: 80%\n  bucket 19: 50%\n  bucket 18: 90%\n  bucket 18: 100%\n  bucket 19: 60%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 70%\n  bucket 19: 80%\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  bucket 20: 10%\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 20: 70%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\nGetting block 25 of 30\n  Reserving size (777) for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 24\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 24: 80%\n  bucket 25: 90%\n  bucket 24: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 30\n  Entering block accumulator loop for bucket 26:\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 26: 20%\n  bucket 27: 30%\n  bucket 26: 30%\n  bucket 27: 40%\n  bucket 26: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 26: 50%\n  bucket 27: 70%\n  bucket 26: 60%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 26: 70%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 30\n  bucket 29: 20%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 29: 40%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 29: 60%\n  bucket 30: 40%\n  bucket 29: 70%\n  bucket 30: 50%\n  bucket 29: 80%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 1: 100%\n  bucket 3: 90%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 4: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 11: 80%\n  bucket 12: 100%\n  bucket 11: 90%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  bucket 14: 90%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 14: 100%\nReturning block of 596 for bucket 13\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\nGetting block 16 of 30\n  bucket 15: 50%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 60%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 70%\n  bucket 16: 10%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 30%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 19: 70%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  bucket 19: 80%\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  bucket 23: 10%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Entering block accumulator loop for bucket 27:\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 30\n  Entering block accumulator loop for bucket 28:\n  Reserving size (777) for bucket 29\n  bucket 27: 10%\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 29: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 29: 50%\n  bucket 27: 100%\n  bucket 28: 70%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/7/5/c/dataset_75c2151c-23f2-4dc9-8e51-f7e4f5ced528.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  bucket 1: 10%\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 10%\n  bucket 1: 50%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 1: 100%\n  bucket 4: 50%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  Entering block accumulator loop for bucket 7:\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 40%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 50%\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 14: 60%\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 15: 40%\n  bucket 14: 80%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 30%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 40%\n  bucket 19: 10%\n  bucket 18: 50%\n  bucket 19: 20%\n  bucket 18: 60%\n  bucket 19: 30%\n  bucket 18: 70%\n  bucket 19: 40%\n  bucket 18: 80%\n  bucket 19: 50%\n  bucket 18: 90%\n  bucket 18: 100%\n  bucket 19: 60%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 70%\n  bucket 19: 80%\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  bucket 20: 10%\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 20: 70%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\nGetting block 25 of 30\n  Reserving size (777) for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 24\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 24: 80%\n  bucket 25: 90%\n  bucket 24: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 30\n  Entering block accumulator loop for bucket 26:\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 26: 20%\n  bucket 27: 30%\n  bucket 26: 30%\n  bucket 27: 40%\n  bucket 26: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 26: 50%\n  bucket 27: 70%\n  bucket 26: 60%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 26: 70%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 30\n  bucket 29: 20%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 29: 40%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 29: 60%\n  bucket 30: 40%\n  bucket 29: 70%\n  bucket 30: 50%\n  bucket 29: 80%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 1: 100%\n  bucket 3: 90%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 4: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 11: 80%\n  bucket 12: 100%\n  bucket 11: 90%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  bucket 14: 90%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 14: 100%\nReturning block of 596 for bucket 13\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\nGetting block 16 of 30\n  bucket 15: 50%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 60%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 70%\n  bucket 16: 10%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 30%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 19: 70%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  bucket 19: 80%\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  bucket 23: 10%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Entering block accumulator loop for bucket 27:\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 30\n  Entering block accumulator loop for bucket 28:\n  Reserving size (777) for bucket 29\n  bucket 27: 10%\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 29: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 29: 50%\n  bucket 27: 100%\n  bucket 28: 70%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:53:59", "plugin": "core", "name": "end_epoch", "raw_value": "1662828839.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:53:59", "plugin": "core", "name": "start_epoch", "raw_value": "1662828839.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_66s8x_cn.sam v. /tmp/history_bam_converted_to_sam_cbjhw7a3.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --interleaved input_il.fastq --rg-id rg1 --rg PL:CAPILLARY\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --rg-id rg1 --rg PL:CAPILLARY --interleaved input_il.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/135/tmp -O bam -o /galaxy/server/database/objects/a/6/b/dataset_a6b36ef7-12e7-4864-b80f-44fcec8f95f3.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t153\tchrM\t1\t3\t4M23I224M\t=\t1\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB099BFFFBFBBFEF?EFFFB090FFFFFFFFFFD;;.GFFGFGFA0FGFFEFEGGGFBCE;BGHHFFGHGEHFHHHHGFE@ECCDCGGGGGEHFFFGGGGGBHHGFGGGCGHHGGGGGGHGGGGGGHHHDGCFFBHGGGGGHHHHHFHFHGGGHHHHGHGGGGGHHHGGHGHHHHHHHGGHGGHHGGHHHHHHHEHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFCFFCCCCB\tAS:i:-99\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:23\tNM:i:29\tMD:Z:0G0A0T0C11A56A155\tYT:Z:UP\tRG:Z:rg1\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 5, "time_seconds": 119.96849775314331, "inputs": {"library|input_1": {"src": "hda", "id": "84cbf75717cff9eb"}, "library|input_2": {"src": "hda", "id": "457ac84383e0fc6d"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "f6e3a11d0bcc29e1"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "bd0525a1cec53c41", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:54:08.201675", "create_time": "2022-09-10T16:52:41.635233", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-ksc55", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/7/5/c/dataset_75c2151c-23f2-4dc9-8e51-f7e4f5ced528.dat' genome && ln -s -f '/galaxy/server/database/objects/7/5/c/dataset_75c2151c-23f2-4dc9-8e51-f7e4f5ced528.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/5/3/a/dataset_53ae97e6-6f78-4f29-904b-04a8af7668c1.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/3/c/5/dataset_3c5cb781-975b-4032-8a50-62de9a81ea9f.dat' input_r.fastq.gz &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.gz' -2 'input_r.fastq.gz'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/a/7/8/dataset_a7874176-eb8c-4c88-b50d-982769ebc3f9.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 174, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 168, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 170, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "84cbf75717cff9eb", "src": "hda", "uuid": "53ae97e6-6f78-4f29-904b-04a8af7668c1"}, "input_2": {"id": "457ac84383e0fc6d", "src": "hda", "uuid": "3c5cb781-975b-4032-8a50-62de9a81ea9f"}, "own_file": {"id": "f6e3a11d0bcc29e1", "src": "hda", "uuid": "75c2151c-23f2-4dc9-8e51-f7e4f5ced528"}}, "outputs": {"output": {"id": "88b3f1cd3fe75a0e", "src": "hda", "uuid": "a7874176-eb8c-4c88-b50d-982769ebc3f9"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/7/5/c/dataset_75c2151c-23f2-4dc9-8e51-f7e4f5ced528.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  bucket 1: 10%\nGetting block 3 of 30\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 2: 60%\n  bucket 1: 100%\n  bucket 3: 70%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 2: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 2: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 2: 100%\n  Sorting block of length 499 for bucket 4\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\nGetting block 6 of 30\n  bucket 5: 80%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  bucket 7: 10%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 30\n  bucket 10: 10%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 10: 80%\n  bucket 11: 80%\n  bucket 10: 90%\n  bucket 11: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\nGetting block 17 of 30\n  bucket 16: 80%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 90%\n  bucket 17: 10%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 40%\n  bucket 19: 10%\n  bucket 18: 50%\n  bucket 19: 20%\n  bucket 18: 60%\n  bucket 19: 30%\n  bucket 18: 70%\n  bucket 19: 40%\n  bucket 18: 80%\n  bucket 19: 50%\n  bucket 18: 90%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\nGetting block 21 of 30\n  Calculating Z arrays for bucket 20\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 20: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 20: 20%\n  bucket 21: 60%\n  bucket 20: 30%\n  bucket 21: 70%\n  bucket 20: 40%\n  bucket 21: 80%\n  bucket 20: 50%\n  bucket 21: 90%\n  bucket 20: 60%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 30\n  bucket 24: 30%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 25: 30%\n  bucket 24: 80%\n  bucket 25: 40%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 30\n  bucket 27: 30%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 2: 100%\n  bucket 3: 80%\n  Sorting block of length 774 for bucket 2\n  bucket 4: 80%\n  bucket 1: 100%\n  bucket 3: 90%\n  (Using difference cover)\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  bucket 5: 50%\n  bucket 6: 30%\n  Calculating Z arrays for bucket 7\n  bucket 5: 60%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 7: 10%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 20%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 7: 30%\n  bucket 6: 90%\n  bucket 7: 40%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nReturning block of 180 for bucket 6\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 30\n  Entering block accumulator loop for bucket 10:\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 11: 30%\n  bucket 10: 30%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 10: 60%\n  bucket 11: 80%\n  bucket 10: 70%\n  bucket 11: 90%\n  bucket 10: 80%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 30\n  bucket 15: 60%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 70%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 80%\n  bucket 16: 10%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 21: 90%\n  bucket 22: 100%\n  bucket 21: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 30\n  bucket 23: 20%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 24: 30%\n  bucket 23: 90%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 25: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 30\n  Entering block accumulator loop for bucket 29:\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 20%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 30%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  Sorting block time: 00:00:00\n  bucket 29: 70%\nReturning block of 678 for bucket 30\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/7/5/c/dataset_75c2151c-23f2-4dc9-8e51-f7e4f5ced528.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  bucket 1: 10%\nGetting block 3 of 30\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 2: 60%\n  bucket 1: 100%\n  bucket 3: 70%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 2: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 2: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 2: 100%\n  Sorting block of length 499 for bucket 4\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\nGetting block 6 of 30\n  bucket 5: 80%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  bucket 7: 10%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 30\n  bucket 10: 10%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 10: 80%\n  bucket 11: 80%\n  bucket 10: 90%\n  bucket 11: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\nGetting block 17 of 30\n  bucket 16: 80%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 90%\n  bucket 17: 10%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 40%\n  bucket 19: 10%\n  bucket 18: 50%\n  bucket 19: 20%\n  bucket 18: 60%\n  bucket 19: 30%\n  bucket 18: 70%\n  bucket 19: 40%\n  bucket 18: 80%\n  bucket 19: 50%\n  bucket 18: 90%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\nGetting block 21 of 30\n  Calculating Z arrays for bucket 20\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 20: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 20: 20%\n  bucket 21: 60%\n  bucket 20: 30%\n  bucket 21: 70%\n  bucket 20: 40%\n  bucket 21: 80%\n  bucket 20: 50%\n  bucket 21: 90%\n  bucket 20: 60%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 30\n  bucket 24: 30%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 25: 30%\n  bucket 24: 80%\n  bucket 25: 40%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 30\n  bucket 27: 30%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 2: 100%\n  bucket 3: 80%\n  Sorting block of length 774 for bucket 2\n  bucket 4: 80%\n  bucket 1: 100%\n  bucket 3: 90%\n  (Using difference cover)\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  bucket 5: 50%\n  bucket 6: 30%\n  Calculating Z arrays for bucket 7\n  bucket 5: 60%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 7: 10%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 20%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 7: 30%\n  bucket 6: 90%\n  bucket 7: 40%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nReturning block of 180 for bucket 6\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 30\n  Entering block accumulator loop for bucket 10:\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 11: 30%\n  bucket 10: 30%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 10: 60%\n  bucket 11: 80%\n  bucket 10: 70%\n  bucket 11: 90%\n  bucket 10: 80%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 30\n  bucket 15: 60%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 70%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 80%\n  bucket 16: 10%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 21: 90%\n  bucket 22: 100%\n  bucket 21: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 30\n  bucket 23: 20%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 24: 30%\n  bucket 23: 90%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 25: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 30\n  Entering block accumulator loop for bucket 29:\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 20%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 30%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  Sorting block time: 00:00:00\n  bucket 29: 70%\nReturning block of 678 for bucket 30\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:53:53", "plugin": "core", "name": "end_epoch", "raw_value": "1662828833.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:53:53", "plugin": "core", "name": "start_epoch", "raw_value": "1662828833.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_a4l2svc9.sam v. /tmp/history_bam_converted_to_sam_bfpq61iy.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq.gz -2 input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/136/tmp -O bam -o /galaxy/server/database/objects/a/7/8/dataset_a7874176-eb8c-4c88-b50d-982769ebc3f9.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBAAFABDBBFGGGGGGGGGGHHHGHHGHHHHHHHHHGHHGHHGHHHGHGGGEGHHHHHHHHHHHHHGHHHGHHHGGHGGHHHHHHHHHHHHHHHHHHGHHHHHHHHGHHHHHGGCFEHHHGFHHHHGHHFFH?GGHHHHGHGHGHHCFGGGGGGGFFFFFFFFFFFFFFFFFFFFADFA?.FEFAFFFEFFFFFFFFFFFFDABFBBFFFFFFFFEFFBFFFFFFFFFFF/FFBFFFFFFADE>BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1110:12808:18367\t161\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACAGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTT\tABCCCCDDDFFFGGGGGGGGGGHHHHHHHHHGGGGGGHHHHFHHGHHHHHHHHHHHHHGHHHGGHHHH3GFHEFHHHHHGHHGFHHHHHFGHHHHHGHGHGGHGGGGGGGHHHGGCGGGGHHGGGGGGGGGGGGGGGGGGGF-BAEFEBEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFAFEFDFFFFFFFFFF0BFBED=@DFFFFFFFFFEFFFFFBFAFB;0:;F0\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T30G38A140A0A1\tYS:i:-138\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1110:16559:7507\t163\tchrM\t1\t23\t3M35I213M\t=\t1\t251\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAAT\t>AABBCCCCFFFGGGGGGGGGGHHHHHHHHHGGHGGHGHFHHHHFHHHHHHHHHHFHHGHHHHGHHHHHGGEEGHHHHHHHHHHHHHHHHHHHHHHGHGHGHHGGGGGGGHHGGGFGAGFGGGGGGGGGGGDDDFAGGFFFFCFAFEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFE..@BFFBD./;:0FFFFF09B/AFCA=-99BFFBFFFFFFFB:BFBFFBFB9:\tAS:i:-125\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:35\tNM:i:38\tMD:Z:1A0T69A143\tYS:i:-8\tYT:Z:CP\n********\n*SNIP *\n********\n@@ -179,6 +162,24 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF<GGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//>>1F10>B?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11</?//<@?/F<<<A-<FBGH0.00=G0<<C//./0;;GC....<C.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA>>ABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10>GGFGHHGHFFBGFGB2>F<EEF0@C@9:AAF00;9@-9.;FBBBBB->@;-A@FF<-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0<EFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD>D>D9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3>>A@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE</ECDFHHBF1DGBFBFGFH<1GHGDGGFDFE0/<--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?->;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C<->.ADDGE1GA<DBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA>ABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF<@-9?BDEFFF?B--?DFFFB9FA>B;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG<C???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 6, "time_seconds": 123.42107701301575, "inputs": {"library|input_1": {"src": "hda", "id": "2f46ed8fb47e4404"}, "library|input_2": {"src": "hda", "id": "9173d6e17fb8ae5e"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "f6e3a11d0bcc29e1"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "fbafe51e78f5ef05", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:54:11.757134", "create_time": "2022-09-10T16:52:43.277927", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-td5dn", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/7/5/c/dataset_75c2151c-23f2-4dc9-8e51-f7e4f5ced528.dat' genome && ln -s -f '/galaxy/server/database/objects/7/5/c/dataset_75c2151c-23f2-4dc9-8e51-f7e4f5ced528.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/f/d/9/dataset_fd9638d2-3999-4ca3-8c68-160d82e9de47.dat' input_f.fastq.bz2 &&  ln -f -s '/galaxy/server/database/objects/8/6/a/dataset_86aee6b5-fc3c-404b-b2af-fe6aab2c1ef9.dat' input_r.fastq.bz2 &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.bz2' -2 'input_r.fastq.bz2'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/d/5/6/dataset_d566f5a9-6063-489f-8ff4-4bf4808eb991.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 174, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 171, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 173, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "2f46ed8fb47e4404", "src": "hda", "uuid": "fd9638d2-3999-4ca3-8c68-160d82e9de47"}, "input_2": {"id": "9173d6e17fb8ae5e", "src": "hda", "uuid": "86aee6b5-fc3c-404b-b2af-fe6aab2c1ef9"}, "own_file": {"id": "f6e3a11d0bcc29e1", "src": "hda", "uuid": "75c2151c-23f2-4dc9-8e51-f7e4f5ced528"}}, "outputs": {"output": {"id": "b382e7ad19d3b222", "src": "hda", "uuid": "d566f5a9-6063-489f-8ff4-4bf4808eb991"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/7/5/c/dataset_75c2151c-23f2-4dc9-8e51-f7e4f5ced528.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 1: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 1: 80%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 3: 100%\n  bucket 1: 90%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 7: 70%\n  bucket 6: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\nGetting block 10 of 30\n  bucket 9: 50%\n  Reserving size (777) for bucket 10\n  bucket 9: 60%\n  Calculating Z arrays for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 9: 70%\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 80%\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 9: 90%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 10: 50%\n  bucket 11: 70%\n  bucket 10: 60%\n  Sorting block time: 00:00:00\n  bucket 11: 80%\nReturning block of 547 for bucket 9\n  bucket 10: 70%\n  bucket 11: 90%\n  bucket 10: 80%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 50%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 30\n  Entering block accumulator loop for bucket 14:\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 14: 60%\n  bucket 15: 50%\n  bucket 14: 70%\n  bucket 15: 60%\n  bucket 14: 80%\n  bucket 15: 70%\n  bucket 14: 90%\n  bucket 15: 80%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\nGetting block 17 of 30\n  bucket 16: 30%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 17: 10%\n  bucket 16: 50%\n  bucket 17: 20%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 17: 30%\n  bucket 16: 80%\n  bucket 17: 40%\n  bucket 16: 90%\n  bucket 17: 50%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 50%\n  bucket 22: 10%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 22: 50%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\nGetting block 25 of 30\nGetting block 26 of 30\n  bucket 24: 40%\n  Reserving size (777) for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 25\n  Calculating Z arrays for bucket 26\n  bucket 24: 50%\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 60%\n  bucket 25: 10%\n  bucket 24: 70%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 24: 80%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 25: 40%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\nGetting block 30 of 30\n  Calculating Z arrays for bucket 29\n  Reserving size (777) for bucket 30\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 28: 30%\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 30: 20%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 30: 30%\n  bucket 28: 60%\n  bucket 30: 40%\n  bucket 29: 30%\n  bucket 28: 70%\n  bucket 30: 50%\n  bucket 29: 40%\n  bucket 30: 60%\n  bucket 28: 80%\n  bucket 30: 70%\n  bucket 29: 50%\n  bucket 30: 80%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 30: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  bucket 3: 90%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\nGetting block 7 of 30\n  bucket 5: 40%\n  bucket 6: 30%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 50%\n  bucket 6: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 60%\n  bucket 6: 50%\nGetting block 8 of 30\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 10%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 5: 80%\n  bucket 6: 70%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 8: 10%\n  bucket 5: 100%\n  bucket 6: 90%\n  bucket 7: 30%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 20%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 8: 80%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\nGetting block 11 of 30\n  bucket 10: 80%\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 10: 90%\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 100%\n  bucket 11: 10%\n  Sorting block of length 680 for bucket 10\n  bucket 12: 10%\n  (Using difference cover)\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\nGetting block 15 of 30\n  bucket 14: 100%\n  Reserving size (777) for bucket 15\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 15: 20%\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 50%\n  bucket 16: 70%\n  bucket 15: 60%\n  bucket 16: 80%\n  bucket 15: 70%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 18: 20%\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 19: 30%\n  bucket 18: 40%\n  bucket 19: 40%\n  bucket 18: 50%\n  bucket 19: 50%\n  bucket 18: 60%\n  bucket 19: 60%\n  bucket 18: 70%\n  bucket 19: 70%\n  bucket 18: 80%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  bucket 20: 20%\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\nGetting block 25 of 30\n  bucket 24: 40%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 25: 30%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  bucket 28: 20%\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 30%\n  bucket 28: 80%\n  bucket 29: 40%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/7/5/c/dataset_75c2151c-23f2-4dc9-8e51-f7e4f5ced528.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 1: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 1: 80%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 3: 100%\n  bucket 1: 90%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 7: 70%\n  bucket 6: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\nGetting block 10 of 30\n  bucket 9: 50%\n  Reserving size (777) for bucket 10\n  bucket 9: 60%\n  Calculating Z arrays for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 9: 70%\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 80%\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 9: 90%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 10: 50%\n  bucket 11: 70%\n  bucket 10: 60%\n  Sorting block time: 00:00:00\n  bucket 11: 80%\nReturning block of 547 for bucket 9\n  bucket 10: 70%\n  bucket 11: 90%\n  bucket 10: 80%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 50%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 30\n  Entering block accumulator loop for bucket 14:\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 14: 60%\n  bucket 15: 50%\n  bucket 14: 70%\n  bucket 15: 60%\n  bucket 14: 80%\n  bucket 15: 70%\n  bucket 14: 90%\n  bucket 15: 80%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\nGetting block 17 of 30\n  bucket 16: 30%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 17: 10%\n  bucket 16: 50%\n  bucket 17: 20%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 17: 30%\n  bucket 16: 80%\n  bucket 17: 40%\n  bucket 16: 90%\n  bucket 17: 50%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 50%\n  bucket 22: 10%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 22: 50%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\nGetting block 25 of 30\nGetting block 26 of 30\n  bucket 24: 40%\n  Reserving size (777) for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 25\n  Calculating Z arrays for bucket 26\n  bucket 24: 50%\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 60%\n  bucket 25: 10%\n  bucket 24: 70%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 24: 80%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 25: 40%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\nGetting block 30 of 30\n  Calculating Z arrays for bucket 29\n  Reserving size (777) for bucket 30\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 28: 30%\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 30: 20%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 30: 30%\n  bucket 28: 60%\n  bucket 30: 40%\n  bucket 29: 30%\n  bucket 28: 70%\n  bucket 30: 50%\n  bucket 29: 40%\n  bucket 30: 60%\n  bucket 28: 80%\n  bucket 30: 70%\n  bucket 29: 50%\n  bucket 30: 80%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 30: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  bucket 3: 90%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\nGetting block 7 of 30\n  bucket 5: 40%\n  bucket 6: 30%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 50%\n  bucket 6: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 60%\n  bucket 6: 50%\nGetting block 8 of 30\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 10%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 5: 80%\n  bucket 6: 70%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 8: 10%\n  bucket 5: 100%\n  bucket 6: 90%\n  bucket 7: 30%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 20%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 8: 80%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\nGetting block 11 of 30\n  bucket 10: 80%\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 10: 90%\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 100%\n  bucket 11: 10%\n  Sorting block of length 680 for bucket 10\n  bucket 12: 10%\n  (Using difference cover)\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\nGetting block 15 of 30\n  bucket 14: 100%\n  Reserving size (777) for bucket 15\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 15: 20%\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 50%\n  bucket 16: 70%\n  bucket 15: 60%\n  bucket 16: 80%\n  bucket 15: 70%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 18: 20%\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 19: 30%\n  bucket 18: 40%\n  bucket 19: 40%\n  bucket 18: 50%\n  bucket 19: 50%\n  bucket 18: 60%\n  bucket 19: 60%\n  bucket 18: 70%\n  bucket 19: 70%\n  bucket 18: 80%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  bucket 20: 20%\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\nGetting block 25 of 30\n  bucket 24: 40%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 25: 30%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  bucket 28: 20%\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 30%\n  bucket 28: 80%\n  bucket 29: 40%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:54:01", "plugin": "core", "name": "end_epoch", "raw_value": "1662828841.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:54:00", "plugin": "core", "name": "start_epoch", "raw_value": "1662828840.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_h0ax6bi1.sam v. /tmp/history_bam_converted_to_sam_yxbbqaeu.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 /tmp/gxy-td5dn-p7h92_49mate1 -2 /tmp/gxy-td5dn-p7h92_49mate2\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/137/tmp -O bam -o /galaxy/server/database/objects/d/5/6/dataset_d566f5a9-6063-489f-8ff4-4bf4808eb991.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1109:19224:11655\t77\t*\t0\t0\t*\t*\t0\t0\tAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGCATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCTGTCTCTTATACACATCTCCGAGCC\tBBB@A4FFFBBBGGGGGGGGGGHHHHHHHHFHHHHGFGHGGGFFAGFHHHFHHHGHHHHHHHHHHHFHGGHGHHGCFFGHHHGHHHGHHFHGGH3BFFGHHGHGEFFH/EG@-CFGGCC@-;BD?FGGGGGG??FGDAGDFFFFEFF@BAAFEFFBFFFFF?FD9BBFFFF/FFFFBFFFFFFF?FFBFFFF/FBBFFBFFFE?F;@B//AFFFFFFFFF//;BFFEF.BFFFB/;F/99/FBFFBDCF;B\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:19224:11655\t141\t*\t0\t0\t*\t*\t0\t0\tCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTCTGTCTCTTATACACATCTGAGCTTC\tCCCCCFFFFFFFGGGGFGGGGGHGGHGGGHHHHHHHHHHHHHGGGGGHFHHHHHHFHHHHHFHHHGGGGGHEFHCEEHHHGGGGFGGGFGGGGHEGGGEHFHHHHDGGF?AGFHGGGGGGGGHGGGGGGGHHHHHHGFFFHHHHFCEFHFHGF<EGFHFGGAGBFHHHG/C.;C:0:GGG00CFGEFGBA.9C:BBFFGFGGFFFBFGAGG.D..:A.DFFEFFFBFFF0099:9BB0BFB009000;000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:21978:9490\t77\t*\t0\t0\t*\t*\t0\t0\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCAGTT\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGAFGHGHFGDGBCGHHHHHFHHGHHHHHHHGHHHH1E?EGGGHHHHFGFHFHHHHHEDHHGHH@GGHGHHCGG?CFGFGGGGGFGB.BFGGFFGGFFFBDDBFFFFFF9-;DEFFDFBFFBB.EFF;BFBFFFFFFFFFFFFFFFFFFFFFFFFF/B9/FFFFFFFAFFFF--99AFFFFFFFA;;;FF..9//;/;;/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:21978:9490\t141\t*\t0\t0\t*\t*\t0\t0\tGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGGTCCAGTGTAGAGTTATGGGG\tBAABBFFFFFFFGGGGGGGGGGGGGHHHGHGGHHHGGGGGGGFHGGGGHHGGGGHHHHHHGGGGG?HHHGGGGGG?E1FEEE?EHHHHFHAGHHHHHHHHHFHHHHGGFDEG2FCFFGHHHHFH?FF<FFGDHHHHBGHHEGFDD<GFGFDBGHGGHH0GDFH@<AEE.::CFGGHGGBGFGG0BFAF0000BFDEGGFGGGGGFGE00BC;;B00.;AAD.;--------.-;/:9////////////;9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:22910:4079\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTCCACTTTAGCTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHGGGGGHHHHGGEHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGFHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGGHHHGGHGGGHHGHGHHHHHHHGFHHHHHHHHHHHHHHHHHHGGHHHHHHHHHHGHHHHHHGGGGGGGGGGGGGGGGGGGGFFGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFCCDFFFFFFF0BFFFFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:22910:4079\t141\t*\t0\t0\t*\t*\t0\t0\tCTCCGGGCCCATAACACTTGGGGTAGCTAAAGTGGACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCT\tCCCDCCCCCDDFGGGGGGGGGGGEGGHHHHHHGHHHHGHHHHHHGGGFGHGFHHHHHHHHHHHHHHHFHGHHHHHGGHHHHHHBGHHGGCGGHEHHHFHHHHFHHFHHHHHHGHGGHGGHHHHHHHHHGHHFFHHHHHGHHHHHHHGHHGHHGG?FGHHGHHHHHHHHHHHGGHHHHHH?CEHGFHGGF--@DFFFFFAA;DDFFFFFF?@FC.A=DD-.AFFFF;->;.ED.FFFFFFF-.:00009BBF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:24217:19077\t77\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGCCTTTGATTCCTGCCTCATCCTATTACTGTC\t>AAA3BDFFFFDGBFFEEGGGGHHGHFHHCFHGHGHHHGF3BFGFHGFEFHFHGH3EGFC1EEGBFGBHFGGFFHHHGHFHGHHGHGGHCEHEBCFF3ED3@GH4FDEG12FFHFFHG/G3FGA/@EFEFCG33FFGBBGHFHH/?BFBGFGFAGC2C/@-;@-;BFFEFADF?DFFFFFF?;AFFA;AD;..FEFFA--;9;D.9BFFBE?;.;///://///99//BB/9;F./B//BBFB9////99/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:24217:19077\t141\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGAACCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTC\tBBBBBFFFFFFFGFEGGCFGFGHHHHFHHFHHHHHHGGEEEFGHGFFAGFFEEAEGGHHBEEFAFGAEF1G3GFGGEEF@EAGGHGFF?ECGGHEEEFGGHHHHFHHFHHGFHHHC2D<FFFFAFDFF<FF1FGGBHHFF0>AGHGG00<G<<DGBGDD0<.;CGG;;:;CFFHHHHHHG?D.;.;/ACD.;FFFB0CFBFGGFGGB0;EFAFF9B/:BB/;;AEFF//:AF-A.;//:B///;BFBB:;/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:25237:11722\t77\t*\t0\t0\t*\t*\t0\t0\tCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATATCGTATGCCGT\tAABBBFFFFFBBF5BGGFGABGHGGAEFGFHHHHFHCHFHHBFGGGEHBGGHFFFFGFAEF5FHH?EGGF5AEG3?EBFHD?C/EFHFFEGEE?CFGGGHHFHB3EEFG?EEGHCFGGGGGGGEC<CDFHHHHHE.FD11FFAGBGD.DGHEA<.<<0<EHAHCFHHF./;CC0GFH0::0CFGG0FBFD;9/90BFF0CBBFGB09;B:0;CFF0.-;@AFEEF--;AFFBF/99D-;.//.../9;B-.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:25237:11722\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTCGATCTCTGTG\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHGHGHHHHHGGGGGHHHHHHHHHHHGHHHAGHHHHHGHGHGHGGGGCGF?FHGGGGGGGGHHHGHHGGGFFGGGGGGGGGGGGGGGE?DEGGGFFEF;DDFFFFFFFEFFFEFFFFFFE./B9BFFFBFFFFFFFFFFFF>-BFFA9FFFFFFFFFFFBFAFFAFFFFFBFFFFFFF/9BFFDFFDDFF-9@CDAD;:AFF/;B//....;;///;\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:27103:7153\t77\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGCTGTCTC\t33>A?FFFDFBFGCG4EGFG??GACFGGHFHCFHCHBECDEFCEGHHHHHFFGGF3AFFHHFGEGCGHHGEHGFGHHEGG?EFHHH?EGGHHGGGGHHHHHHEGGGGGHFHHGFDDGGACFCC@?/FDDGHHHGHEFFHHH0FDHHFFEDCD.<GGEHGF0CHHHF/CAGC000CCGFHFGFGFFG?:CB990;F09;FB0BBGGGGGG?;A9EBDEFA///;FF/:F?BFBBFFBFFFF///;/9B;///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:27103:7153\t141\t*\t0\t0\t*\t*\t0\t0\tNTACTTCAGGGTCNTAAAACCTNAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCANGGNAGCTCTCCNNGNNNNTGGTATTNTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACCTGTCTC\t#>>AAAFFFFFFG#AAFFGGGG#BAFFAGHHHGGGGHGHHHHFHHHHHHHGHHHHHHHEGFGGHHBGHGHHBGFFEG2GHHFHFHHHGHHGHFH#/B#??FFGHHH##?####????FHG#??CFGGGEF>CGAGAGGGFGAA@@FFFFFFFFB=@@FF?FF;FFFF@@-@-AFEF?BB/BF?E-BBFFF;:BB/BFFFB/BFFFBFBFBBFFFFFB/FFFBB/;9A@@BFFBFFFF/BBFFFFFFE/:9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:8763:7859\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGCTTTATGC\tBABAADFFFFFFGGGGGGGGFBGFGHHFBHHHHGGHHGGEHGDHHHFGHEHHHHGHHGGGGAGHHFBHHGHFHHHHHHHHGGGCEFGFFFFEHHH?FFG1FFHHFEGGGHGFEEHHHHHGGGFGGGHHHHGGGGG/C/FG-<A<GFHHFFCGHHFHGE0<<CGHHHGCHG.CCCCCE00BBFGFFG.BB0FFBFBCF0;CBFFFEEGBBBFFBF/FFF9BF/9BAFFD9AFEDAA.A/BFFFFFFFFFEB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:8763:7859\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAGCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAG\t>AAABFFFFFFFGGGGGGGGGGHHHHHHHCHFAFHHDGEGFHHHHHHHHFHHHHFHHHHHHGHGGHGGHHHFHGHHHHHFFHHHHHHBGHFFHGHGHHHHHGGEGGHHHHHGHHHHHHHHHGFGHHHHGHGHGHHCCGGGGGGGGGGAAGF?FFFFBFA@=BDDFF?-;FFF;@CFFEFEFFFFFFFFFBFDFFFFFFFFFFFFFFFFFFFFFF:FFFF/BF/FFFEFF?DECAFEFFFFFE:FFFFFFFB\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:14751:26540\t77\t*\t0\t0\t*\t*\t0\t0\tTAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACTGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGTTGTGCACGCGATAGCATTGCGCGACGCTGGCGCCGGCGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTG\tAAA?1CFFFFADGEEGFGB1112DGDGHGFGHHCG/ECEBGGHDFGHHFHGHEB1BCGFFE2EGHHGHFFFHHBFFHEFCGGHHFHHHHH111BFFHGHEHBEHGGECEFHGFHFGGDBBGHHBHHHH0GH22FGHGFFFH1BFCG0F@FGG11@GDHFG1D/1FGFHH/FCG.>0><-<@CCFFG.CC-@C?C9FFF0C---;------;9----9-9@-AAFF9B9---9-/;B9BF/9BB//B/;///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:14751:26540\t141\t*\t0\t0\t*\t*\t0\t0\tATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGTTGGGCTATTTGGGTTTTTTGACCCTGAAG\tBBBBBFBBBBBFGGGGGGGGGGHHHHGGFHGGHGGCHHHHHHGHHHGHHGEGGGHHHHHHHHHHEFHHHHHHGEE?FGHGEHGGHHHGGGGGGEHHGGGGHHGGGEGHHHGHGGGDFGHHGHGGGGGCGAFFCCDFHHHH1CGGHBHFHFCGFFCDFHGCCE.CC:EGFHHCGHHGCF?FGGGFGGG;B9;FFFFFFEGEBF0;;;0;CFBFFF?D.DE.:..99-...;;//9A.;DE.9-./:FB.;//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:15519:10008\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACC\tBBBBBFFFFFFFGGGGGGCBGGE?GGGHHHHHGHHBEGGHHGGGGGHHHHHHHHHHHGGHHHHGFGGGGHGHGCFGHHHGGGCGGHGHGGGGGHFGGGHHHHHHGCEFGGHHHHGGGGGGGHGG/CEGHHHHGFHHHGFHHGFFHGHGHFGGEGFDDGGBCGHHGFHH/CHHHHGHGHF0CFGGGGGGGFFFFFBFFFFFFGFFGGF?DGEDEEFEFFFF?FFFFFFFFFFFFFFFBFFF.BFFFBFBBA;\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:15519:10008\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAG\tBBCBCFFFFFFFGGGGGGGGGGHHHGHHHFHHBGHHHGGGGHHHHHHGHHHHHHHHHHHHHHHGGHGGHHGHHHGGBGHHHHHHHHHHHHHHHHHGGFHHHGGGEGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGDGGGGGGGGGBFFFFFFFFFFFFFFFFFFFECB-=BFFFFFFFFBB?E-A::FFBFFFFFBFFFFFFFFFFFFBFFEFFF;0BFF0:FE?FFFFBFFFFFFFFFFFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t77\t*\t0\t0\t*\t*\t0\t0\tAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCTGTCTCTTATACACATCTCCGAGCC\tBBBBBFFFFFFFGGGGGGGGGGHHHHGHHHHHHHHHHHHGGGGGHHHHHGGHGHGGGGGGHHHGFFGHHGGGGHHHHHHCGG@FGHFHFEGGGGGGHGGGGDGHHHHHHHHHHHHHHGHHGHGHHGGGGGCGHEHGHHHFHHHFF.DGHHHHHHGHHHHHHGFGHGCGHGHHHHHHHHGHHHCD?:A::FCDGEGFGFFBFGBFGGGF00CBFFFF/BFBFFFFAE.FBBFBFFFFB/BFFBFFF/ADCAD\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 7, "time_seconds": 100.1203887462616, "inputs": {"library|input_1": {"src": "hda", "id": "8bc0b1ed92e3049d"}, "library|input_2": {"src": "hda", "id": "74972550173eb4a9"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "3506c5385bb21c90"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "936c377491a017db", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:54:54.811701", "create_time": "2022-09-10T16:53:32.142141", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-fxkxt", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/8/1/8/dataset_818effa8-b8f3-447b-a337-d42a0134fcf4.dat' genome && ln -s -f '/galaxy/server/database/objects/8/1/8/dataset_818effa8-b8f3-447b-a337-d42a0134fcf4.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/5/6/0/dataset_56037c60-ea93-4d00-ba87-1a3f295c3316.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/5/f/b/dataset_5fba690a-c6ce-48ba-8bc6-6e8f01e344c5.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/9/1/b/dataset_91be0689-5709-41af-9c34-c3cf95950a50.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 180, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 178, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 179, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "8bc0b1ed92e3049d", "src": "hda", "uuid": "56037c60-ea93-4d00-ba87-1a3f295c3316"}, "input_2": {"id": "74972550173eb4a9", "src": "hda", "uuid": "5fba690a-c6ce-48ba-8bc6-6e8f01e344c5"}, "own_file": {"id": "3506c5385bb21c90", "src": "hda", "uuid": "818effa8-b8f3-447b-a337-d42a0134fcf4"}}, "outputs": {"output": {"id": "71796f947384b036", "src": "hda", "uuid": "91be0689-5709-41af-9c34-c3cf95950a50"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/8/1/8/dataset_818effa8-b8f3-447b-a337-d42a0134fcf4.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 1: 70%\nGetting block 2 of 30\n  bucket 1: 80%\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 90%\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 100%\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 3:\nReturning block of 690 for bucket 1\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 50%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 80%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 100%\n  bucket 4: 70%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  bucket 4: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\nGetting block 7 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 5: 50%\nGetting block 8 of 30\n  bucket 7: 50%\n  Reserving size (777) for bucket 8\n  bucket 6: 50%\n  Calculating Z arrays for bucket 8\n  bucket 5: 60%\n  bucket 7: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 7: 70%\n  bucket 8: 10%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 8: 20%\n  bucket 5: 90%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 8: 30%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 40%\n  bucket 7: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 30\n  bucket 10: 10%\n  Reserving size (777) for bucket 11\n  bucket 10: 20%\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  bucket 10: 30%\n  Reserving size (777) for bucket 12\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 40%\n  Calculating Z arrays for bucket 12\n  bucket 10: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 60%\n  bucket 11: 10%\n  bucket 10: 70%\n  bucket 12: 10%\n  bucket 10: 80%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 10: 90%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 10: 100%\n  bucket 11: 40%\n  bucket 12: 40%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 12: 50%\n  bucket 11: 50%\nReturning block of 248 for bucket 10\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 11: 70%\n  bucket 12: 90%\n  bucket 11: 80%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 15: 20%\n  bucket 14: 60%\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 40%\n  bucket 14: 90%\n  bucket 15: 50%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 18: 90%\n  bucket 19: 80%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  bucket 20: 10%\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 21: 60%\n  bucket 20: 70%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  bucket 23: 90%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 30\n  bucket 24: 30%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 25: 20%\n  bucket 24: 60%\n  bucket 25: 30%\n  bucket 24: 70%\n  bucket 25: 40%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 70%\n  bucket 29: 10%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 20%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 3: 100%\n  bucket 4: 60%\n  bucket 2: 80%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 1: 90%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 4: 80%\n  bucket 2: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\n  bucket 5: 10%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 5: 90%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\nGetting block 11 of 30\n  bucket 10: 30%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  bucket 10: 40%\n  bucket 11: 10%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 10: 50%\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 10: 60%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 10: 70%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 10: 100%\n  bucket 11: 90%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\nGetting block 15 of 30\n  bucket 14: 70%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 15: 10%\n  bucket 14: 100%\n  bucket 15: 20%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 30\n  bucket 15: 60%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 15: 70%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 80%\n  bucket 16: 10%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 19: 40%\n  bucket 18: 80%\n  bucket 19: 50%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\nGetting block 23 of 30\n  bucket 22: 40%\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 22: 70%\n  bucket 23: 30%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 22: 90%\n  bucket 23: 50%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 23: 60%\n  bucket 23: 70%\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 24: 40%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 24: 50%\n  bucket 25: 80%\n  bucket 24: 60%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\nGetting block 27 of 30\n  Calculating Z arrays for bucket 26\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nReturning block of 648 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\nGetting block 29 of 30\n  Calculating Z arrays for bucket 28\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/8/1/8/dataset_818effa8-b8f3-447b-a337-d42a0134fcf4.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 1: 70%\nGetting block 2 of 30\n  bucket 1: 80%\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 90%\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 100%\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 3:\nReturning block of 690 for bucket 1\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 50%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 80%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 100%\n  bucket 4: 70%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  bucket 4: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\nGetting block 7 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 5: 50%\nGetting block 8 of 30\n  bucket 7: 50%\n  Reserving size (777) for bucket 8\n  bucket 6: 50%\n  Calculating Z arrays for bucket 8\n  bucket 5: 60%\n  bucket 7: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 7: 70%\n  bucket 8: 10%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 8: 20%\n  bucket 5: 90%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 8: 30%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 40%\n  bucket 7: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 30\n  bucket 10: 10%\n  Reserving size (777) for bucket 11\n  bucket 10: 20%\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  bucket 10: 30%\n  Reserving size (777) for bucket 12\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 40%\n  Calculating Z arrays for bucket 12\n  bucket 10: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 60%\n  bucket 11: 10%\n  bucket 10: 70%\n  bucket 12: 10%\n  bucket 10: 80%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 10: 90%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 10: 100%\n  bucket 11: 40%\n  bucket 12: 40%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 12: 50%\n  bucket 11: 50%\nReturning block of 248 for bucket 10\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 11: 70%\n  bucket 12: 90%\n  bucket 11: 80%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 15: 20%\n  bucket 14: 60%\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 40%\n  bucket 14: 90%\n  bucket 15: 50%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 18: 90%\n  bucket 19: 80%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  bucket 20: 10%\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 21: 60%\n  bucket 20: 70%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  bucket 23: 90%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 30\n  bucket 24: 30%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 25: 20%\n  bucket 24: 60%\n  bucket 25: 30%\n  bucket 24: 70%\n  bucket 25: 40%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 70%\n  bucket 29: 10%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 20%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 3: 100%\n  bucket 4: 60%\n  bucket 2: 80%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 1: 90%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 4: 80%\n  bucket 2: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\n  bucket 5: 10%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 5: 90%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\nGetting block 11 of 30\n  bucket 10: 30%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  bucket 10: 40%\n  bucket 11: 10%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 10: 50%\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 10: 60%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 10: 70%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 10: 100%\n  bucket 11: 90%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\nGetting block 15 of 30\n  bucket 14: 70%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 15: 10%\n  bucket 14: 100%\n  bucket 15: 20%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 30\n  bucket 15: 60%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 15: 70%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 80%\n  bucket 16: 10%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 19: 40%\n  bucket 18: 80%\n  bucket 19: 50%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\nGetting block 23 of 30\n  bucket 22: 40%\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 22: 70%\n  bucket 23: 30%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 22: 90%\n  bucket 23: 50%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 23: 60%\n  bucket 23: 70%\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 24: 40%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 24: 50%\n  bucket 25: 80%\n  bucket 24: 60%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\nGetting block 27 of 30\n  Calculating Z arrays for bucket 26\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nReturning block of 648 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\nGetting block 29 of 30\n  Calculating Z arrays for bucket 28\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:54:46", "plugin": "core", "name": "end_epoch", "raw_value": "1662828886.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:54:46", "plugin": "core", "name": "start_epoch", "raw_value": "1662828886.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_7bwnikdr.sam v. /tmp/history_bam_converted_to_sam__6g5ci4j.sam )\n--- local_file\n+++ history_data\n@@ -1,26 +1,27 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/mvandenb/miniconda3/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/141/tmp -O bam -o /galaxy/server/database/objects/9/1/b/dataset_91be0689-5709-41af-9c34-c3cf95950a50.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t24\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-47\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-47\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t-218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t6\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-146\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-140\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1108:11059:23181\t165\tchrM\t2\t0\t*\t=\t2\t0\tAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:25084:18127\t161\tchrM\t2\t8\t4M24I223M\t=\t1\t-238\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-101\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYS:i:-74\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M8I3M1I5M\t=\t1\t-239\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-90\tXN:i:0\tXM:i:6\tXO:i:3\tXG:i:13\tNM:i:19\tMD:Z:2C0A67A115A46T1A1\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1110:23303:11846\t101\tchrM\t2\t0\t*\t=\t2\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGTGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:14287:20817\t97\tchrM\t2\t3\t2M36I213M\t=\t1\t-250\tGCCAACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTCATCGCACCTACGTTCACTATTACAGGCGAACATACTTATTAAAGTGTGTTAATTAAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-149\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:36\tNM:i:42\tMD:Z:0A0T69A85T16A21C18\tYS:i:-44\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1111:23624:14516\t165\tchrM\t2\t0\t*\t=\t2\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACCCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M8I3M1I5M\t=\t1\t-239\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-90\tXN:i:0\tXM:i:6\tXO:i:3\tXG:i:13\tNM:i:19\tMD:Z:2C0A67A115A46T1A1\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t83\tchrM\t2\t24\t1M10I240M\t=\t1\t-242\tATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAAC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-47\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:14A56A169\tYS:i:-47\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t153\tchrM\t2\t0\t4M24I223M\t=\t2\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-107\tXN:i:0\tXM:i:5\tXO:i:1\tXG:i:24\tNM:i:29\tMD:Z:0A0T1A10A56A155\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5446:12248\t89\tchrM\t2\t0\t4M39I208M\t=\t2\t0\tATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-140\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:39\tNM:i:42\tMD:Z:2C0A67A140\tYT:Z:UP\n@@ -175,6 +176,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:7437:24508\t77\t*\t0\t0\t*\t*\t0\t0\tACACACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTGTCTCTTATACACATCTCCGAGCCCACGAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n@@ -199,5 +202,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 8, "time_seconds": 114.1706907749176, "inputs": {"library|input_1": {"src": "hda", "id": "f93fe7755af7735b"}, "library|input_2": {"src": "hda", "id": "0809ad937a58e54f"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "f3c88837fc693b17"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|reorder": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "47c28ddf711fce4b", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:56:02.283951", "create_time": "2022-09-10T16:54:27.384404", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-2cqjm", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/7/5/7/dataset_75741b06-5b51-4de6-b0cd-5e3c6f93c65b.dat' genome && ln -s -f '/galaxy/server/database/objects/7/5/7/dataset_75741b06-5b51-4de6-b0cd-5e3c6f93c65b.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/0/a/1/dataset_0a1b2c05-e266-4bfb-9cd7-ceee0fbba6e0.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/9/f/7/dataset_9f7d4b76-cbc9-4ce9-9034-749f66f413b6.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                    --reorder   | samtools view -bS - -o '/galaxy/server/database/objects/5/9/3/dataset_59308967-2c20-4ab7-8f51-6ab7824b422b.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"true\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"false\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 187, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 185, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 186, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "f93fe7755af7735b", "src": "hda", "uuid": "0a1b2c05-e266-4bfb-9cd7-ceee0fbba6e0"}, "input_2": {"id": "0809ad937a58e54f", "src": "hda", "uuid": "9f7d4b76-cbc9-4ce9-9034-749f66f413b6"}, "own_file": {"id": "f3c88837fc693b17", "src": "hda", "uuid": "75741b06-5b51-4de6-b0cd-5e3c6f93c65b"}}, "outputs": {"output": {"id": "7cf47a79b3eb4e02", "src": "hda", "uuid": "59308967-2c20-4ab7-8f51-6ab7824b422b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/7/5/7/dataset_75741b06-5b51-4de6-b0cd-5e3c6f93c65b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  bucket 1: 10%\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 1: 100%\n  bucket 3: 80%\n  bucket 4: 60%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 3: 100%\n  bucket 4: 80%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 4: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\nGetting block 8 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 8: 30%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 5: 40%\n  bucket 6: 60%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  bucket 5: 70%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 5: 80%\n  Sorting block time: 00:00:00\n  bucket 7: 100%\n  bucket 5: 90%\n  bucket 8: 90%\nReturning block of 306 for bucket 6\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\nGetting block 11 of 30\n  bucket 10: 90%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 17: 10%\n  bucket 16: 50%\n  bucket 17: 20%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 16: 70%\n  bucket 17: 50%\nGetting block 18 of 30\n  bucket 16: 80%\n  Reserving size (777) for bucket 18\n  bucket 17: 60%\n  bucket 16: 90%\n  Calculating Z arrays for bucket 18\n  bucket 17: 70%\n  Entering block accumulator loop for bucket 18:\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 18: 10%\n  bucket 17: 90%\n  bucket 17: 100%\n  bucket 18: 20%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  bucket 21: 10%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 50%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Entering block accumulator loop for bucket 23:\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 23: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 28: 40%\n  bucket 27: 90%\n  bucket 28: 50%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 2: 100%\n  bucket 3: 60%\n  bucket 4: 80%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\nGetting block 7 of 30\n  bucket 6: 30%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 7: 10%\n  bucket 6: 60%\n  bucket 7: 20%\n  bucket 6: 70%\n  bucket 7: 30%\n  bucket 6: 80%\n  bucket 7: 40%\n  bucket 6: 90%\n  bucket 7: 50%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\n  bucket 7: 90%\nReturning block of 180 for bucket 6\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 50%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 13: 70%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  bucket 15: 30%\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  bucket 17: 20%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  Sorting block time: 00:00:00\n  bucket 18: 90%\nReturning block of 607 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  bucket 19: 10%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  bucket 19: 90%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\nGetting block 24 of 30\n  bucket 23: 40%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 50%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 60%\n  bucket 24: 10%\n  bucket 23: 70%\n  bucket 24: 20%\n  bucket 23: 80%\n  bucket 24: 30%\n  bucket 23: 90%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  bucket 27: 10%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/7/5/7/dataset_75741b06-5b51-4de6-b0cd-5e3c6f93c65b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  bucket 1: 10%\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 1: 100%\n  bucket 3: 80%\n  bucket 4: 60%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 3: 100%\n  bucket 4: 80%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 4: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\nGetting block 8 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 8: 30%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 5: 40%\n  bucket 6: 60%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  bucket 5: 70%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 5: 80%\n  Sorting block time: 00:00:00\n  bucket 7: 100%\n  bucket 5: 90%\n  bucket 8: 90%\nReturning block of 306 for bucket 6\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\nGetting block 11 of 30\n  bucket 10: 90%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 17: 10%\n  bucket 16: 50%\n  bucket 17: 20%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 16: 70%\n  bucket 17: 50%\nGetting block 18 of 30\n  bucket 16: 80%\n  Reserving size (777) for bucket 18\n  bucket 17: 60%\n  bucket 16: 90%\n  Calculating Z arrays for bucket 18\n  bucket 17: 70%\n  Entering block accumulator loop for bucket 18:\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 18: 10%\n  bucket 17: 90%\n  bucket 17: 100%\n  bucket 18: 20%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  bucket 21: 10%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 50%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Entering block accumulator loop for bucket 23:\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 23: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 28: 40%\n  bucket 27: 90%\n  bucket 28: 50%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 2: 100%\n  bucket 3: 60%\n  bucket 4: 80%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\nGetting block 7 of 30\n  bucket 6: 30%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 7: 10%\n  bucket 6: 60%\n  bucket 7: 20%\n  bucket 6: 70%\n  bucket 7: 30%\n  bucket 6: 80%\n  bucket 7: 40%\n  bucket 6: 90%\n  bucket 7: 50%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\n  bucket 7: 90%\nReturning block of 180 for bucket 6\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 50%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 13: 70%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  bucket 15: 30%\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  bucket 17: 20%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  Sorting block time: 00:00:00\n  bucket 18: 90%\nReturning block of 607 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  bucket 19: 10%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  bucket 19: 90%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\nGetting block 24 of 30\n  bucket 23: 40%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 50%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 60%\n  bucket 24: 10%\n  bucket 23: 70%\n  bucket 24: 20%\n  bucket 23: 80%\n  bucket 24: 30%\n  bucket 23: 90%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  bucket 27: 10%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:55:53", "plugin": "core", "name": "end_epoch", "raw_value": "1662828953.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:55:53", "plugin": "core", "name": "start_epoch", "raw_value": "1662828953.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-9", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 9, "time_seconds": 126.07039642333984, "inputs": {"library|input_1": {"src": "hda", "id": "f93fe7755af7735b"}, "library|input_2": {"src": "hda", "id": "0809ad937a58e54f"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "f3c88837fc693b17"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|sam_opt": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "8de27933fce0d2e6", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:56:15.165478", "create_time": "2022-09-10T16:54:42.257896", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-7svmp", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/7/5/7/dataset_75741b06-5b51-4de6-b0cd-5e3c6f93c65b.dat' genome && ln -s -f '/galaxy/server/database/objects/7/5/7/dataset_75741b06-5b51-4de6-b0cd-5e3c6f93c65b.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/0/a/1/dataset_0a1b2c05-e266-4bfb-9cd7-ceee0fbba6e0.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/9/f/7/dataset_9f7d4b76-cbc9-4ce9-9034-749f66f413b6.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                       > '/galaxy/server/database/objects/3/5/5/dataset_35570043-f419-4c6c-a0cb-fdbc0355e48e.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"false\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"true\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 187, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 185, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 186, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "f93fe7755af7735b", "src": "hda", "uuid": "0a1b2c05-e266-4bfb-9cd7-ceee0fbba6e0"}, "input_2": {"id": "0809ad937a58e54f", "src": "hda", "uuid": "9f7d4b76-cbc9-4ce9-9034-749f66f413b6"}, "own_file": {"id": "f3c88837fc693b17", "src": "hda", "uuid": "75741b06-5b51-4de6-b0cd-5e3c6f93c65b"}}, "outputs": {"output": {"id": "dbd6e5f9f7050c10", "src": "hda", "uuid": "35570043-f419-4c6c-a0cb-fdbc0355e48e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/7/5/7/dataset_75741b06-5b51-4de6-b0cd-5e3c6f93c65b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 1: 100%\n  bucket 2: 100%\n  bucket 4: 90%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 6: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 7: 10%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 7: 20%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 7: 40%\n  Sorting block time: 00:00:00\n  bucket 7: 50%\nReturning block of 306 for bucket 6\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  bucket 10: 10%\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 10: 40%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 10: 70%\n  bucket 11: 90%\n  bucket 10: 80%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 15 of 30\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 15\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 15: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 15: 20%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 15: 30%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 15: 40%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 15: 50%\n  bucket 13: 80%\n  bucket 15: 60%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 15: 70%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 14: 70%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\n  bucket 14: 80%\n  bucket 15: 100%\nReturning block of 598 for bucket 13\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 50%\n  bucket 18: 10%\n  bucket 17: 60%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  Entering block accumulator loop for bucket 19:\nReturning block of 579 for bucket 17\n  bucket 19: 10%\n  bucket 19: 20%\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 25: 10%\n  bucket 24: 40%\n  bucket 25: 20%\n  bucket 24: 50%\n  bucket 25: 30%\n  bucket 24: 60%\n  bucket 25: 40%\n  bucket 24: 70%\n  bucket 25: 50%\n  bucket 24: 80%\n  bucket 25: 60%\n  bucket 24: 90%\n  bucket 25: 70%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 26: 50%\n  bucket 27: 60%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 1: 60%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 1: 100%\n  bucket 2: 100%\n  Sorting block of length 484 for bucket 1\n  bucket 3: 100%\n  bucket 4: 90%\n  (Using difference cover)\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\nGetting block 7 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  Reserving size (777) for bucket 8\n  bucket 5: 10%\n  Calculating Z arrays for bucket 8\n  bucket 6: 10%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 8: 10%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 8: 50%\n  bucket 6: 60%\n  bucket 7: 40%\n  bucket 8: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 8: 70%\n  bucket 7: 50%\n  bucket 6: 80%\n  bucket 5: 70%\n  bucket 8: 80%\n  bucket 6: 90%\n  bucket 7: 60%\n  bucket 8: 90%\n  bucket 5: 80%\n  bucket 6: 100%\n  bucket 7: 70%\n  bucket 8: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 5: 100%\n  bucket 7: 90%\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\nReturning block of 180 for bucket 6\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\n  bucket 7: 100%\nReturning block of 777 for bucket 5\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 9: 100%\n  bucket 10: 60%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 16: 20%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 18: 20%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 18: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 18: 40%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 18: 50%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 18: 60%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 18: 70%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  bucket 18: 80%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  bucket 22: 20%\n  Reserving size (777) for bucket 24\n  bucket 23: 10%\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 22: 50%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 24: 40%\n  bucket 22: 70%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 22: 80%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 22: 90%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 23: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 30\n  bucket 26: 10%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Entering block accumulator loop for bucket 27:\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 26: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 26: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 26: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 26: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 26: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 26: 80%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  bucket 28: 90%\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/7/5/7/dataset_75741b06-5b51-4de6-b0cd-5e3c6f93c65b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 1: 100%\n  bucket 2: 100%\n  bucket 4: 90%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 6: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 7: 10%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 7: 20%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 7: 40%\n  Sorting block time: 00:00:00\n  bucket 7: 50%\nReturning block of 306 for bucket 6\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  bucket 10: 10%\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 10: 40%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 10: 70%\n  bucket 11: 90%\n  bucket 10: 80%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 15 of 30\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 15\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 15: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 15: 20%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 15: 30%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 15: 40%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 15: 50%\n  bucket 13: 80%\n  bucket 15: 60%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 15: 70%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 14: 70%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\n  bucket 14: 80%\n  bucket 15: 100%\nReturning block of 598 for bucket 13\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 50%\n  bucket 18: 10%\n  bucket 17: 60%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  Entering block accumulator loop for bucket 19:\nReturning block of 579 for bucket 17\n  bucket 19: 10%\n  bucket 19: 20%\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 25: 10%\n  bucket 24: 40%\n  bucket 25: 20%\n  bucket 24: 50%\n  bucket 25: 30%\n  bucket 24: 60%\n  bucket 25: 40%\n  bucket 24: 70%\n  bucket 25: 50%\n  bucket 24: 80%\n  bucket 25: 60%\n  bucket 24: 90%\n  bucket 25: 70%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 26: 50%\n  bucket 27: 60%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 1: 60%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 1: 100%\n  bucket 2: 100%\n  Sorting block of length 484 for bucket 1\n  bucket 3: 100%\n  bucket 4: 90%\n  (Using difference cover)\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\nGetting block 7 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  Reserving size (777) for bucket 8\n  bucket 5: 10%\n  Calculating Z arrays for bucket 8\n  bucket 6: 10%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 8: 10%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 8: 50%\n  bucket 6: 60%\n  bucket 7: 40%\n  bucket 8: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 8: 70%\n  bucket 7: 50%\n  bucket 6: 80%\n  bucket 5: 70%\n  bucket 8: 80%\n  bucket 6: 90%\n  bucket 7: 60%\n  bucket 8: 90%\n  bucket 5: 80%\n  bucket 6: 100%\n  bucket 7: 70%\n  bucket 8: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 5: 100%\n  bucket 7: 90%\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\nReturning block of 180 for bucket 6\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\n  bucket 7: 100%\nReturning block of 777 for bucket 5\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 9: 100%\n  bucket 10: 60%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 16: 20%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 18: 20%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 18: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 18: 40%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 18: 50%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 18: 60%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 18: 70%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  bucket 18: 80%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  bucket 22: 20%\n  Reserving size (777) for bucket 24\n  bucket 23: 10%\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 22: 50%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 24: 40%\n  bucket 22: 70%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 22: 80%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 22: 90%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 23: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 30\n  bucket 26: 10%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Entering block accumulator loop for bucket 27:\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 26: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 26: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 26: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 26: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 26: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 26: 80%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  bucket 28: 90%\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:56:00", "plugin": "core", "name": "end_epoch", "raw_value": "1662828960.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:56:00", "plugin": "core", "name": "start_epoch", "raw_value": "1662828960.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 0, "time_seconds": 121.40166425704956, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "bad6c8c4a87d4bb0"}, "reference_source|reference_source_selector": "history", "input_type|fastq_input1": {"src": "hda", "id": "a0a2fd73999501e2"}, "input_type|input_type_selector": "single", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "9a1d904647861a84", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:56:13.273127", "create_time": "2022-09-10T16:54:44.077872", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-v6crk", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/0/7/c/dataset_07c547d1-01a2-4b4e-9147-82c9c342077a.dat' 'localref.fa' && bwa index 'localref.fa' &&                 bwa aln -t \"${GALAXY_SLOTS:-1}\"     'localref.fa' '/galaxy/server/database/objects/6/4/2/dataset_642c5727-a304-45c5-b488-145ec2eb4086.dat' > first.sai &&  bwa samse    'localref.fa' first.sai '/galaxy/server/database/objects/6/4/2/dataset_642c5727-a304-45c5-b488-145ec2eb4086.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/8/9/4/dataset_89456bf6-89fe-4574-8f74-2abd41432dd0.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "input_type": "{\"__current_case__\": 2, \"adv_se_options\": {\"__current_case__\": 1, \"adv_se_options_selector\": \"do_not_set\"}, \"fastq_input1\": {\"values\": [{\"id\": 189, \"src\": \"hda\"}]}, \"input_type_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 188, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "bad6c8c4a87d4bb0", "src": "hda", "uuid": "07c547d1-01a2-4b4e-9147-82c9c342077a"}, "fastq_input1": {"id": "a0a2fd73999501e2", "src": "hda", "uuid": "642c5727-a304-45c5-b488-145ec2eb4086"}}, "outputs": {"bam_output": {"id": "545f21c7ae733716", "src": "hda", "uuid": "89456bf6-89fe-4574-8f74-2abd41432dd0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.051 sec; CPU: 0.008 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/6/4/2/dataset_642c5727-a304-45c5-b488-145ec2eb4086.dat\n[main] Real time: 0.015 sec; CPU: 0.026 sec\n[bwa_aln_core] convert to sequence coordinate... 0.00 sec\n[bwa_aln_core] refine gapped alignments... 0.00 sec\n[bwa_aln_core] print alignments... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa samse localref.fa first.sai /galaxy/server/database/objects/6/4/2/dataset_642c5727-a304-45c5-b488-145ec2eb4086.dat\n[main] Real time: 0.011 sec; CPU: 0.003 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.051 sec; CPU: 0.008 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/6/4/2/dataset_642c5727-a304-45c5-b488-145ec2eb4086.dat\n[main] Real time: 0.015 sec; CPU: 0.026 sec\n[bwa_aln_core] convert to sequence coordinate... 0.00 sec\n[bwa_aln_core] refine gapped alignments... 0.00 sec\n[bwa_aln_core] print alignments... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa samse localref.fa first.sai /galaxy/server/database/objects/6/4/2/dataset_642c5727-a304-45c5-b488-145ec2eb4086.dat\n[main] Real time: 0.011 sec; CPU: 0.003 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:56:00", "plugin": "core", "name": "end_epoch", "raw_value": "1662828960.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:56:00", "plugin": "core", "name": "start_epoch", "raw_value": "1662828960.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 1, "time_seconds": 107.28481340408325, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "7c0c7debdf6b3227"}, "reference_source|reference_source_selector": "history", "input_type|fastq_input1": {"src": "hda", "id": "2288a4b495823a9e"}, "input_type|fastq_input2": {"src": "hda", "id": "8627fe2ec91a0c89"}, "input_type|input_type_selector": "paired", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "2e34347c7853378c", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:56:42.054850", "create_time": "2022-09-10T16:55:12.303395", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-x5cv7", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/e/5/0/dataset_e505ac9a-ff9e-4700-bf9b-763b89838904.dat' 'localref.fa' && bwa index 'localref.fa' &&                 bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/a/5/c/dataset_a5ce7e18-994a-4a6d-9d8c-ca93978b394e.dat' > first.sai &&  bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/2/3/c/dataset_23c5bb8b-3920-4635-9e35-63a5cc9f3944.dat' > second.sai &&  bwa sampe   'localref.fa' first.sai second.sai '/galaxy/server/database/objects/a/5/c/dataset_a5ce7e18-994a-4a6d-9d8c-ca93978b394e.dat' '/galaxy/server/database/objects/2/3/c/dataset_23c5bb8b-3920-4635-9e35-63a5cc9f3944.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/b/a/4/dataset_ba4b0990-1a34-40ff-9076-c17470086352.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "input_type": "{\"__current_case__\": 0, \"adv_pe_options\": {\"__current_case__\": 1, \"adv_pe_options_selector\": \"do_not_set\"}, \"fastq_input1\": {\"values\": [{\"id\": 194, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 195, \"src\": \"hda\"}]}, \"input_type_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 193, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "7c0c7debdf6b3227", "src": "hda", "uuid": "e505ac9a-ff9e-4700-bf9b-763b89838904"}, "fastq_input1": {"id": "2288a4b495823a9e", "src": "hda", "uuid": "a5ce7e18-994a-4a6d-9d8c-ca93978b394e"}, "fastq_input2": {"id": "8627fe2ec91a0c89", "src": "hda", "uuid": "23c5bb8b-3920-4635-9e35-63a5cc9f3944"}}, "outputs": {"bam_output": {"id": "c7ce41dd997955fd", "src": "hda", "uuid": "ba4b0990-1a34-40ff-9076-c17470086352"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.041 sec; CPU: 0.008 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/a/5/c/dataset_a5ce7e18-994a-4a6d-9d8c-ca93978b394e.dat\n[main] Real time: 0.016 sec; CPU: 0.026 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.03 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/2/3/c/dataset_23c5bb8b-3920-4635-9e35-63a5cc9f3944.dat\n[main] Real time: 0.020 sec; CPU: 0.028 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/a/5/c/dataset_a5ce7e18-994a-4a6d-9d8c-ca93978b394e.dat /galaxy/server/database/objects/2/3/c/dataset_23c5bb8b-3920-4635-9e35-63a5cc9f3944.dat\n[main] Real time: 0.008 sec; CPU: 0.003 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.041 sec; CPU: 0.008 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/a/5/c/dataset_a5ce7e18-994a-4a6d-9d8c-ca93978b394e.dat\n[main] Real time: 0.016 sec; CPU: 0.026 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.03 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/2/3/c/dataset_23c5bb8b-3920-4635-9e35-63a5cc9f3944.dat\n[main] Real time: 0.020 sec; CPU: 0.028 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/a/5/c/dataset_a5ce7e18-994a-4a6d-9d8c-ca93978b394e.dat /galaxy/server/database/objects/2/3/c/dataset_23c5bb8b-3920-4635-9e35-63a5cc9f3944.dat\n[main] Real time: 0.008 sec; CPU: 0.003 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:56:28", "plugin": "core", "name": "end_epoch", "raw_value": "1662828988.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:56:28", "plugin": "core", "name": "start_epoch", "raw_value": "1662828988.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 2, "time_seconds": 126.11134672164917, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "cac51d032c97ccb8"}, "reference_source|reference_source_selector": "history", "input_type|fastq_input1": {"src": "hda", "id": "7c57d58e1882cb11"}, "input_type|fastq_input2": {"src": "hda", "id": "37395501b883fc2a"}, "input_type|input_type_selector": "paired", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "2332eefb43670244", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:58:08.303077", "create_time": "2022-09-10T16:56:30.629524", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-9g8lk", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/5/a/d/dataset_5adc05e5-7b75-4fca-812f-be2368b9f11d.dat' 'localref.fa' && bwa index 'localref.fa' &&                 bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/5/f/1/dataset_5f175857-5e31-423d-97dc-9665ccd6f4ad.dat' > first.sai &&  bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/2/a/1/dataset_2a1d1461-8e95-43bd-bc2b-37fecc2810f7.dat' > second.sai &&  bwa sampe   'localref.fa' first.sai second.sai '/galaxy/server/database/objects/5/f/1/dataset_5f175857-5e31-423d-97dc-9665ccd6f4ad.dat' '/galaxy/server/database/objects/2/a/1/dataset_2a1d1461-8e95-43bd-bc2b-37fecc2810f7.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/a/5/8/dataset_a585d262-c5a9-4637-81f8-6666e6ed5acb.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "input_type": "{\"__current_case__\": 0, \"adv_pe_options\": {\"__current_case__\": 1, \"adv_pe_options_selector\": \"do_not_set\"}, \"fastq_input1\": {\"values\": [{\"id\": 198, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 204, \"src\": \"hda\"}]}, \"input_type_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 202, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "cac51d032c97ccb8", "src": "hda", "uuid": "5adc05e5-7b75-4fca-812f-be2368b9f11d"}, "fastq_input1": {"id": "7c57d58e1882cb11", "src": "hda", "uuid": "5f175857-5e31-423d-97dc-9665ccd6f4ad"}, "fastq_input2": {"id": "37395501b883fc2a", "src": "hda", "uuid": "2a1d1461-8e95-43bd-bc2b-37fecc2810f7"}}, "outputs": {"bam_output": {"id": "e448cb953a00f718", "src": "hda", "uuid": "a585d262-c5a9-4637-81f8-6666e6ed5acb"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.044 sec; CPU: 0.008 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/5/f/1/dataset_5f175857-5e31-423d-97dc-9665ccd6f4ad.dat\n[main] Real time: 0.015 sec; CPU: 0.026 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/2/a/1/dataset_2a1d1461-8e95-43bd-bc2b-37fecc2810f7.dat\n[main] Real time: 0.013 sec; CPU: 0.021 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/5/f/1/dataset_5f175857-5e31-423d-97dc-9665ccd6f4ad.dat /galaxy/server/database/objects/2/a/1/dataset_2a1d1461-8e95-43bd-bc2b-37fecc2810f7.dat\n[main] Real time: 0.009 sec; CPU: 0.004 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.044 sec; CPU: 0.008 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/5/f/1/dataset_5f175857-5e31-423d-97dc-9665ccd6f4ad.dat\n[main] Real time: 0.015 sec; CPU: 0.026 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/2/a/1/dataset_2a1d1461-8e95-43bd-bc2b-37fecc2810f7.dat\n[main] Real time: 0.013 sec; CPU: 0.021 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/5/f/1/dataset_5f175857-5e31-423d-97dc-9665ccd6f4ad.dat /galaxy/server/database/objects/2/a/1/dataset_2a1d1461-8e95-43bd-bc2b-37fecc2810f7.dat\n[main] Real time: 0.009 sec; CPU: 0.004 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:57:58", "plugin": "core", "name": "end_epoch", "raw_value": "1662829078.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:57:57", "plugin": "core", "name": "start_epoch", "raw_value": "1662829077.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 3, "time_seconds": 107.73645830154419, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "cac51d032c97ccb8"}, "reference_source|reference_source_selector": "history", "input_type|bam_input": {"src": "hda", "id": "496325c1eac3861e"}, "input_type|input_type_selector": "paired_bam", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "674212bb38c2da8a", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:58:01.130110", "create_time": "2022-09-10T16:56:37.330339", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-f5ft7", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/5/a/d/dataset_5adc05e5-7b75-4fca-812f-be2368b9f11d.dat' 'localref.fa' && bwa index 'localref.fa' &&                 bwa aln -t \"${GALAXY_SLOTS:-1}\" -b -1   'localref.fa' '/galaxy/server/database/objects/8/3/4/dataset_83428fe4-d1c3-4d41-95a0-672567cab8c2.dat' > first.sai &&  bwa aln -t \"${GALAXY_SLOTS:-1}\" -b -2   'localref.fa' '/galaxy/server/database/objects/8/3/4/dataset_83428fe4-d1c3-4d41-95a0-672567cab8c2.dat' > second.sai &&  bwa sampe    'localref.fa' first.sai second.sai '/galaxy/server/database/objects/8/3/4/dataset_83428fe4-d1c3-4d41-95a0-672567cab8c2.dat' '/galaxy/server/database/objects/8/3/4/dataset_83428fe4-d1c3-4d41-95a0-672567cab8c2.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/c/b/6/dataset_cb6aab0a-90ca-42e2-a6f2-fcf37ca76a7b.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "input_type": "{\"__current_case__\": 3, \"adv_bam_pe_options\": {\"__current_case__\": 1, \"adv_pe_options_selector\": \"do_not_set\"}, \"bam_input\": {\"values\": [{\"id\": 201, \"src\": \"hda\"}]}, \"input_type_selector\": \"paired_bam\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 202, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "cac51d032c97ccb8", "src": "hda", "uuid": "5adc05e5-7b75-4fca-812f-be2368b9f11d"}, "bam_input": {"id": "496325c1eac3861e", "src": "hda", "uuid": "83428fe4-d1c3-4d41-95a0-672567cab8c2"}}, "outputs": {"bam_output": {"id": "0cef857a5fb7e5f2", "src": "hda", "uuid": "cb6aab0a-90ca-42e2-a6f2-fcf37ca76a7b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.046 sec; CPU: 0.009 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 -b -1 localref.fa /galaxy/server/database/objects/8/3/4/dataset_83428fe4-d1c3-4d41-95a0-672567cab8c2.dat\n[main] Real time: 0.015 sec; CPU: 0.025 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 -b -2 localref.fa /galaxy/server/database/objects/8/3/4/dataset_83428fe4-d1c3-4d41-95a0-672567cab8c2.dat\n[main] Real time: 0.014 sec; CPU: 0.021 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/8/3/4/dataset_83428fe4-d1c3-4d41-95a0-672567cab8c2.dat /galaxy/server/database/objects/8/3/4/dataset_83428fe4-d1c3-4d41-95a0-672567cab8c2.dat\n[main] Real time: 0.010 sec; CPU: 0.005 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.046 sec; CPU: 0.009 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 -b -1 localref.fa /galaxy/server/database/objects/8/3/4/dataset_83428fe4-d1c3-4d41-95a0-672567cab8c2.dat\n[main] Real time: 0.015 sec; CPU: 0.025 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 -b -2 localref.fa /galaxy/server/database/objects/8/3/4/dataset_83428fe4-d1c3-4d41-95a0-672567cab8c2.dat\n[main] Real time: 0.014 sec; CPU: 0.021 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/8/3/4/dataset_83428fe4-d1c3-4d41-95a0-672567cab8c2.dat /galaxy/server/database/objects/8/3/4/dataset_83428fe4-d1c3-4d41-95a0-672567cab8c2.dat\n[main] Real time: 0.010 sec; CPU: 0.005 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:57:51", "plugin": "core", "name": "end_epoch", "raw_value": "1662829071.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:57:51", "plugin": "core", "name": "start_epoch", "raw_value": "1662829071.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 4, "time_seconds": 130.1138415336609, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "c34de10d37e2df66"}, "reference_source|reference_source_selector": "history", "input_type|fastq_input1": {"src": "hda", "id": "5399e0aa1877e064"}, "input_type|fastq_input2": {"src": "hda", "id": "b936be482fb1e73d"}, "input_type|input_type_selector": "paired", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "457ac84383e0fc6d", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:58:25.364739", "create_time": "2022-09-10T16:56:45.728399", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-wshbx", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/8/e/3/dataset_8e315ae5-33ed-47e0-b914-2380622bbf35.dat' 'localref.fa' && bwa index 'localref.fa' &&                            bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/2/f/7/dataset_2f7b2abc-f293-4f17-88cc-1b4074e9230d.dat' > first.sai &&  bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/1/f/9/dataset_1f92f1d7-e646-4275-966c-c1555ba9ecc3.dat' > second.sai &&  bwa sampe    -r '@RG\\tID:rg1\\tPL:CAPILLARY'  'localref.fa' first.sai second.sai '/galaxy/server/database/objects/2/f/7/dataset_2f7b2abc-f293-4f17-88cc-1b4074e9230d.dat' '/galaxy/server/database/objects/1/f/9/dataset_1f92f1d7-e646-4275-966c-c1555ba9ecc3.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/e/6/6/dataset_e667c1e3-3b21-485d-af81-8c4501ee678b.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "input_type": "{\"__current_case__\": 0, \"adv_pe_options\": {\"__current_case__\": 1, \"adv_pe_options_selector\": \"do_not_set\"}, \"fastq_input1\": {\"values\": [{\"id\": 208, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 209, \"src\": \"hda\"}]}, \"input_type_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 207, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "c34de10d37e2df66", "src": "hda", "uuid": "8e315ae5-33ed-47e0-b914-2380622bbf35"}, "fastq_input1": {"id": "5399e0aa1877e064", "src": "hda", "uuid": "2f7b2abc-f293-4f17-88cc-1b4074e9230d"}, "fastq_input2": {"id": "b936be482fb1e73d", "src": "hda", "uuid": "1f92f1d7-e646-4275-966c-c1555ba9ecc3"}}, "outputs": {"bam_output": {"id": "8c43a80eb229e644", "src": "hda", "uuid": "e667c1e3-3b21-485d-af81-8c4501ee678b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.053 sec; CPU: 0.008 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/2/f/7/dataset_2f7b2abc-f293-4f17-88cc-1b4074e9230d.dat\n[main] Real time: 0.015 sec; CPU: 0.025 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/1/f/9/dataset_1f92f1d7-e646-4275-966c-c1555ba9ecc3.dat\n[main] Real time: 0.013 sec; CPU: 0.020 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe -r @RG\\tID:rg1\\tPL:CAPILLARY localref.fa first.sai second.sai /galaxy/server/database/objects/2/f/7/dataset_2f7b2abc-f293-4f17-88cc-1b4074e9230d.dat /galaxy/server/database/objects/1/f/9/dataset_1f92f1d7-e646-4275-966c-c1555ba9ecc3.dat\n[main] Real time: 0.008 sec; CPU: 0.003 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.053 sec; CPU: 0.008 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/2/f/7/dataset_2f7b2abc-f293-4f17-88cc-1b4074e9230d.dat\n[main] Real time: 0.015 sec; CPU: 0.025 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/1/f/9/dataset_1f92f1d7-e646-4275-966c-c1555ba9ecc3.dat\n[main] Real time: 0.013 sec; CPU: 0.020 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe -r @RG\\tID:rg1\\tPL:CAPILLARY localref.fa first.sai second.sai /galaxy/server/database/objects/2/f/7/dataset_2f7b2abc-f293-4f17-88cc-1b4074e9230d.dat /galaxy/server/database/objects/1/f/9/dataset_1f92f1d7-e646-4275-966c-c1555ba9ecc3.dat\n[main] Real time: 0.008 sec; CPU: 0.003 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:58:09", "plugin": "core", "name": "end_epoch", "raw_value": "1662829089.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:58:09", "plugin": "core", "name": "start_epoch", "raw_value": "1662829089.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem", "tool_version": "0.7.17.1", "test_index": 0, "time_seconds": 105.83199048042297, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "c34de10d37e2df66"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "5399e0aa1877e064"}, "fastq_input|fastq_input2": {"src": "hda", "id": "b936be482fb1e73d"}, "fastq_input|fastq_input_selector": "paired", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "2f46ed8fb47e4404", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:58:27.909066", "create_time": "2022-09-10T16:56:58.326621", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-726z6", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/8/e/3/dataset_8e315ae5-33ed-47e0-b914-2380622bbf35.dat' 'localref.fa' && bwa index 'localref.fa' &&    bwa mem -t \"${GALAXY_SLOTS:-1}\" -v 1                 'localref.fa' '/galaxy/server/database/objects/2/f/7/dataset_2f7b2abc-f293-4f17-88cc-1b4074e9230d.dat' '/galaxy/server/database/objects/1/f/9/dataset_1f92f1d7-e646-4275-966c-c1555ba9ecc3.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/c/c/1/dataset_cc1095fe-40bc-457b-8a74-96a66057e74e.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "fastq_input": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 208, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 209, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\", \"iset_stats\": null}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 207, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "c34de10d37e2df66", "src": "hda", "uuid": "8e315ae5-33ed-47e0-b914-2380622bbf35"}, "fastq_input1": {"id": "5399e0aa1877e064", "src": "hda", "uuid": "2f7b2abc-f293-4f17-88cc-1b4074e9230d"}, "fastq_input2": {"id": "b936be482fb1e73d", "src": "hda", "uuid": "1f92f1d7-e646-4275-966c-c1555ba9ecc3"}}, "outputs": {"bam_output": {"id": "c5937a9c3ce2ed90", "src": "hda", "uuid": "cc1095fe-40bc-457b-8a74-96a66057e74e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.051 sec; CPU: 0.008 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/2/f/7/dataset_2f7b2abc-f293-4f17-88cc-1b4074e9230d.dat /galaxy/server/database/objects/1/f/9/dataset_1f92f1d7-e646-4275-966c-c1555ba9ecc3.dat\n[main] Real time: 0.012 sec; CPU: 0.020 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.051 sec; CPU: 0.008 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/2/f/7/dataset_2f7b2abc-f293-4f17-88cc-1b4074e9230d.dat /galaxy/server/database/objects/1/f/9/dataset_1f92f1d7-e646-4275-966c-c1555ba9ecc3.dat\n[main] Real time: 0.012 sec; CPU: 0.020 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:58:12", "plugin": "core", "name": "end_epoch", "raw_value": "1662829092.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:58:12", "plugin": "core", "name": "start_epoch", "raw_value": "1662829092.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem", "tool_version": "0.7.17.1", "test_index": 1, "time_seconds": 108.35025238990784, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "a67b7197c8f9f236"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "c8fce03179ee5cc1"}, "fastq_input|fastq_input_selector": "single", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "b382e7ad19d3b222", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:59:49.491216", "create_time": "2022-09-10T16:58:15.219042", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-bmvn8", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/a/0/3/dataset_a03ae5d0-63bb-4b3e-87ab-a22e7a4df8b6.dat' 'localref.fa' && bwa index 'localref.fa' &&    bwa mem -t \"${GALAXY_SLOTS:-1}\" -v 1                'localref.fa' '/galaxy/server/database/objects/0/a/1/dataset_0a1cbc9c-4d0a-46ab-814d-e53298518cef.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/4/1/4/dataset_4140d78b-b655-4526-8576-57ef8f8dd7f0.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "fastq_input": "{\"__current_case__\": 1, \"fastq_input1\": {\"values\": [{\"id\": 213, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 214, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "a67b7197c8f9f236", "src": "hda", "uuid": "a03ae5d0-63bb-4b3e-87ab-a22e7a4df8b6"}, "fastq_input1": {"id": "c8fce03179ee5cc1", "src": "hda", "uuid": "0a1cbc9c-4d0a-46ab-814d-e53298518cef"}}, "outputs": {"bam_output": {"id": "cbdc2fca4e64b37d", "src": "hda", "uuid": "4140d78b-b655-4526-8576-57ef8f8dd7f0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.041 sec; CPU: 0.008 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/0/a/1/dataset_0a1cbc9c-4d0a-46ab-814d-e53298518cef.dat\n[main] Real time: 0.012 sec; CPU: 0.012 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.041 sec; CPU: 0.008 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/0/a/1/dataset_0a1cbc9c-4d0a-46ab-814d-e53298518cef.dat\n[main] Real time: 0.012 sec; CPU: 0.012 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:59:39", "plugin": "core", "name": "end_epoch", "raw_value": "1662829179.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:59:39", "plugin": "core", "name": "start_epoch", "raw_value": "1662829179.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem", "tool_version": "0.7.17.1", "test_index": 2, "time_seconds": 122.67628026008606, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "ba640f9735da7c27"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "fdcdc10932796d38"}, "fastq_input|fastq_input2": {"src": "hda", "id": "abcae4fa0ae95e8b"}, "fastq_input|fastq_input_selector": "paired", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "82adb685c7818ec3", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:00:11.010362", "create_time": "2022-09-10T16:58:32.965615", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-xgcz4", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/e/6/e/dataset_e6e84c9f-f91b-478d-a3b9-b10350e4fff3.dat' 'localref.fa' && bwa index 'localref.fa' &&    bwa mem -t \"${GALAXY_SLOTS:-1}\" -v 1                 'localref.fa' '/galaxy/server/database/objects/4/1/c/dataset_41cd5cfb-1c2a-42e5-8e5b-96d2ce367590.dat' '/galaxy/server/database/objects/2/5/9/dataset_25944c6e-0bd5-4465-ad44-f225ecc1ba45.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/4/1/5/dataset_4156b566-3872-4c17-8048-053adfe96268.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "fastq_input": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 215, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 220, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\", \"iset_stats\": null}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 218, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "ba640f9735da7c27", "src": "hda", "uuid": "e6e84c9f-f91b-478d-a3b9-b10350e4fff3"}, "fastq_input1": {"id": "fdcdc10932796d38", "src": "hda", "uuid": "41cd5cfb-1c2a-42e5-8e5b-96d2ce367590"}, "fastq_input2": {"id": "abcae4fa0ae95e8b", "src": "hda", "uuid": "25944c6e-0bd5-4465-ad44-f225ecc1ba45"}}, "outputs": {"bam_output": {"id": "ea3c98e39fac2a0f", "src": "hda", "uuid": "4156b566-3872-4c17-8048-053adfe96268"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.043 sec; CPU: 0.008 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/4/1/c/dataset_41cd5cfb-1c2a-42e5-8e5b-96d2ce367590.dat /galaxy/server/database/objects/2/5/9/dataset_25944c6e-0bd5-4465-ad44-f225ecc1ba45.dat\n[main] Real time: 0.015 sec; CPU: 0.023 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.043 sec; CPU: 0.008 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/4/1/c/dataset_41cd5cfb-1c2a-42e5-8e5b-96d2ce367590.dat /galaxy/server/database/objects/2/5/9/dataset_25944c6e-0bd5-4465-ad44-f225ecc1ba45.dat\n[main] Real time: 0.015 sec; CPU: 0.023 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:00:01", "plugin": "core", "name": "end_epoch", "raw_value": "1662829201.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:00:01", "plugin": "core", "name": "start_epoch", "raw_value": "1662829201.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem", "tool_version": "0.7.17.1", "test_index": 3, "time_seconds": 108.68050217628479, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "ba640f9735da7c27"}, "reference_source|index_a": "is", "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "c4017d821fb9b49b"}, "fastq_input|fastq_input2": {"src": "hda", "id": "abcae4fa0ae95e8b"}, "fastq_input|fastq_input_selector": "paired", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|read_group_lb_conditional|LB": "AARDVARK-1", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "f93fe7755af7735b", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:00:14.002174", "create_time": "2022-09-10T16:58:48.301954", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-j4jf6", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/e/6/e/dataset_e6e84c9f-f91b-478d-a3b9-b10350e4fff3.dat' 'localref.fa' && bwa index -a is 'localref.fa' &&    bwa mem -t \"${GALAXY_SLOTS:-1}\" -v 1                            -R '@RG\\tID:rg1\\tPL:CAPILLARY\\tLB:AARDVARK-1'   'localref.fa' '/galaxy/server/database/objects/2/6/6/dataset_26689ed9-cdde-4d5a-8ffc-552ff2b4e8f3.dat' '/galaxy/server/database/objects/2/5/9/dataset_25944c6e-0bd5-4465-ad44-f225ecc1ba45.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/f/0/9/dataset_f094f617-d335-4ad9-94e1-c2755c3e033b.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": \"AARDVARK-1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "fastq_input": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 219, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 220, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\", \"iset_stats\": null}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"is\", \"ref_file\": {\"values\": [{\"id\": 218, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "ba640f9735da7c27", "src": "hda", "uuid": "e6e84c9f-f91b-478d-a3b9-b10350e4fff3"}, "fastq_input1": {"id": "c4017d821fb9b49b", "src": "hda", "uuid": "26689ed9-cdde-4d5a-8ffc-552ff2b4e8f3"}, "fastq_input2": {"id": "abcae4fa0ae95e8b", "src": "hda", "uuid": "25944c6e-0bd5-4465-ad44-f225ecc1ba45"}}, "outputs": {"bam_output": {"id": "fa6b19aa1719dc0e", "src": "hda", "uuid": "f094f617-d335-4ad9-94e1-c2755c3e033b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a is localref.fa\n[main] Real time: 0.043 sec; CPU: 0.007 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 -R @RG\\tID:rg1\\tPL:CAPILLARY\\tLB:AARDVARK-1 localref.fa /galaxy/server/database/objects/2/6/6/dataset_26689ed9-cdde-4d5a-8ffc-552ff2b4e8f3.dat /galaxy/server/database/objects/2/5/9/dataset_25944c6e-0bd5-4465-ad44-f225ecc1ba45.dat\n[main] Real time: 0.013 sec; CPU: 0.019 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a is localref.fa\n[main] Real time: 0.043 sec; CPU: 0.007 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 -R @RG\\tID:rg1\\tPL:CAPILLARY\\tLB:AARDVARK-1 localref.fa /galaxy/server/database/objects/2/6/6/dataset_26689ed9-cdde-4d5a-8ffc-552ff2b4e8f3.dat /galaxy/server/database/objects/2/5/9/dataset_25944c6e-0bd5-4465-ad44-f225ecc1ba45.dat\n[main] Real time: 0.013 sec; CPU: 0.019 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:00:05", "plugin": "core", "name": "end_epoch", "raw_value": "1662829205.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:00:05", "plugin": "core", "name": "start_epoch", "raw_value": "1662829205.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper", "tool_version": "1.3.2", "test_index": 0, "time_seconds": 112.32145643234253, "inputs": {"source|target": {"src": "hda", "id": "af69f7c11536a47c"}, "source|ref_source": "history", "query": {"src": "hda", "id": "b65a822828158315"}}, "job": {"model_class": "Job", "id": "fdcdc10932796d38", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:04:14.537829", "create_time": "2022-09-10T17:02:48.830889", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-sbkbh", "command_line": "lastz_D  '/galaxy/server/database/objects/6/9/2/dataset_6920348f-230f-42c9-b6a8-c2fa905e197b.dat'    '/galaxy/server/database/objects/2/b/9/dataset_2b955360-8fca-4751-adba-d5a10d4071ce.dat'   --inferonly '--infscores=/galaxy/server/database/objects/b/b/e/dataset_bbef46f7-fdee-44ea-9fab-424598c61a30.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "score_file": null, "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 250, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "af69f7c11536a47c", "src": "hda", "uuid": "6920348f-230f-42c9-b6a8-c2fa905e197b"}, "query": {"id": "b65a822828158315", "src": "hda", "uuid": "2b955360-8fca-4751-adba-d5a10d4071ce"}}, "outputs": {"output": {"id": "5417a5814ba5c221", "src": "hda", "uuid": "bbef46f7-fdee-44ea-9fab-424598c61a30"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:04:03", "plugin": "core", "name": "end_epoch", "raw_value": "1662829443.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:04:03", "plugin": "core", "name": "start_epoch", "raw_value": "1662829443.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper", "tool_version": "1.3.2", "test_index": 1, "time_seconds": 102.6734938621521, "inputs": {"source|target": {"src": "hda", "id": "9670b857a02cd5ab"}, "source|ref_source": "history", "query": {"src": "hda", "id": "c1e1c51cb7d9432e"}, "score_file": {"src": "hda", "id": "4615e9efeac21d91"}}, "job": {"model_class": "Job", "id": "c4017d821fb9b49b", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:05:11.183892", "create_time": "2022-09-10T17:03:45.749469", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-rtxzg", "command_line": "lastz_D  '/galaxy/server/database/objects/9/8/a/dataset_98a30b37-fda9-47b1-97c4-d0718e442123.dat'    '/galaxy/server/database/objects/4/a/3/dataset_4a3e5730-fe3b-4858-9052-9de1e7ba1a77.dat'   '--inferonly=/galaxy/server/database/objects/d/e/7/dataset_de766e6a-4ed4-40f3-86d1-fa453df5ca70.dat' '--infscores=/galaxy/server/database/objects/a/6/b/dataset_a6bc8cd1-0a9e-4461-aa83-85cb72dd6e34.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 256, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "9670b857a02cd5ab", "src": "hda", "uuid": "98a30b37-fda9-47b1-97c4-d0718e442123"}, "query": {"id": "c1e1c51cb7d9432e", "src": "hda", "uuid": "4a3e5730-fe3b-4858-9052-9de1e7ba1a77"}, "score_file": {"id": "4615e9efeac21d91", "src": "hda", "uuid": "de766e6a-4ed4-40f3-86d1-fa453df5ca70"}}, "outputs": {"output": {"id": "3ef4a69c11211dc1", "src": "hda", "uuid": "a6bc8cd1-0a9e-4461-aa83-85cb72dd6e34"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:05:02", "plugin": "core", "name": "end_epoch", "raw_value": "1662829502.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:05:02", "plugin": "core", "name": "start_epoch", "raw_value": "1662829502.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 0, "time_seconds": 13.180254697799683, "inputs": {"source|target_2bit": "phiX174", "source|ref_source": "cached", "query": {"src": "hda", "id": "b117a3e12d33bd07"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "general_def"}, "execution_problem": "parameter 'target_2bit': an invalid option ('phiX174') was selected (valid options: caeJap4,dm6,felCat5,Ptrichocarpa_156,/cvmfs/data.galaxyproject.org/byhand/droVir2/droVir2.2bit,13953,apiMel1,/cvmfs/data.galaxyproject.org/byhand/Sscrofa9.58/seq/Sscrofa9.58.2bit,musFur1,galGal4,/cvmfs/data.galaxyproject.org/byhand/apiMel3/seq/apiMel3.2bit,oryLat2,strPur3,eschColi_K12,micMur1,caeJap2,melUnd1,panPan1,/cvmfs/data.galaxyproject.org/byhand/droMoj3/droMoj3.2bit,monDom5,felCat8,sacCer3,braFlo1,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer6.2bit,fr2,eschColi_O157H7,caeJap1,16297,rheMac3,tetNig2,papAnu2,droYak1,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/hg18.2bit,/cvmfs/data.galaxyproject.org/byhand/taeGut1/seq/taeGut1.2bit,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer7.2bit,droYak2,eschColi_EC4115,papHam1,calJac3,eriEur1,caeRem1,/cvmfs/data.galaxyproject.org/byhand/droAna2/droAna2.2bit,cavPor3,Amel_4.5,otoGar3,/cvmfs/data.galaxyproject.org/byhand/droGri2/droGri2.2bit,/cvmfs/data.galaxyproject.org/byhand/strPur2/seq/strPur2.2bit,ponAbe2,lMaj5,arabidopsis,ce9,oryLat1,/cvmfs/data.galaxyproject.org/byhand/droAna1/droAna1.2bit,monDom1,27835,dm2,nomLeu3,eschColi_APEC_O1,priPac1,bosTau6,/cvmfs/data.galaxyproject.org/byhand/droMoj1/droMoj1.2bit,panTro3,monDom4,oryCun1,borEut13,/cvmfs/data.galaxyproject.org/byhand/hg19/seq/hg19.2bit,danRer10,nomLeu2,AaegL1,278,anoCar2,gorGor3,echTel1,danRer4,xenTro1,16351,apiMel4,vicPac1,canFam1,nomLeu1,ce10,/cvmfs/data.galaxyproject.org/byhand/droVir1/droVir1.2bit,panTro4,178,dipOrd1,/cvmfs/data.galaxyproject.org/byhand/calJac1/calJac1.2bit,caePb1,susScr1,speTri2,bosTauMd3,Homo_sapiens_nuHg19_mtrCRS,ci2,Spur_v2.6,/cvmfs/data.galaxyproject.org/byhand/phiX/seq/phiX.2bit,caePb2,/cvmfs/data.galaxyproject.org/byhand/droEre1/droEre1.2bit,gadMor1,ce2,hg_g1k_v37,sacCer1,/cvmfs/data.galaxyproject.org/byhand/anoCar1/anoCar1.2bit,gasAcu1,/cvmfs/data.galaxyproject.org/byhand/sacCer2/seq/sacCer2,Zea_mays_B73_RefGen_v2,bosTau7,/cvmfs/data.galaxyproject.org/byhand/anoGam1/anoGam1.2bit,/cvmfs/data.galaxyproject.org/byhand/apiMel2/apiMel2.2bit,/cvmfs/data.galaxyproject.org/byhand/xenTro2/seq/xenTro2.2bit,/cvmfs/data.galaxyproject.org/byhand/ornAna1/seq/ornAna1.2bit,tupBel1,turTru2,otoGar1,/cvmfs/data.galaxyproject.org/byhand/dm3/seq/dm3.2bit,bosTau2,Schizosaccharomyces_pombe_1.1,bosTau8,panTro1,sorAra1,vicPac2,hg19_rCRS_pUC18_phiX174,bosTau3,259,/cvmfs/data.galaxyproject.org/byhand/equCab2/seq/equCab2.2bit,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/chr21.2bit,venter1,dp4,droWil1,AgamP3,/cvmfs/data.galaxyproject.org/byhand/felCat3/seq/felCat3.2bit,/cvmfs/data.galaxyproject.org/byhand/droVir3/droVir3.2bit,/cvmfs/data.galaxyproject.org/byhand/danRer5/seq/danRer5.2bit,rn6,oryCun2,caeJap3,allMis1,ce8,caePb3,ente638,pseuAeru,saiBol1,Tcas_3.0,triCas2,mm10,ce3,/cvmfs/data.galaxyproject.org/byhand/droEre2/droEre2.2bit,386,/cvmfs/data.galaxyproject.org/byhand/susScr2/seq/susScr2.2bit,CpipJ1,/cvmfs/data.galaxyproject.org/byhand/rn4/seq/rn4.2bit,caeRem3,burkPseu_1106A,tarSyr1,cb3,Homo_sapiens_AK1,16720,eschColi_CFT073,aplCal1,Hydra_JCVI,Bombyx_mori_p50T_2.0,12931,Araly1,felCat4,/cvmfs/data.galaxyproject.org/byhand/ce6/seq/ce6.2bit,oviAri1,galGal2,chrPic1,loxAfr1,13954,dp3,CHM13_T2T_v2.0,oryza_sativa_japonica_nipponbare_IRGSP4.0,dasNov3,rn5,/cvmfs/data.galaxyproject.org/byhand/droMoj2/droMoj2.2bit,PhumU1,fr1,/cvmfs/data.galaxyproject.org/byhand/rheMac2/seq/rheMac2.2bit,equCab1,cerSim1,baciSubt,20079,dasNov1,tetNig1,/cvmfs/data.galaxyproject.org/byhand/droGri1/droGri1.2bit,droSim1,ce5,panTro2,/cvmfs/data.galaxyproject.org/byhand/canFam2/seq/canFam2.2bit,aptMan1,/cvmfs/data.galaxyproject.org/byhand/droSec1/droSec1.2bit,/cvmfs/data.galaxyproject.org/byhand/mm8/seq/mm8.2bit,ailMel1,/cvmfs/data.galaxyproject.org/byhand/galGal3/seq/galGal3.2bit,petMar1,/cvmfs/data.galaxyproject.org/byhand/mm9/seq/mm9.2bit,bordBron,IscaW1,/cvmfs/data.galaxyproject.org/byhand/bosTau4/seq/bosTau4.2bit,eschColi_TW14359,myoLuc2,/cvmfs/data.galaxyproject.org/byhand/droPer1/droPer1.2bit,hg17,hg38,caeRem2,bosTau5,/cvmfs/data.galaxyproject.org/byhand/droAna3/droAna3.2bit,loxAfr3,rn3,Xanthomonas_oryzae_PXO99A,caeRem4,ce7,Arabidopsis_thaliana_TAIR10,ce4)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 1, "time_seconds": 127.83411359786987, "inputs": {"source|target": {"src": "hda", "id": "0c35aa301815808e"}, "source|ref_source": "history", "query": {"src": "hda", "id": "328afd22eff379d3"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "general_def"}, "job": {"model_class": "Job", "id": "407a010316a1f02e", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:02:21.987364", "create_time": "2022-09-10T17:00:30.154507", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-kw4nv", "command_line": "lastz  '/galaxy/server/database/objects/2/8/7/dataset_28743437-a7d8-477c-a567-8a0aee795ab5.dat'    '/galaxy/server/database/objects/e/4/6/dataset_e46593cb-c821-4a00-8d8e-d22fe96c45cd.dat'     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=general- --action:target=multiple  > '/galaxy/server/database/objects/a/6/7/dataset_a670f939-4ab3-425a-a220-f3dcee07b025.dat'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 1, \"format\": \"general_def\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 236, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "0c35aa301815808e", "src": "hda", "uuid": "28743437-a7d8-477c-a567-8a0aee795ab5"}, "query": {"id": "328afd22eff379d3", "src": "hda", "uuid": "e46593cb-c821-4a00-8d8e-d22fe96c45cd"}}, "outputs": {"output": {"id": "91a09bc41db8ad78", "src": "hda", "uuid": "a670f939-4ab3-425a-a220-f3dcee07b025"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:02:10", "plugin": "core", "name": "end_epoch", "raw_value": "1662829330.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:02:10", "plugin": "core", "name": "start_epoch", "raw_value": "1662829330.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 2, "time_seconds": 117.41439962387085, "inputs": {"source|target": {"src": "hda", "id": "0c35aa301815808e"}, "source|ref_source": "history", "query": {"src": "hda", "id": "328afd22eff379d3"}, "where_to_look|strand": "--strand=both", "scoring|score_file": {"src": "hda", "id": "05d71c1912d3cdd8"}, "output_format|out|format": "general_def"}, "job": {"model_class": "Job", "id": "cac51d032c97ccb8", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:02:22.004625", "create_time": "2022-09-10T17:00:44.875177", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-6262r", "command_line": "lastz  '/galaxy/server/database/objects/2/8/7/dataset_28743437-a7d8-477c-a567-8a0aee795ab5.dat'    '/galaxy/server/database/objects/e/4/6/dataset_e46593cb-c821-4a00-8d8e-d22fe96c45cd.dat'     '--strand=both'     '--scores=/galaxy/server/database/objects/9/d/0/dataset_9d02da6b-95d0-44ca-952a-aa0b44f191a4.dat'  '--ambiguous=iupac'               --traceback=160M    --format=general- --action:target=multiple  > '/galaxy/server/database/objects/5/9/5/dataset_59538ff7-020d-4a56-badc-bb9ce270c22b.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 1, \"format\": \"general_def\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": {\"values\": [{\"id\": 238, \"src\": \"hda\"}]}}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 236, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "0c35aa301815808e", "src": "hda", "uuid": "28743437-a7d8-477c-a567-8a0aee795ab5"}, "query": {"id": "328afd22eff379d3", "src": "hda", "uuid": "e46593cb-c821-4a00-8d8e-d22fe96c45cd"}, "score_file": {"id": "05d71c1912d3cdd8", "src": "hda", "uuid": "9d02da6b-95d0-44ca-952a-aa0b44f191a4"}}, "outputs": {"output": {"id": "99f36f82636a23f4", "src": "hda", "uuid": "59538ff7-020d-4a56-badc-bb9ce270c22b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:02:05", "plugin": "core", "name": "end_epoch", "raw_value": "1662829325.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:02:05", "plugin": "core", "name": "start_epoch", "raw_value": "1662829325.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 3, "time_seconds": 101.7032036781311, "inputs": {"source|target": {"src": "hda", "id": "682d45f64a1e2612"}, "source|ref_source": "history", "query": {"src": "hda", "id": "84a413761afaa50b"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "f0ae2c6decdd4d72", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:02:21.952068", "create_time": "2022-09-10T17:00:51.793810", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-ghvr8", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/b/1/c/dataset_b1c671f4-6d39-40c6-9e51-2399cd5025c5.dat')    <(gunzip -c '/galaxy/server/database/objects/b/9/b/dataset_b9bde26b-9d76-4df2-8afb-e902049b6a3b.dat')     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/7/0/0/dataset_700ba515-d4e5-4f0b-8605-882d0e436d23.dat'", "traceback": null, "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 240, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "682d45f64a1e2612", "src": "hda", "uuid": "b1c671f4-6d39-40c6-9e51-2399cd5025c5"}, "query": {"id": "84a413761afaa50b", "src": "hda", "uuid": "b9bde26b-9d76-4df2-8afb-e902049b6a3b"}}, "outputs": {"output": {"id": "c9302cad1438c971", "src": "hda", "uuid": "700ba515-d4e5-4f0b-8605-882d0e436d23"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:02:10", "plugin": "core", "name": "end_epoch", "raw_value": "1662829330.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:02:10", "plugin": "core", "name": "start_epoch", "raw_value": "1662829330.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 4, "time_seconds": 101.18809151649475, "inputs": {"source|target": {"src": "hda", "id": "5df9da7fe0e15fe3"}, "source|ref_source": "history", "query": {"src": "hda", "id": "e41a7ad0ee3f1174"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "0cef857a5fb7e5f2", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:03:28.336714", "create_time": "2022-09-10T17:01:58.551247", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-whrrs", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/2/2/6/dataset_226052a5-f541-4872-82b1-dfaffcab5832.dat')    <(bunzip2 -c '/galaxy/server/database/objects/f/8/b/dataset_f8b1138c-aa89-462e-88af-a848c60a5005.dat')     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/3/d/e/dataset_3de9690c-624d-40dd-96d6-646843e5aa92.dat'", "traceback": null, "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 244, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "5df9da7fe0e15fe3", "src": "hda", "uuid": "226052a5-f541-4872-82b1-dfaffcab5832"}, "query": {"id": "e41a7ad0ee3f1174", "src": "hda", "uuid": "f8b1138c-aa89-462e-88af-a848c60a5005"}}, "outputs": {"output": {"id": "e620e9bd09ac3ea1", "src": "hda", "uuid": "3de9690c-624d-40dd-96d6-646843e5aa92"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:03:19", "plugin": "core", "name": "end_epoch", "raw_value": "1662829399.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:03:19", "plugin": "core", "name": "start_epoch", "raw_value": "1662829399.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 5, "time_seconds": 98.79700541496277, "inputs": {"source|target": {"src": "hda", "id": "84432e2075960671"}, "source|ref_source": "history", "query": {"src": "hda", "id": "362ada1bbb2e97c1"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "c8fce03179ee5cc1", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:04:00.529382", "create_time": "2022-09-10T17:02:39.321619", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-cprgk", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/e/b/f/dataset_ebf6c48d-cae5-46b3-9649-9819316619d4.dat')    <(gunzip -c '/galaxy/server/database/objects/4/b/0/dataset_4b07330b-0857-45bc-8c90-c24493bd221f.dat')     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/4/6/5/dataset_46518380-4689-4292-b5d4-9a00bc217adc.dat'", "traceback": null, "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 248, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "84432e2075960671", "src": "hda", "uuid": "ebf6c48d-cae5-46b3-9649-9819316619d4"}, "query": {"id": "362ada1bbb2e97c1", "src": "hda", "uuid": "4b07330b-0857-45bc-8c90-c24493bd221f"}}, "outputs": {"output": {"id": "066014d05605890b", "src": "hda", "uuid": "46518380-4689-4292-b5d4-9a00bc217adc"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:03:52", "plugin": "core", "name": "end_epoch", "raw_value": "1662829432.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:03:52", "plugin": "core", "name": "start_epoch", "raw_value": "1662829432.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 6, "time_seconds": 113.60053968429565, "inputs": {"source|target": {"src": "hda", "id": "84432e2075960671"}, "source|ref_source": "history", "query": {"src": "hda", "id": "f6040385207c9890"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "a67b7197c8f9f236", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:04:15.699528", "create_time": "2022-09-10T17:02:47.421646", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-ktq7c", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/e/b/f/dataset_ebf6c48d-cae5-46b3-9649-9819316619d4.dat')    '/galaxy/server/database/objects/b/f/7/dataset_bf719033-ced0-4e14-bfbb-76a12d9b8dcd.dat'     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/f/f/6/dataset_ff6a2f6e-4140-4603-b7a6-4b3879824c65.dat'", "traceback": null, "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 248, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "84432e2075960671", "src": "hda", "uuid": "ebf6c48d-cae5-46b3-9649-9819316619d4"}, "query": {"id": "f6040385207c9890", "src": "hda", "uuid": "bf719033-ced0-4e14-bfbb-76a12d9b8dcd"}}, "outputs": {"output": {"id": "391c71b822880e82", "src": "hda", "uuid": "ff6a2f6e-4140-4603-b7a6-4b3879824c65"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:04:04", "plugin": "core", "name": "end_epoch", "raw_value": "1662829444.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:04:04", "plugin": "core", "name": "start_epoch", "raw_value": "1662829444.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth", "tool_version": "0.2.2", "test_index": 0, "time_seconds": 131.91594672203064, "inputs": {"referenceSource|reference": {"src": "hda", "id": "d033758ed84fc3c3"}, "single_or_paired|input_mate1": {"src": "hda", "id": "f25dfb1ccb9490ba"}, "single_or_paired|input_mate2": {"src": "hda", "id": "f9d6425826b4025c"}, "single_or_paired|single_or_paired_opts": "paired"}, "job": {"model_class": "Job", "id": "f3c88837fc693b17", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:00:40.107696", "create_time": "2022-09-10T16:58:55.777421", "galaxy_version": "21.09", "command_version": "bwa-meth.py 0.2.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-dj99m", "command_line": "mkdir index_dir && ln -s '/galaxy/server/database/objects/a/c/e/dataset_ace4526a-58a8-4e4c-91f4-808e77f7af9f.dat' index_dir/genome.fa && bwameth.py index index_dir/genome.fa &&  ln -f -s '/galaxy/server/database/objects/e/3/3/dataset_e33e0c8a-9c47-46e7-b6b2-89b7fd1c2e8e.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/8/a/f/dataset_8af8ef97-fb7c-4941-be16-dd4370d1e147.dat' input_r.fastq.gz &&  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference 'index_dir/genome.fa'   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "readGroup": "\"\"", "single_or_paired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 222, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 223, \"src\": \"hda\"}]}, \"single_or_paired_opts\": \"paired\"}", "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 226, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference": {"id": "bca1d2ee0f4a9ecd", "src": "hda", "uuid": "ace4526a-58a8-4e4c-91f4-808e77f7af9f"}, "input_mate1": {"id": "f25dfb1ccb9490ba", "src": "hda", "uuid": "e33e0c8a-9c47-46e7-b6b2-89b7fd1c2e8e"}, "input_mate2": {"id": "f9d6425826b4025c", "src": "hda", "uuid": "8af8ef97-fb7c-4941-be16-dd4370d1e147"}}, "outputs": {"output": {"id": "272e3e7af9aeb290", "src": "hda", "uuid": "7393b0b9-de81-4854-9063-b09034c1a03b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[bwa_index] Pack FASTA... 0.01 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.46 seconds elapse.\n[bwa_index] Update BWT... 0.01 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.11 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 0.686 sec; CPU: 0.606 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.023 CPU sec, 0.013 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.082 sec; CPU: 0.028 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "[bwa_index] Pack FASTA... 0.01 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.46 seconds elapse.\n[bwa_index] Update BWT... 0.01 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.11 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 0.686 sec; CPU: 0.606 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.023 CPU sec, 0.013 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.082 sec; CPU: 0.028 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:00:24", "plugin": "core", "name": "end_epoch", "raw_value": "1662829224.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:00:23", "plugin": "core", "name": "start_epoch", "raw_value": "1662829223.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_drb3d51i.sam v. /tmp/history_bam_converted_to_sam_lrgbv_3j.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,9 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:chrREF\tLN:900000\n @RG\tID:input_\tSM:input_\n-@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.0\tCL:\"/usr/users/ga002/soranzon/miniconda3/envs/__bwameth@0.2.0/bin/bwameth.py -t 1 --reference index_dir/genome.fa input_f.fastq input_r.fastq\"\n+@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.2\tCL:\"/usr/local/bin/bwameth.py -t 2 --reference index_dir/genome.fa input_f.fastq.gz input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bwa-meth\tVN:1.10\tCL:samtools view -u -\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.10\tCL:samtools sort -@ 2 -T /galaxy/server/database/jobs_directory/000/187/tmp -O bam -o output.bam -\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t163\tchrREF\t26002\t60\t101M\t=\t26025\t124\tCAAAATATATCAATCAAAAAAACATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACA\tBBBFFFFFFFFFFIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIFIFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFBFFF\tNM:i:1\tMD:Z:50C50\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:GA\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t83\tchrREF\t26025\t60\t101M\t=\t26002\t-124\tATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACATAATTTCAAAAAAATCAAACACC\tB0''B<<<00FB7<000'BBB0B<0FFFFFFFFFFFFFFFFFBFFB<7FFIFFFBBB<FFB<<7FFIFFFFFBBFF<IIIIIFFBIIFFFFFFBFFFFBBB\tNM:i:1\tMD:Z:27C73\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:CT\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:6662:24968\t99\tchrREF\t26991\t60\t101M\t=\t26992\t102\tAGGTGTCGTTTAATTGTTTAGGTTTATGGTATTGTGTTTCGTTTTTTTGGTATTTGTGAGGGTAGAATTGTTTTTGGGTTTTAATTTTTTTAAGTATGGGA\tBBBFFFFFFFFFFIIBFFIFBBFFFFIB<FFFI<FBFFFFBFFIIIII77BFFIIBFBFBBBFBBFFFF<BBFFF'07BBBBFFFFFFFFFFB0<BF####\tNM:i:0\tMD:Z:101\tMC:Z:101M\tAS:i:101\tXS:i:19\tRG:Z:input_\tYC:Z:CT\tYD:Z:f\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth", "tool_version": "0.2.2", "test_index": 1, "time_seconds": 117.48105049133301, "inputs": {"referenceSource|reference": {"src": "hda", "id": "a25c6aeafa1149a2"}, "single_or_paired|input_mate1": {"src": "hdca", "id": "19442900586bc92f"}, "single_or_paired|single_or_paired_opts": "paired_collection"}, "job": {"model_class": "Job", "id": "545f21c7ae733716", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:01:47.087916", "create_time": "2022-09-10T17:00:08.876909", "galaxy_version": "21.09", "command_version": "bwa-meth.py 0.2.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-28h8q", "command_line": "mkdir index_dir && ln -s '/galaxy/server/database/objects/c/2/c/dataset_c2c2a71e-2875-4a31-964a-3c605945ee64.dat' index_dir/genome.fa && bwameth.py index index_dir/genome.fa &&  ln -s '/galaxy/server/database/objects/b/3/6/dataset_b36df23e-7626-492a-9c10-12ce4047887b.dat' input_f.fastq.gz &&  ln -s '/galaxy/server/database/objects/3/b/f/dataset_3bf8b079-8883-4249-bfb6-2ca93dd27773.dat' input_r.fastq.gz &&  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference 'index_dir/genome.fa'   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "readGroup": "\"\"", "single_or_paired": "{\"__current_case__\": 2, \"input_mate1\": {\"values\": [{\"id\": 3, \"src\": \"hdca\"}]}, \"single_or_paired_opts\": \"paired_collection\"}", "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 231, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference": {"id": "127d318825a0a258", "src": "hda", "uuid": "c2c2a71e-2875-4a31-964a-3c605945ee64"}, "input_mate11": {"id": "8b8bb5aa33357d14", "src": "hda", "uuid": "b36df23e-7626-492a-9c10-12ce4047887b"}, "input_mate12": {"id": "511f4d29f81c76f3", "src": "hda", "uuid": "3bf8b079-8883-4249-bfb6-2ca93dd27773"}}, "outputs": {"output": {"id": "61b61c679bbc7293", "src": "hda", "uuid": "9a61b262-c752-4822-b998-b5d8815b49b2"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[bwa_index] Pack FASTA... 0.01 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.51 seconds elapse.\n[bwa_index] Update BWT... 0.01 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.12 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 0.752 sec; CPU: 0.657 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.022 CPU sec, 0.013 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.083 sec; CPU: 0.028 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "[bwa_index] Pack FASTA... 0.01 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.51 seconds elapse.\n[bwa_index] Update BWT... 0.01 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.12 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 0.752 sec; CPU: 0.657 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.022 CPU sec, 0.013 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.083 sec; CPU: 0.028 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:01:38", "plugin": "core", "name": "end_epoch", "raw_value": "1662829298.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:01:37", "plugin": "core", "name": "start_epoch", "raw_value": "1662829297.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam__l3336j1.sam v. /tmp/history_bam_converted_to_sam_il2c6no2.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,9 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:chrREF\tLN:900000\n @RG\tID:input_\tSM:input_\n-@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.0\tCL:\"/usr/users/ga002/soranzon/miniconda3/envs/__bwameth@0.2.0/bin/bwameth.py -t 1 --reference index_dir/genome.fa input_f.fastq input_r.fastq\"\n+@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.2\tCL:\"/usr/local/bin/bwameth.py -t 2 --reference index_dir/genome.fa input_f.fastq.gz input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bwa-meth\tVN:1.10\tCL:samtools view -u -\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.10\tCL:samtools sort -@ 2 -T /galaxy/server/database/jobs_directory/000/192/tmp -O bam -o output.bam -\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t163\tchrREF\t26002\t60\t101M\t=\t26025\t124\tCAAAATATATCAATCAAAAAAACATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACA\tBBBFFFFFFFFFFIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIFIFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFBFFF\tNM:i:1\tMD:Z:50C50\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:GA\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t83\tchrREF\t26025\t60\t101M\t=\t26002\t-124\tATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACATAATTTCAAAAAAATCAAACACC\tB0''B<<<00FB7<000'BBB0B<0FFFFFFFFFFFFFFFFFBFFB<7FFIFFFBBB<FFB<<7FFIFFFFFBBFF<IIIIIFFBIIFFFFFFBFFFFBBB\tNM:i:1\tMD:Z:27C73\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:CT\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:6662:24968\t99\tchrREF\t26991\t60\t101M\t=\t26992\t102\tAGGTGTCGTTTAATTGTTTAGGTTTATGGTATTGTGTTTCGTTTTTTTGGTATTTGTGAGGGTAGAATTGTTTTTGGGTTTTAATTTTTTTAAGTATGGGA\tBBBFFFFFFFFFFIIBFFIFBBFFFFIB<FFFI<FBFFFFBFFIIIII77BFFIIBFBFBBBFBBFFFF<BBFFF'07BBBBFFFFFFFFFFB0<BF####\tNM:i:0\tMD:Z:101\tMC:Z:101M\tAS:i:101\tXS:i:19\tRG:Z:input_\tYC:Z:CT\tYD:Z:f\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 101.36114716529846, "inputs": {"reads": {"src": "hda", "id": "765c1756432af80a"}, "reference_source|ref": {"src": "hda", "id": "85ea03ae672a28aa"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "594746ee8079b430", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:21:43.377327", "create_time": "2022-09-10T17:20:17.824600", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-66ccx", "command_line": "ln -s '/galaxy/server/database/objects/4/0/7/dataset_407a3b9f-1935-4d8b-97c7-da60ed2e8d52.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b    '/galaxy/server/database/objects/0/6/f/dataset_06f41178-b633-458b-9949-dcd582b301e6.dat' 'reference.fa' > '/galaxy/server/database/objects/f/e/3/dataset_fe3aa7da-b8ba-40aa-afb1-f9fef3729049.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 382, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"ref": {"id": "85ea03ae672a28aa", "src": "hda", "uuid": "407a3b9f-1935-4d8b-97c7-da60ed2e8d52"}, "reads": {"id": "765c1756432af80a", "src": "hda", "uuid": "06f41178-b633-458b-9949-dcd582b301e6"}}, "outputs": {"output": {"id": "30a141e128e2763a", "src": "hda", "uuid": "fe3aa7da-b8ba-40aa-afb1-f9fef3729049"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:21:30", "plugin": "core", "name": "end_epoch", "raw_value": "1662830490.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:21:29", "plugin": "core", "name": "start_epoch", "raw_value": "1662830489.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmp16bke5iwalnqual-out1.bam v. /tmp/tmpkekryqiualnqual-out1.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 95.01092553138733, "inputs": {"reads": {"src": "hda", "id": "cd374cf369f56a25"}, "reference_source|ref": {"src": "hda", "id": "a70e7f382320acaa"}, "reference_source|ref_selector": "history", "alnqual_choice|alnquals_to_use": "-B"}, "job": {"model_class": "Job", "id": "2fa059e946a5d22d", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:22:13.350637", "create_time": "2022-09-10T17:20:49.758377", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-5v86r", "command_line": "ln -s '/galaxy/server/database/objects/f/1/b/dataset_f1bda47b-1f0a-447e-9150-bb733f7ca56a.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b  -B  '/galaxy/server/database/objects/1/f/e/dataset_1fe67b79-c55a-4987-a0ee-5c54002417b6.dat' 'reference.fa' > '/galaxy/server/database/objects/e/7/9/dataset_e7928523-e79d-49c7-b94a-2699697e41a4.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 0, \"alnquals_to_use\": \"-B\", \"extended_baq\": \"\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 387, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "cd374cf369f56a25", "src": "hda", "uuid": "1fe67b79-c55a-4987-a0ee-5c54002417b6"}, "ref": {"id": "a70e7f382320acaa", "src": "hda", "uuid": "f1bda47b-1f0a-447e-9150-bb733f7ca56a"}}, "outputs": {"output": {"id": "eca5a8f91db17bc7", "src": "hda", "uuid": "e7928523-e79d-49c7-b94a-2699697e41a4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:22:04", "plugin": "core", "name": "end_epoch", "raw_value": "1662830524.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:22:04", "plugin": "core", "name": "start_epoch", "raw_value": "1662830524.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmphraao2n3alnqual-out2.bam v. /tmp/tmp84y4h3uhalnqual-out2.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 2, "time_seconds": 117.9783718585968, "inputs": {"reads": {"src": "hda", "id": "72a22debfde99bce"}, "reference_source|ref": {"src": "hda", "id": "8381948d97a50fd3"}, "reference_source|ref_selector": "history", "alnqual_choice|alnquals_to_use": "-A"}, "job": {"model_class": "Job", "id": "11e1a59c57cd4d48", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:23:30.849715", "create_time": "2022-09-10T17:21:51.287259", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-s746k", "command_line": "ln -s '/galaxy/server/database/objects/f/1/e/dataset_f1e82ce9-7021-4242-8902-fb12e0802c29.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b  -A  '/galaxy/server/database/objects/6/1/8/dataset_618b4ff9-9a76-49ca-8d3c-805e0cdad305.dat' 'reference.fa' > '/galaxy/server/database/objects/3/b/8/dataset_3b8173c8-f6ff-48fb-9727-a6b09b7fa870.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 2, \"alnquals_to_use\": \"-A\", \"extended_baq\": \"true\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 394, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "72a22debfde99bce", "src": "hda", "uuid": "618b4ff9-9a76-49ca-8d3c-805e0cdad305"}, "ref": {"id": "8381948d97a50fd3", "src": "hda", "uuid": "f1e82ce9-7021-4242-8902-fb12e0802c29"}}, "outputs": {"output": {"id": "1a34839fbc8a38f9", "src": "hda", "uuid": "3b8173c8-f6ff-48fb-9727-a6b09b7fa870"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:23:22", "plugin": "core", "name": "end_epoch", "raw_value": "1662830602.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:23:22", "plugin": "core", "name": "start_epoch", "raw_value": "1662830602.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmptv7d1ddgalnqual-out3.bam v. /tmp/tmpmyjdx4xnalnqual-out3.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 3, "time_seconds": 102.52005958557129, "inputs": {"reads": {"src": "hda", "id": "72a22debfde99bce"}, "reference_source|ref": {"src": "hda", "id": "8381948d97a50fd3"}, "reference_source|ref_selector": "history", "alnqual_choice|extended_baq": false}, "job": {"model_class": "Job", "id": "cdc2b37b4e83470d", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:23:25.981066", "create_time": "2022-09-10T17:22:03.118919", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-7zw6w", "command_line": "ln -s '/galaxy/server/database/objects/f/1/e/dataset_f1e82ce9-7021-4242-8902-fb12e0802c29.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b -e   '/galaxy/server/database/objects/6/1/8/dataset_618b4ff9-9a76-49ca-8d3c-805e0cdad305.dat' 'reference.fa' > '/galaxy/server/database/objects/7/c/0/dataset_7c0c786f-efae-4e99-83c9-e99781a312ae.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"false\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 394, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"ref": {"id": "8381948d97a50fd3", "src": "hda", "uuid": "f1e82ce9-7021-4242-8902-fb12e0802c29"}, "reads": {"id": "72a22debfde99bce", "src": "hda", "uuid": "618b4ff9-9a76-49ca-8d3c-805e0cdad305"}}, "outputs": {"output": {"id": "4d21a3899ce8077c", "src": "hda", "uuid": "7c0c786f-efae-4e99-83c9-e99781a312ae"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:23:16", "plugin": "core", "name": "end_epoch", "raw_value": "1662830596.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:23:16", "plugin": "core", "name": "start_epoch", "raw_value": "1662830596.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmppkbi5p5_alnqual-out4.bam v. /tmp/tmpej4axt_salnqual-out4.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 4, "time_seconds": 102.48118185997009, "inputs": {"reads": {"src": "hda", "id": "72a22debfde99bce"}, "reference_source|ref": {"src": "hda", "id": "8381948d97a50fd3"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "8d7401976206a216", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:23:28.190068", "create_time": "2022-09-10T17:22:05.683625", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-wnvhr", "command_line": "ln -s '/galaxy/server/database/objects/f/1/e/dataset_f1e82ce9-7021-4242-8902-fb12e0802c29.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b    '/galaxy/server/database/objects/6/1/8/dataset_618b4ff9-9a76-49ca-8d3c-805e0cdad305.dat' 'reference.fa' > '/galaxy/server/database/objects/b/d/a/dataset_bda065a0-5f95-493c-95c1-35085aff3c5c.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 394, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"ref": {"id": "8381948d97a50fd3", "src": "hda", "uuid": "f1e82ce9-7021-4242-8902-fb12e0802c29"}, "reads": {"id": "72a22debfde99bce", "src": "hda", "uuid": "618b4ff9-9a76-49ca-8d3c-805e0cdad305"}}, "outputs": {"output": {"id": "648eda9c07b972ba", "src": "hda", "uuid": "bda065a0-5f95-493c-95c1-35085aff3c5c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:23:18", "plugin": "core", "name": "end_epoch", "raw_value": "1662830598.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:23:18", "plugin": "core", "name": "start_epoch", "raw_value": "1662830598.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmp5uazq6vralnqual-out5.bam v. /tmp/tmpyxw1_672alnqual-out5.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 0, "time_seconds": 120.24776124954224, "inputs": {"reads": {"src": "hda", "id": "c0c44607f80064c9"}, "reference_source|ref": {"src": "hda", "id": "e6bdb7474f672252"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "e6bef8b6ef47df8c", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:16:26.581797", "create_time": "2022-09-10T17:14:48.008138", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-nrglg", "command_line": "ln -s '/galaxy/server/database/objects/e/e/c/dataset_eeceee9d-8023-49cf-b0d2-0c18fe615ff2.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/d/2/a/dataset_d2a5a4a2-aed2-473c-beea-ea54b88d7514.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/f/1/7/metadata_f1766f2a-bdee-4920-af49-103a842ae784.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf    --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 350, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "c0c44607f80064c9", "src": "hda", "uuid": "d2a5a4a2-aed2-473c-beea-ea54b88d7514"}, "ref": {"id": "e6bdb7474f672252", "src": "hda", "uuid": "eeceee9d-8023-49cf-b0d2-0c18fe615ff2"}}, "outputs": {"variants": {"id": "b7f21249020bd05a", "src": "hda", "uuid": "f599fc16-439a-462d-b995-78f2b572405c"}}, "output_collections": {}, "tool_stdout": "INFO [2022-09-10 17:16:08,894]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2022-09-10 17:16:08,908]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-09-10 17:16:10,761]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/274/tmp/lofreq2_call_paralleluwu5kesc/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2022-09-10 17:16:08,894]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2022-09-10 17:16:08,908]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-09-10 17:16:10,761]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/274/tmp/lofreq2_call_paralleluwu5kesc/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:16:10", "plugin": "core", "name": "end_epoch", "raw_value": "1662830170.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:16:08", "plugin": "core", "name": "start_epoch", "raw_value": "1662830168.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 1, "time_seconds": 114.43979907035828, "inputs": {"reads": {"src": "hda", "id": "c0c44607f80064c9"}, "reference_source|ref": {"src": "hda", "id": "e6bdb7474f672252"}, "reference_source|ref_selector": "history", "call_control|set_call_options": "yes"}, "job": {"model_class": "Job", "id": "a3958d2b64d4cd56", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:16:26.391955", "create_time": "2022-09-10T17:14:53.454408", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-zrnvw", "command_line": "ln -s '/galaxy/server/database/objects/e/e/c/dataset_eeceee9d-8023-49cf-b0d2-0c18fe615ff2.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/d/2/a/dataset_d2a5a4a2-aed2-473c-beea-ea54b88d7514.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/f/1/7/metadata_f1766f2a-bdee-4920-af49-103a842ae784.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf   --min-cov 1 --max-depth 1000000  --min-bq 6 --min-alt-bq 6    --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0  --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 1, \"align_quals\": {\"alnqual\": {\"__current_case__\": 0, \"alnqual_choice\": {\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}, \"use_alnqual\": \"\"}}, \"bc_quals\": {\"alt_bq\": {\"__current_case__\": 0, \"modify\": \"\"}, \"min_alt_bq\": \"6\", \"min_bq\": \"6\"}, \"coverage\": {\"max_depth\": \"1000000\", \"min_cov\": \"1\"}, \"joint_qual\": {\"def_alt_jq\": \"0\", \"min_alt_jq\": \"0\", \"min_jq\": \"0\"}, \"map_quals\": {\"min_mq\": \"0\", \"use_mq\": {\"__current_case__\": 0, \"max_mq\": \"255\", \"no_mq\": \"\"}}, \"pe\": {\"use_orphan\": \"false\"}, \"set_call_options\": \"yes\", \"source_qual\": {\"use_src_qual\": {\"__current_case__\": 0, \"src_qual\": \"\"}}}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 350, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "c0c44607f80064c9", "src": "hda", "uuid": "d2a5a4a2-aed2-473c-beea-ea54b88d7514"}, "ref": {"id": "e6bdb7474f672252", "src": "hda", "uuid": "eeceee9d-8023-49cf-b0d2-0c18fe615ff2"}}, "outputs": {"variants": {"id": "f20792b39e4fbe6b", "src": "hda", "uuid": "80f69e9f-ee21-4a6f-8380-7d02439b364a"}}, "output_collections": {}, "tool_stdout": "INFO [2022-09-10 17:16:09,056]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2022-09-10 17:16:09,066]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-09-10 17:16:10,939]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/275/tmp/lofreq2_call_parallel2e5d73a8/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2022-09-10 17:16:09,056]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2022-09-10 17:16:09,066]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-09-10 17:16:10,939]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/275/tmp/lofreq2_call_parallel2e5d73a8/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:16:10", "plugin": "core", "name": "end_epoch", "raw_value": "1662830170.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:16:08", "plugin": "core", "name": "start_epoch", "raw_value": "1662830168.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 2, "time_seconds": 106.32702779769897, "inputs": {"reads": {"src": "hda", "id": "b7598e3db57a0a1e"}, "reference_source|ref": {"src": "hda", "id": "89f444d391f4c8b0"}, "reference_source|ref_selector": "history", "call_control|source_qual|use_src_qual|def_nm_q": "40", "call_control|source_qual|use_src_qual|ign_vcf": {"src": "hda", "id": "05bad2c0033c25d3"}, "call_control|source_qual|use_src_qual|src_qual": "--src-qual", "call_control|set_call_options": "yes"}, "job": {"model_class": "Job", "id": "63e88a39c510c7d2", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:17:28.155182", "create_time": "2022-09-10T17:16:00.578456", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-ng7ml", "command_line": "ln -s '/galaxy/server/database/objects/c/9/6/dataset_c96bfd5e-bcc0-47cf-9d47-715362f3bcb2.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/f/0/1/dataset_f015193d-49d7-40b6-b7e5-2acc9ae89500.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/2/2/c/metadata_22c9118d-3c17-4633-8b34-54199d3ea99a.dat' reads.bam.bai && ln -s '/galaxy/server/database/objects/b/c/d/dataset_bcd1a024-f3a2-4073-89d1-c2d63705206b.dat' ign0.vcf &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf   --min-cov 1 --max-depth 1000000  --min-bq 6 --min-alt-bq 6    --min-mq 0 --max-mq 255 --src-qual --ign-vcf 'ign0.vcf' --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0  --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 1, \"align_quals\": {\"alnqual\": {\"__current_case__\": 0, \"alnqual_choice\": {\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}, \"use_alnqual\": \"\"}}, \"bc_quals\": {\"alt_bq\": {\"__current_case__\": 0, \"modify\": \"\"}, \"min_alt_bq\": \"6\", \"min_bq\": \"6\"}, \"coverage\": {\"max_depth\": \"1000000\", \"min_cov\": \"1\"}, \"joint_qual\": {\"def_alt_jq\": \"0\", \"min_alt_jq\": \"0\", \"min_jq\": \"0\"}, \"map_quals\": {\"min_mq\": \"0\", \"use_mq\": {\"__current_case__\": 0, \"max_mq\": \"255\", \"no_mq\": \"\"}}, \"pe\": {\"use_orphan\": \"false\"}, \"set_call_options\": \"yes\", \"source_qual\": {\"use_src_qual\": {\"__current_case__\": 1, \"def_nm_q\": \"40\", \"ign_vcf\": {\"values\": [{\"id\": 356, \"src\": \"hda\"}]}, \"src_qual\": \"--src-qual\"}}}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 355, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "b7598e3db57a0a1e", "src": "hda", "uuid": "f015193d-49d7-40b6-b7e5-2acc9ae89500"}, "ref": {"id": "89f444d391f4c8b0", "src": "hda", "uuid": "c96bfd5e-bcc0-47cf-9d47-715362f3bcb2"}, "call_control|source_qual|ign_vcf": {"id": "05bad2c0033c25d3", "src": "hda", "uuid": "bcd1a024-f3a2-4073-89d1-c2d63705206b"}}, "outputs": {"variants": {"id": "31af61dbfe4c8fba", "src": "hda", "uuid": "5d11f14e-c36f-46a4-89d6-333910256173"}}, "output_collections": {}, "tool_stdout": "INFO [2022-09-10 17:17:17,263]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2022-09-10 17:17:17,278]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-09-10 17:17:19,558]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/279/tmp/lofreq2_call_parallel2i4vif8x/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2022-09-10 17:17:17,263]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2022-09-10 17:17:17,278]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-09-10 17:17:19,558]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/279/tmp/lofreq2_call_parallel2i4vif8x/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:17:19", "plugin": "core", "name": "end_epoch", "raw_value": "1662830239.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:17:17", "plugin": "core", "name": "start_epoch", "raw_value": "1662830237.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 3, "time_seconds": 124.97068095207214, "inputs": {"reads": {"src": "hda", "id": "7fef97e74e08bf0e"}, "reference_source|ref": {"src": "hda", "id": "ac0432c4f7d3c687"}, "reference_source|ref_selector": "history", "filter_control|filter_type": "set_all_off"}, "job": {"model_class": "Job", "id": "69687329205b4bd7", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:18:17.471255", "create_time": "2022-09-10T17:16:28.788682", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-6hr8m", "command_line": "ln -s '/galaxy/server/database/objects/2/d/7/dataset_2d71b1dc-b811-4940-a3ee-7466e8ede7aa.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/1/a/e/dataset_1ae280b5-3bba-4a4e-a106-34ecfde66de8.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/d/0/e/metadata_d0e0cd04-f8bd-4e27-8bca-84a248762f91.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf    --sig 1 --bonf 1 --no-default-filter  reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)  && ln -s variants.vcf variants.vcf.gz && gzip -df variants.vcf.gz", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 0, \"bonf\": \"1\", \"filter_type\": \"set_all_off\", \"others\": \"--no-default-filter\", \"sig\": \"1\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 363, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "7fef97e74e08bf0e", "src": "hda", "uuid": "1ae280b5-3bba-4a4e-a106-34ecfde66de8"}, "ref": {"id": "ac0432c4f7d3c687", "src": "hda", "uuid": "2d71b1dc-b811-4940-a3ee-7466e8ede7aa"}}, "outputs": {"variants": {"id": "3bf7f4658716bc9a", "src": "hda", "uuid": "38294881-ee2d-46fc-b644-7697f379a724"}}, "output_collections": {}, "tool_stdout": "INFO [2022-09-10 17:18:05,197]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2022-09-10 17:18:05,209]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-09-10 17:18:07,036]: Copying concatenated vcf file to final destination\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2022-09-10 17:18:05,197]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2022-09-10 17:18:05,209]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-09-10 17:18:07,036]: Copying concatenated vcf file to final destination\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:18:07", "plugin": "core", "name": "end_epoch", "raw_value": "1662830287.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:18:05", "plugin": "core", "name": "start_epoch", "raw_value": "1662830285.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 4, "time_seconds": 115.02002215385437, "inputs": {"reads": {"src": "hda", "id": "5103fa2397f6b523"}, "reference_source|ref": {"src": "hda", "id": "ac0432c4f7d3c687"}, "reference_source|ref_selector": "history", "variant_types": "--call-indels --only-indels", "filter_control|filter_type": "set_all_off"}, "job": {"model_class": "Job", "id": "c152dc96a57234aa", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:18:21.469611", "create_time": "2022-09-10T17:16:44.075471", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-rsn8l", "command_line": "ln -s '/galaxy/server/database/objects/2/d/7/dataset_2d71b1dc-b811-4940-a3ee-7466e8ede7aa.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/4/3/2/dataset_432f8b3a-6213-4dfb-a233-66c92f27c3d5.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/f/8/e/metadata_f8e209e8-c486-44e0-88a8-deb90bb4dbcc.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf --call-indels --only-indels    --sig 1 --bonf 1 --no-default-filter  reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)  && ln -s variants.vcf variants.vcf.gz && gzip -df variants.vcf.gz", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 0, \"bonf\": \"1\", \"filter_type\": \"set_all_off\", \"others\": \"--no-default-filter\", \"sig\": \"1\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"--call-indels --only-indels\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 363, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "5103fa2397f6b523", "src": "hda", "uuid": "432f8b3a-6213-4dfb-a233-66c92f27c3d5"}, "ref": {"id": "ac0432c4f7d3c687", "src": "hda", "uuid": "2d71b1dc-b811-4940-a3ee-7466e8ede7aa"}}, "outputs": {"variants": {"id": "dcb3ef181ce5745d", "src": "hda", "uuid": "a196d6f3-aa43-4a27-bab8-f27fa107ac6a"}}, "output_collections": {}, "tool_stdout": "INFO [2022-09-10 17:18:07,290]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2022-09-10 17:18:07,301]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 0\nNumber of indel tests performed: 9\nINFO [2022-09-10 17:18:10,205]: Copying concatenated vcf file to final destination\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2022-09-10 17:18:07,290]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2022-09-10 17:18:07,301]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 0\nNumber of indel tests performed: 9\nINFO [2022-09-10 17:18:10,205]: Copying concatenated vcf file to final destination\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:18:10", "plugin": "core", "name": "end_epoch", "raw_value": "1662830290.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:18:07", "plugin": "core", "name": "start_epoch", "raw_value": "1662830287.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 95.04254817962646, "inputs": {"invcf": {"src": "hda", "id": "f563632818e975e0"}, "filter_by_type|qual|snvqual_filter|snvqual_thresh": "38", "filter_by_type|qual|snvqual_filter|snvqual": "min-phred", "filter_by_type|qual|indelqual_filter|indelqual_thresh": "20", "filter_by_type|qual|indelqual_filter|indelqual": "min-phred"}, "job": {"model_class": "Job", "id": "9db725d62515777e", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:20:38.569515", "create_time": "2022-09-10T17:19:12.976463", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-frg6r", "command_line": "lofreq filter -i /galaxy/server/database/objects/8/7/1/dataset_8719f73b-16a1-49aa-990a-844771dd11a2.dat --no-defaults --verbose   -Q 38 -K 20 -v 10 -V 0 -a 0.0 -A 0.0 -b fdr -c 0.001   -o filtered.vcf", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "flag_or_drop": "\"\"", "sb": "{\"sb_filter\": {\"__current_case__\": 2, \"sb_alpha\": \"0.001\", \"sb_compound\": \"true\", \"sb_indels\": \"false\", \"sb_mtc\": \"fdr\", \"strand_bias\": \"mtc\"}}", "af": "{\"af_max\": \"0.0\", \"af_min\": \"0.0\"}", "coverage": "{\"cov_max\": \"0\", \"cov_min\": \"10\"}", "filter_by_type": "{\"__current_case__\": 0, \"keep_only\": \"\", \"qual\": {\"indelqual_filter\": {\"__current_case__\": 1, \"indelqual\": \"min-phred\", \"indelqual_thresh\": \"20\"}, \"snvqual_filter\": {\"__current_case__\": 1, \"snvqual\": \"min-phred\", \"snvqual_thresh\": \"38\"}}}"}, "inputs": {"invcf": {"id": "f563632818e975e0", "src": "hda", "uuid": "8719f73b-16a1-49aa-990a-844771dd11a2"}}, "outputs": {"outvcf": {"id": "4ae011b1a218e98f", "src": "hda", "uuid": "c8b4ea8c-d66e-4aca-b1df-09869f107566"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "job_stdout": "", "job_stderr": "", "stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:20:29", "plugin": "core", "name": "end_epoch", "raw_value": "1662830429.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:20:29", "plugin": "core", "name": "start_epoch", "raw_value": "1662830429.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 94.23854660987854, "inputs": {"invcf": {"src": "hda", "id": "1d3cdaf727e1ca62"}, "filter_by_type|qual|snvqual_filter|snvqual_alpha": "0.01", "filter_by_type|qual|snvqual_filter|snvqual_mtc": "bonf", "filter_by_type|qual|snvqual_filter|snvqual_ntests": "66", "filter_by_type|qual|snvqual_filter|snvqual": "mtc", "filter_by_type|keep_only": "--only-snvs"}, "job": {"model_class": "Job", "id": "c2ce814a6b5920ee", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:21:32.829383", "create_time": "2022-09-10T17:20:12.355192", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-98sd6", "command_line": "lofreq filter -i /galaxy/server/database/objects/3/0/7/dataset_30712d26-27b0-470b-893e-0f99a52b0671.dat --no-defaults --verbose  --only-snvs -q bonf -r 0.01 -s 66 -v 10 -V 0 -a 0.0 -A 0.0 -b fdr -c 0.001   -o filtered.vcf", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "flag_or_drop": "\"\"", "sb": "{\"sb_filter\": {\"__current_case__\": 2, \"sb_alpha\": \"0.001\", \"sb_compound\": \"true\", \"sb_indels\": \"false\", \"sb_mtc\": \"fdr\", \"strand_bias\": \"mtc\"}}", "af": "{\"af_max\": \"0.0\", \"af_min\": \"0.0\"}", "coverage": "{\"cov_max\": \"0\", \"cov_min\": \"10\"}", "filter_by_type": "{\"__current_case__\": 1, \"keep_only\": \"--only-snvs\", \"qual\": {\"snvqual_filter\": {\"__current_case__\": 2, \"snvqual\": \"mtc\", \"snvqual_alpha\": \"0.01\", \"snvqual_mtc\": \"bonf\", \"snvqual_ntests\": \"66\"}}}"}, "inputs": {"invcf": {"id": "1d3cdaf727e1ca62", "src": "hda", "uuid": "30712d26-27b0-470b-893e-0f99a52b0671"}}, "outputs": {"outvcf": {"id": "cab7853d90949a16", "src": "hda", "uuid": "7d907517-2baf-47a5-8070-9997a3471d0b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "job_stdout": "", "job_stderr": "", "stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:21:24", "plugin": "core", "name": "end_epoch", "raw_value": "1662830484.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:21:24", "plugin": "core", "name": "start_epoch", "raw_value": "1662830484.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter", "tool_version": "2.1.5+galaxy0", "test_index": 2, "time_seconds": 106.51912784576416, "inputs": {"invcf": {"src": "hda", "id": "1d3cdaf727e1ca62"}, "filter_by_type|qual|snvqual_filter|snvqual_thresh": "38", "filter_by_type|qual|snvqual_filter|snvqual": "min-phred", "filter_by_type|qual|indelqual_filter|indelqual_thresh": "20", "filter_by_type|qual|indelqual_filter|indelqual": "min-phred", "flag_or_drop": "--print-all"}, "job": {"model_class": "Job", "id": "af120cd8c84bf1fb", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:21:45.749934", "create_time": "2022-09-10T17:20:13.950423", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-flbfc", "command_line": "lofreq filter -i /galaxy/server/database/objects/3/0/7/dataset_30712d26-27b0-470b-893e-0f99a52b0671.dat --no-defaults --verbose --print-all  -Q 38 -K 20 -v 10 -V 0 -a 0.0 -A 0.0 -b fdr -c 0.001   -o filtered.vcf", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "flag_or_drop": "\"--print-all\"", "sb": "{\"sb_filter\": {\"__current_case__\": 2, \"sb_alpha\": \"0.001\", \"sb_compound\": \"true\", \"sb_indels\": \"false\", \"sb_mtc\": \"fdr\", \"strand_bias\": \"mtc\"}}", "af": "{\"af_max\": \"0.0\", \"af_min\": \"0.0\"}", "coverage": "{\"cov_max\": \"0\", \"cov_min\": \"10\"}", "filter_by_type": "{\"__current_case__\": 0, \"keep_only\": \"\", \"qual\": {\"indelqual_filter\": {\"__current_case__\": 1, \"indelqual\": \"min-phred\", \"indelqual_thresh\": \"20\"}, \"snvqual_filter\": {\"__current_case__\": 1, \"snvqual\": \"min-phred\", \"snvqual_thresh\": \"38\"}}}"}, "inputs": {"invcf": {"id": "1d3cdaf727e1ca62", "src": "hda", "uuid": "30712d26-27b0-470b-893e-0f99a52b0671"}}, "outputs": {"outvcf": {"id": "f788db03e90a5206", "src": "hda", "uuid": "17164a0e-b01c-441d-91d8-9705da47bd9e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "job_stdout": "", "job_stderr": "", "stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:21:31", "plugin": "core", "name": "end_epoch", "raw_value": "1662830491.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:21:31", "plugin": "core", "name": "start_epoch", "raw_value": "1662830491.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 108.63573551177979, "inputs": {"reads": {"src": "hda", "id": "c2179aba829525db"}, "strategy|insertions": "20", "strategy|deletions": "30", "strategy|selector": "uniform"}, "job": {"model_class": "Job", "id": "a0dab9617aafa6a5", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:19:58.408585", "create_time": "2022-09-10T17:18:21.605352", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-f7jpn", "command_line": "lofreq indelqual --uniform 20,30 -o output.bam /galaxy/server/database/objects/a/6/8/dataset_a68082ee-eaa1-4d2f-baf0-d0d4a88ed759.dat", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strategy": "{\"__current_case__\": 0, \"deletions\": \"30\", \"insertions\": \"20\", \"selector\": \"uniform\"}"}, "inputs": {"reads": {"id": "c2179aba829525db", "src": "hda", "uuid": "a68082ee-eaa1-4d2f-baf0-d0d4a88ed759"}}, "outputs": {"output": {"id": "f711aa0a2ac261ab", "src": "hda", "uuid": "70d76cdc-a01b-4c7d-a61e-a16c4c1594ef"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:19:45", "plugin": "core", "name": "end_epoch", "raw_value": "1662830385.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:19:45", "plugin": "core", "name": "start_epoch", "raw_value": "1662830385.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmpqymg3nqpindelqual-out1.bam v. /tmp/tmpmo_kg6zvindelqual-out1.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 104.48702764511108, "inputs": {"reads": {"src": "hda", "id": "22e4a381a9cc8660"}, "strategy|reference_source|ref": {"src": "hda", "id": "1f235da8403021ca"}, "strategy|reference_source|ref_selector": "history", "strategy|selector": "dindel"}, "job": {"model_class": "Job", "id": "9ec29ae13bd7be77", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:20:01.986503", "create_time": "2022-09-10T17:18:32.062381", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-wdn69", "command_line": "ln -s '/galaxy/server/database/objects/7/a/1/dataset_7a166257-a6fb-4482-8770-364f04ec0153.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq indelqual --dindel --ref reference.fa -o output.bam /galaxy/server/database/objects/f/5/4/dataset_f54c41c2-36b8-4e5e-a5b6-3d0d87bacbd8.dat", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strategy": "{\"__current_case__\": 1, \"reference_source\": {\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 372, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}, \"selector\": \"dindel\"}"}, "inputs": {"reads": {"id": "22e4a381a9cc8660", "src": "hda", "uuid": "f54c41c2-36b8-4e5e-a5b6-3d0d87bacbd8"}, "strategy|ref": {"id": "1f235da8403021ca", "src": "hda", "uuid": "7a166257-a6fb-4482-8770-364f04ec0153"}}, "outputs": {"output": {"id": "da058f3917a81c7b", "src": "hda", "uuid": "e0580a1e-97bc-4de1-94de-ebe41650ee03"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:19:50", "plugin": "core", "name": "end_epoch", "raw_value": "1662830390.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:19:50", "plugin": "core", "name": "start_epoch", "raw_value": "1662830390.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmptkbfiz1cindelqual-out2.bam v. /tmp/tmpvqs3cu_7indelqual-out2.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual", "tool_version": "2.1.5+galaxy0", "test_index": 2, "time_seconds": 97.79344129562378, "inputs": {"reads": {"src": "hda", "id": "22e4a381a9cc8660"}, "strategy|insertions": "20", "strategy|selector": "uniform"}, "job": {"model_class": "Job", "id": "9f7e63bf08f64056", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:19:59.220768", "create_time": "2022-09-10T17:18:34.023132", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-bmglg", "command_line": "lofreq indelqual --uniform 20 -o output.bam /galaxy/server/database/objects/f/5/4/dataset_f54c41c2-36b8-4e5e-a5b6-3d0d87bacbd8.dat", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strategy": "{\"__current_case__\": 0, \"deletions\": \"\", \"insertions\": \"20\", \"selector\": \"uniform\"}"}, "inputs": {"reads": {"id": "22e4a381a9cc8660", "src": "hda", "uuid": "f54c41c2-36b8-4e5e-a5b6-3d0d87bacbd8"}}, "outputs": {"output": {"id": "1e14a3d5bcd9ca4a", "src": "hda", "uuid": "46a4b4a2-bbde-4037-b43e-905150f6ae31"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:19:48", "plugin": "core", "name": "end_epoch", "raw_value": "1662830388.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:19:48", "plugin": "core", "name": "start_epoch", "raw_value": "1662830388.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmpz8siursoindelqual-out3.bam v. /tmp/tmpkic2bh06indelqual-out3.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 103.17417120933533, "inputs": {"reads": {"src": "hda", "id": "7fef97e74e08bf0e"}, "reference_source|ref": {"src": "hda", "id": "ac0432c4f7d3c687"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "16829b3dc2bc6178", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:18:09.672095", "create_time": "2022-09-10T17:16:45.255024", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-k9s9r", "command_line": "ln -s '/galaxy/server/database/objects/2/d/7/dataset_2d71b1dc-b811-4940-a3ee-7466e8ede7aa.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq viterbi --ref 'reference.fa'  --defqual 2 --out tmp.bam '/galaxy/server/database/objects/1/a/e/dataset_1ae280b5-3bba-4a4e-a106-34ecfde66de8.dat' &&  samtools sort --no-PG -T \"${TMPDIR:-.}\" -@ ${GALAXY_SLOTS:-1} -O BAM -o '/galaxy/server/database/objects/2/0/5/dataset_205c0ac8-0d5d-450c-a477-ad75eb2f453c.dat' tmp.bam", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv_options": "{\"bq2_handling\": {\"__current_case__\": 0, \"defqual\": \"2\", \"replace_bq2\": \"keep\"}, \"keepflags\": \"false\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 363, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "7fef97e74e08bf0e", "src": "hda", "uuid": "1ae280b5-3bba-4a4e-a106-34ecfde66de8"}, "ref": {"id": "ac0432c4f7d3c687", "src": "hda", "uuid": "2d71b1dc-b811-4940-a3ee-7466e8ede7aa"}}, "outputs": {"realigned": {"id": "a6e5ba918118cd6f", "src": "hda", "uuid": "205c0ac8-0d5d-450c-a477-ad75eb2f453c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:18:01", "plugin": "core", "name": "end_epoch", "raw_value": "1662830281.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:18:01", "plugin": "core", "name": "start_epoch", "raw_value": "1662830281.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 94.99935960769653, "inputs": {"reads": {"src": "hda", "id": "ce5ef7d1bcf4e186"}, "reference_source|ref": {"src": "hda", "id": "ed9df8284c4bce88"}, "reference_source|ref_selector": "history", "adv_options|keepflags": true}, "job": {"model_class": "Job", "id": "9f6433a3e934e540", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:19:03.022846", "create_time": "2022-09-10T17:17:39.130989", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-kmzlh", "command_line": "ln -s '/galaxy/server/database/objects/9/e/5/dataset_9e53a5bf-81ae-4ec7-a9dc-2b03da1c21d5.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq viterbi --ref 'reference.fa' --keepflags --defqual 2 --out tmp.bam '/galaxy/server/database/objects/1/2/4/dataset_12438e1d-15d4-4b4a-b804-3e88d06224b6.dat' &&  samtools sort --no-PG -T \"${TMPDIR:-.}\" -@ ${GALAXY_SLOTS:-1} -O BAM -o '/galaxy/server/database/objects/9/c/1/dataset_9c18d509-5e83-4468-a5c0-5707df229033.dat' tmp.bam", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv_options": "{\"bq2_handling\": {\"__current_case__\": 0, \"defqual\": \"2\", \"replace_bq2\": \"keep\"}, \"keepflags\": \"true\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 368, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "ce5ef7d1bcf4e186", "src": "hda", "uuid": "12438e1d-15d4-4b4a-b804-3e88d06224b6"}, "ref": {"id": "ed9df8284c4bce88", "src": "hda", "uuid": "9e53a5bf-81ae-4ec7-a9dc-2b03da1c21d5"}}, "outputs": {"realigned": {"id": "5e948560efb52321", "src": "hda", "uuid": "9c18d509-5e83-4468-a5c0-5707df229033"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:18:54", "plugin": "core", "name": "end_epoch", "raw_value": "1662830334.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:18:54", "plugin": "core", "name": "start_epoch", "raw_value": "1662830334.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm/0.3+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm", "tool_version": "0.3+galaxy0", "test_index": 0, "time_seconds": 109.78599858283997, "inputs": {"readFile": {"src": "hda", "id": "1aa390bf6f3d6905"}, "paf": {"src": "hda", "id": "fa476dbfe97b0d89"}}, "job": {"model_class": "Job", "id": "4615e9efeac21d91", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:14:26.365100", "create_time": "2022-09-10T17:12:49.676360", "galaxy_version": "21.09", "command_version": "0.3-r179", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm/0.3+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-wbcsb", "command_line": "miniasm -f '/galaxy/server/database/objects/9/5/8/dataset_9588df8e-7a65-4aaf-877f-c4505f579db0.dat' -m '100' -i '0.05' -s '1000' -c '3' -o '1000' -h '1000' -I '0.08' -g '1000' -d '50000' -e '4' -n '3' -F '0.8' '/galaxy/server/database/objects/f/1/b/dataset_f1b9986a-3226-45d6-9246-4110a5e2bcfd.dat' > '/galaxy/server/database/objects/c/8/6/dataset_c8677439-db1a-49b1-8310-e87243c95caa.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "graph": "{\"finalDropRatio\": \"0.8\", \"maxBubDist\": \"50000\", \"maxGapDiff\": \"1000\", \"minUtgSize\": \"4\", \"nRounds\": \"3\"}", "overlapping": "{\"intThres\": \"0.08\", \"maxHang\": \"1000\", \"minOvlp\": \"1000\"}", "preselection": "{\"minCov\": \"3\", \"minIden\": \"0.05\", \"minMatch\": \"100\", \"minSpan\": \"1000\"}"}, "inputs": {"readFile": {"id": "1aa390bf6f3d6905", "src": "hda", "uuid": "9588df8e-7a65-4aaf-877f-c4505f579db0"}, "paf": {"id": "fa476dbfe97b0d89", "src": "hda", "uuid": "f1b9986a-3226-45d6-9246-4110a5e2bcfd"}}, "outputs": {"gfa": {"id": "940d4ac03a13033d", "src": "hda", "uuid": "c8677439-db1a-49b1-8310-e87243c95caa"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::main] ===> Step 1: reading read mappings <===\n[M::ma_hit_read::0.144*1.00] read 100000 hits; stored 187742 hits and 12067 sequences (111354001 bp)\n[M::main] ===> Step 2: 1-pass (crude) read selection <===\n[M::ma_hit_sub::0.157*1.00] 9155 query sequences remain after sub\n[M::ma_hit_cut::0.159*1.00] 161122 hits remain after cut\n[M::ma_hit_flt::0.161*1.00] 156936 hits remain after filtering; crude coverage after filtering: 11.85\n[M::main] ===> Step 3: 2-pass (fine) read selection <===\n[M::ma_hit_sub::0.167*1.00] 9023 query sequences remain after sub\n[M::ma_hit_cut::0.169*1.00] 152071 hits remain after cut\n[M::ma_hit_contained::0.172*1.00] 1536 sequences and 8359 hits remain after containment removal\n[M::main] ===> Step 4: graph cleaning <===\n[M::ma_sg_gen] read 8236 arcs\n[M::main] ===> Step 4.1: transitive reduction <===\n[M::asg_arc_del_trans] transitively reduced 4182 arcs\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 362 asymmetric arcs\n[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===\n[M::asg_cut_tip] cut 260 tips\n[M::asg_pop_bubble] popped 105 bubbles and trimmed 4 tips\n[M::main] ===> Step 4.3: cutting short overlaps (3 rounds in total) <===\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 29 asymmetric arcs\n[M::asg_arc_del_short] removed 37 short overlaps\n[M::asg_cut_tip] cut 104 tips\n[M::asg_pop_bubble] popped 1 bubbles and trimmed 0 tips\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 1 asymmetric arcs\n[M::asg_arc_del_short] removed 1 short overlaps\n[M::asg_cut_tip] cut 3 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===\n[M::asg_cut_internal] cut 0 internal sequences\n[M::asg_cut_biloop] cut 0 small bi-loops\n[M::asg_cut_tip] cut 0 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.5: aggressively cutting short overlaps <===\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 5: generating unitigs <===\n[M::main] Version: 0.3-r179\n[M::main] CMD: miniasm -f /galaxy/server/database/objects/9/5/8/dataset_9588df8e-7a65-4aaf-877f-c4505f579db0.dat -m 100 -i 0.05 -s 1000 -c 3 -o 1000 -h 1000 -I 0.08 -g 1000 -d 50000 -e 4 -n 3 -F 0.8 /galaxy/server/database/objects/f/1/b/dataset_f1b9986a-3226-45d6-9246-4110a5e2bcfd.dat\n[M::main] Real time: 0.183 sec; CPU: 0.181 sec\n", "stderr": "\n[M::main] ===> Step 1: reading read mappings <===\n[M::ma_hit_read::0.144*1.00] read 100000 hits; stored 187742 hits and 12067 sequences (111354001 bp)\n[M::main] ===> Step 2: 1-pass (crude) read selection <===\n[M::ma_hit_sub::0.157*1.00] 9155 query sequences remain after sub\n[M::ma_hit_cut::0.159*1.00] 161122 hits remain after cut\n[M::ma_hit_flt::0.161*1.00] 156936 hits remain after filtering; crude coverage after filtering: 11.85\n[M::main] ===> Step 3: 2-pass (fine) read selection <===\n[M::ma_hit_sub::0.167*1.00] 9023 query sequences remain after sub\n[M::ma_hit_cut::0.169*1.00] 152071 hits remain after cut\n[M::ma_hit_contained::0.172*1.00] 1536 sequences and 8359 hits remain after containment removal\n[M::main] ===> Step 4: graph cleaning <===\n[M::ma_sg_gen] read 8236 arcs\n[M::main] ===> Step 4.1: transitive reduction <===\n[M::asg_arc_del_trans] transitively reduced 4182 arcs\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 362 asymmetric arcs\n[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===\n[M::asg_cut_tip] cut 260 tips\n[M::asg_pop_bubble] popped 105 bubbles and trimmed 4 tips\n[M::main] ===> Step 4.3: cutting short overlaps (3 rounds in total) <===\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 29 asymmetric arcs\n[M::asg_arc_del_short] removed 37 short overlaps\n[M::asg_cut_tip] cut 104 tips\n[M::asg_pop_bubble] popped 1 bubbles and trimmed 0 tips\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 1 asymmetric arcs\n[M::asg_arc_del_short] removed 1 short overlaps\n[M::asg_cut_tip] cut 3 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===\n[M::asg_cut_internal] cut 0 internal sequences\n[M::asg_cut_biloop] cut 0 small bi-loops\n[M::asg_cut_tip] cut 0 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.5: aggressively cutting short overlaps <===\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 5: generating unitigs <===\n[M::main] Version: 0.3-r179\n[M::main] CMD: miniasm -f /galaxy/server/database/objects/9/5/8/dataset_9588df8e-7a65-4aaf-877f-c4505f579db0.dat -m 100 -i 0.05 -s 1000 -c 3 -o 1000 -h 1000 -I 0.08 -g 1000 -d 50000 -e 4 -n 3 -F 0.8 /galaxy/server/database/objects/f/1/b/dataset_f1b9986a-3226-45d6-9246-4110a5e2bcfd.dat\n[M::main] Real time: 0.183 sec; CPU: 0.181 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:14:12", "plugin": "core", "name": "end_epoch", "raw_value": "1662830052.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:14:12", "plugin": "core", "name": "start_epoch", "raw_value": "1662830052.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm/0.3+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm", "tool_version": "0.3+galaxy0", "test_index": 1, "time_seconds": 101.37556052207947, "inputs": {"readFile": {"src": "hda", "id": "4c3b9840bd9ff081"}, "paf": {"src": "hda", "id": "b32b7c1d3675f950"}, "preselection|minMatch": "99", "preselection|minIden": "0.04", "preselection|minSpan": "999", "preselection|minCov": "2", "overlapping|minOvlp": "999", "overlapping|maxHang": "999", "overlapping|intThres": "0.7", "graph|maxGapDiff": "999", "graph|maxBubDist": "45000", "graph|minUtgSize": "3", "graph|nRounds": "2", "graph|finalDropRatio": "0.7"}, "job": {"model_class": "Job", "id": "f4b5911a12e51220", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:14:31.592573", "create_time": "2022-09-10T17:13:01.656914", "galaxy_version": "21.09", "command_version": "0.3-r179", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm/0.3+galaxy0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-lk4t6", "command_line": "miniasm -f '/galaxy/server/database/objects/e/c/5/dataset_ec55ff98-7684-44bb-af86-3429b9cab6c6.dat' -m '99' -i '0.04' -s '999' -c '2' -o '999' -h '999' -I '0.7' -g '999' -d '45000' -e '3' -n '2' -F '0.7' '/galaxy/server/database/objects/b/8/4/dataset_b84702ce-3927-4bc1-bd14-e5b294cf3a82.dat' > '/galaxy/server/database/objects/1/7/6/dataset_1767495e-c713-4ef1-817a-1ff471f551f8.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "graph": "{\"finalDropRatio\": \"0.7\", \"maxBubDist\": \"45000\", \"maxGapDiff\": \"999\", \"minUtgSize\": \"3\", \"nRounds\": \"2\"}", "overlapping": "{\"intThres\": \"0.7\", \"maxHang\": \"999\", \"minOvlp\": \"999\"}", "preselection": "{\"minCov\": \"2\", \"minIden\": \"0.04\", \"minMatch\": \"99\", \"minSpan\": \"999\"}"}, "inputs": {"readFile": {"id": "4c3b9840bd9ff081", "src": "hda", "uuid": "ec55ff98-7684-44bb-af86-3429b9cab6c6"}, "paf": {"id": "b32b7c1d3675f950", "src": "hda", "uuid": "b84702ce-3927-4bc1-bd14-e5b294cf3a82"}}, "outputs": {"gfa": {"id": "40afd9f861a509e2", "src": "hda", "uuid": "1767495e-c713-4ef1-817a-1ff471f551f8"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::main] ===> Step 1: reading read mappings <===\n[M::ma_hit_read::0.147*1.00] read 100000 hits; stored 187766 hits and 12068 sequences (111355211 bp)\n[M::main] ===> Step 2: 1-pass (crude) read selection <===\n[M::ma_hit_sub::0.161*1.00] 10122 query sequences remain after sub\n[M::ma_hit_cut::0.164*1.00] 171862 hits remain after cut\n[M::ma_hit_flt::0.166*1.00] 165533 hits remain after filtering; crude coverage after filtering: 11.51\n[M::main] ===> Step 3: 2-pass (fine) read selection <===\n[M::ma_hit_sub::0.172*1.00] 9994 query sequences remain after sub\n[M::ma_hit_cut::0.174*1.00] 163595 hits remain after cut\n[M::ma_hit_contained::0.178*1.00] 1772 sequences and 10061 hits remain after containment removal\n[M::main] ===> Step 4: graph cleaning <===\n[M::ma_sg_gen] read 9758 arcs\n[M::main] ===> Step 4.1: transitive reduction <===\n[M::asg_arc_del_trans] transitively reduced 4694 arcs\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 484 asymmetric arcs\n[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===\n[M::asg_cut_tip] cut 282 tips\n[M::asg_pop_bubble] popped 173 bubbles and trimmed 6 tips\n[M::main] ===> Step 4.3: cutting short overlaps (2 rounds in total) <===\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 26 asymmetric arcs\n[M::asg_arc_del_short] removed 38 short overlaps\n[M::asg_cut_tip] cut 53 tips\n[M::asg_pop_bubble] popped 8 bubbles and trimmed 0 tips\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 2 asymmetric arcs\n[M::asg_arc_del_short] removed 2 short overlaps\n[M::asg_cut_tip] cut 2 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===\n[M::asg_cut_internal] cut 0 internal sequences\n[M::asg_cut_biloop] cut 0 small bi-loops\n[M::asg_cut_tip] cut 0 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.5: aggressively cutting short overlaps <===\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 5: generating unitigs <===\n[M::main] Version: 0.3-r179\n[M::main] CMD: miniasm -f /galaxy/server/database/objects/e/c/5/dataset_ec55ff98-7684-44bb-af86-3429b9cab6c6.dat -m 99 -i 0.04 -s 999 -c 2 -o 999 -h 999 -I 0.7 -g 999 -d 45000 -e 3 -n 2 -F 0.7 /galaxy/server/database/objects/b/8/4/dataset_b84702ce-3927-4bc1-bd14-e5b294cf3a82.dat\n[M::main] Real time: 0.188 sec; CPU: 0.186 sec\n", "stderr": "\n[M::main] ===> Step 1: reading read mappings <===\n[M::ma_hit_read::0.147*1.00] read 100000 hits; stored 187766 hits and 12068 sequences (111355211 bp)\n[M::main] ===> Step 2: 1-pass (crude) read selection <===\n[M::ma_hit_sub::0.161*1.00] 10122 query sequences remain after sub\n[M::ma_hit_cut::0.164*1.00] 171862 hits remain after cut\n[M::ma_hit_flt::0.166*1.00] 165533 hits remain after filtering; crude coverage after filtering: 11.51\n[M::main] ===> Step 3: 2-pass (fine) read selection <===\n[M::ma_hit_sub::0.172*1.00] 9994 query sequences remain after sub\n[M::ma_hit_cut::0.174*1.00] 163595 hits remain after cut\n[M::ma_hit_contained::0.178*1.00] 1772 sequences and 10061 hits remain after containment removal\n[M::main] ===> Step 4: graph cleaning <===\n[M::ma_sg_gen] read 9758 arcs\n[M::main] ===> Step 4.1: transitive reduction <===\n[M::asg_arc_del_trans] transitively reduced 4694 arcs\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 484 asymmetric arcs\n[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===\n[M::asg_cut_tip] cut 282 tips\n[M::asg_pop_bubble] popped 173 bubbles and trimmed 6 tips\n[M::main] ===> Step 4.3: cutting short overlaps (2 rounds in total) <===\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 26 asymmetric arcs\n[M::asg_arc_del_short] removed 38 short overlaps\n[M::asg_cut_tip] cut 53 tips\n[M::asg_pop_bubble] popped 8 bubbles and trimmed 0 tips\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 2 asymmetric arcs\n[M::asg_arc_del_short] removed 2 short overlaps\n[M::asg_cut_tip] cut 2 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===\n[M::asg_cut_internal] cut 0 internal sequences\n[M::asg_cut_biloop] cut 0 small bi-loops\n[M::asg_cut_tip] cut 0 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.5: aggressively cutting short overlaps <===\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 5: generating unitigs <===\n[M::main] Version: 0.3-r179\n[M::main] CMD: miniasm -f /galaxy/server/database/objects/e/c/5/dataset_ec55ff98-7684-44bb-af86-3429b9cab6c6.dat -m 99 -i 0.04 -s 999 -c 2 -o 999 -h 999 -I 0.7 -g 999 -d 45000 -e 3 -n 2 -F 0.7 /galaxy/server/database/objects/b/8/4/dataset_b84702ce-3927-4bc1-bd14-e5b294cf3a82.dat\n[M::main] Real time: 0.188 sec; CPU: 0.186 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 17:14:18", "plugin": "core", "name": "end_epoch", "raw_value": "1662830058.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:14:18", "plugin": "core", "name": "start_epoch", "raw_value": "1662830058.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 0, "time_seconds": 119.15906047821045, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "0872f76532b40a85"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "ce267690e0f6bf47"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "5ead68d91728575e", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:47:59.487450", "create_time": "2022-09-10T16:46:23.529517", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-xx6b2", "command_line": "ln -f -s '/galaxy/server/database/objects/3/7/c/dataset_37c90619-ac11-479e-b926-82a906b2e955.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/2/c/8/dataset_2c84c983-a547-49f7-8194-4ff45a72e35e.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/7/1/b/dataset_71bac106-1ca3-480e-8af3-125f2986c25a.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 121, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 120, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "0872f76532b40a85", "src": "hda", "uuid": "37c90619-ac11-479e-b926-82a906b2e955"}, "fastq_input1": {"id": "ce267690e0f6bf47", "src": "hda", "uuid": "2c84c983-a547-49f7-8194-4ff45a72e35e"}}, "outputs": {"alignment_output": {"id": "6d2af5dae70b0968", "src": "hda", "uuid": "71bac106-1ca3-480e-8af3-125f2986c25a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.003*0.70] collected minimizers\n[M::mm_idx_gen::0.004*1.34] sorted minimizers\n[M::main::0.004*1.33] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.33] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.32] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.006*1.33] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/2/c/8/dataset_2c84c983-a547-49f7-8194-4ff45a72e35e.dat\n[M::main] Real time: 0.007 sec; CPU: 0.009 sec; Peak RSS: 0.004 GB\n", "stderr": "\n[M::mm_idx_gen::0.003*0.70] collected minimizers\n[M::mm_idx_gen::0.004*1.34] sorted minimizers\n[M::main::0.004*1.33] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.33] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.32] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.006*1.33] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/2/c/8/dataset_2c84c983-a547-49f7-8194-4ff45a72e35e.dat\n[M::main] Real time: 0.007 sec; CPU: 0.009 sec; Peak RSS: 0.004 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:47:46", "plugin": "core", "name": "end_epoch", "raw_value": "1662828466.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:47:46", "plugin": "core", "name": "start_epoch", "raw_value": "1662828466.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_yd0_gkf_.sam v. /tmp/history_bam_converted_to_sam_e4eagzld.sam )\n--- local_file\n+++ history_data\n@@ -1,171 +1,171 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_19.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t*\t0\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\t*\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:18422:19051/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t*\t0\t0\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t*\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t*\t0\t0\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\t*\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:200\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:18842:24844/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\t*\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t*\t0\t0\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\t*\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:200\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5983:21093/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1102:7765:18353/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t*\t0\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\t*\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t*\t0\t0\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\t*\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:142\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:14060:21273/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S156M15S\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\t*\tNM:i:1\tms:i:302\tAS:i:302\tnn:i:0\ttp:A:P\tcm:i:22\ts1:i:150\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:14528:12993/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGAT\t*\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:17657:20856/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t90S161M\t*\t0\t0\tAAAGCGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\t*\tNM:i:1\tms:i:312\tAS:i:312\tnn:i:0\ttp:A:P\tcm:i:22\ts1:i:150\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16480,+,90M161S,60,2;\n-M01368:8:000000000-A3GHV:1:1103:25519:6301/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t18S184M49S\t*\t0\t0\tAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGCATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATTTCGT\t*\tNM:i:2\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:21\ts1:i:157\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1103:6074:6549/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t108S143M\t*\t0\t0\tTAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTG\t*\tNM:i:1\tms:i:276\tAS:i:276\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16462,+,108M143S,60,1;\n-M01368:8:000000000-A3GHV:1:1104:11572:8264/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1104:12288:20635/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\t*\tNM:i:3\tms:i:262\tAS:i:262\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:109\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1104:13832:4398/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t7S132M112S\t*\t0\t0\tCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGACAAAAAAAAACACACAACAACCAACACCCAGTAGACTAGTGCGTC\t*\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1110:15519:10008/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t12\t67M184H\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:124\tAS:i:124\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0149\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,67S184M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1110:16700:6843/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t12\t25H67M159H\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:124\tAS:i:124\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0149\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,92S159M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:16531/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t5\t59M192H\t*\t0\t0\tGGTTCCTACTTCAAGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACA\t*\tNM:i:2\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:31\ts2:i:0\tde:f:0.0339\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,67S184M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:8665:25542/1\t2048\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701/1\t2064\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:27103:7153/1\t2064\tgi|251831106|ref|NC_012920.1|\t16508\t12\t7H62M182H\t*\t0\t0\tCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:114\tAS:i:114\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0161\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,69S182M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233/1\t2048\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794/1\t2064\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:17564:15723/1\t2064\tgi|251831106|ref|NC_012920.1|\t16512\t12\t58M193H\t*\t0\t0\tTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:106\tAS:i:106\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0172\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,58S193M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t57M194H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:18714:24788/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t57M194H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490/1\t2048\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t*\t0\t0\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050/1\t2064\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t*\t0\t0\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:8763:7859/1\t2064\tgi|251831106|ref|NC_012920.1|\t16519\t19\t51M200H\t*\t0\t0\tGCATAAAGCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:100\tAS:i:100\tnn:i:0\ttp:A:P\tcm:i:4\ts1:i:38\ts2:i:0\tde:f:0.0196\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,51S200M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1113:5741:16959/1\t2064\tgi|251831106|ref|NC_012920.1|\t16519\t11\t51M200H\t*\t0\t0\tTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:92\tAS:i:92\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0196\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,51S200M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:13575:19255/1\t2064\tgi|251831106|ref|NC_012920.1|\t16520\t11\t50M201H\t*\t0\t0\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:16350:22621/1\t2064\tgi|251831106|ref|NC_012920.1|\t16520\t11\t50M201H\t*\t0\t0\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272/1\t2064\tgi|251831106|ref|NC_012920.1|\t16522\t11\t48M203H\t*\t0\t0\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145/1\t2048\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t*\t0\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258/1\t2048\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t5H43M203H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:19224:11655/1\t2048\tgi|251831106|ref|NC_012920.1|\t16530\t11\t40M211H\t*\t0\t0\tAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:80\tAS:i:80\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,40S186M25S,60,2;\trl:i:0\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 1, "time_seconds": 109.49904084205627, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "0872f76532b40a85"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "ce267690e0f6bf47"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single", "io_options|output_format": "CRAM"}, "job": {"model_class": "Job", "id": "74e45278bfbc596c", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:47:53.401850", "create_time": "2022-09-10T16:46:24.529697", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-xrs8f", "command_line": "ln -f -s '/galaxy/server/database/objects/3/7/c/dataset_37c90619-ac11-479e-b926-82a906b2e955.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/2/c/8/dataset_2c84c983-a547-49f7-8194-4ff45a72e35e.dat' -a | samtools sort -T \"${TMPDIR:-.}\" -@${GALAXY_SLOTS:-2} -O CRAM  --reference reference.fa --output-fmt-option no_ref -o '/galaxy/server/database/objects/d/1/8/dataset_d1822407-042b-48d7-82dd-1dd8b0f11d43.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"CRAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 121, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 120, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "0872f76532b40a85", "src": "hda", "uuid": "37c90619-ac11-479e-b926-82a906b2e955"}, "fastq_input1": {"id": "ce267690e0f6bf47", "src": "hda", "uuid": "2c84c983-a547-49f7-8194-4ff45a72e35e"}}, "outputs": {"alignment_output": {"id": "9798f67c6f3d53a2", "src": "hda", "uuid": "d1822407-042b-48d7-82dd-1dd8b0f11d43"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.003*0.95] collected minimizers\n[M::mm_idx_gen::0.004*1.65] sorted minimizers\n[M::main::0.004*1.65] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.65] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.62] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.007*1.53] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/2/c/8/dataset_2c84c983-a547-49f7-8194-4ff45a72e35e.dat\n[M::main] Real time: 0.009 sec; CPU: 0.012 sec; Peak RSS: 0.004 GB\n", "stderr": "\n[M::mm_idx_gen::0.003*0.95] collected minimizers\n[M::mm_idx_gen::0.004*1.65] sorted minimizers\n[M::main::0.004*1.65] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.65] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.62] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.007*1.53] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/2/c/8/dataset_2c84c983-a547-49f7-8194-4ff45a72e35e.dat\n[M::main] Real time: 0.009 sec; CPU: 0.012 sec; Peak RSS: 0.004 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:47:40", "plugin": "core", "name": "end_epoch", "raw_value": "1662828460.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:47:40", "plugin": "core", "name": "start_epoch", "raw_value": "1662828460.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 2, "time_seconds": 142.8089723587036, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "6041d598ac5b3d5a"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "082c0f2a6b814296"}, "fastq_input|fastq_input2": {"src": "hda", "id": "d5638c25794906c3"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "e24f687a9d116373", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:49:58.751099", "create_time": "2022-09-10T16:47:58.423345", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-wss2g", "command_line": "ln -f -s '/galaxy/server/database/objects/3/1/5/dataset_3150d6f9-1682-45cb-be70-01e9e537b066.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/2/a/1/dataset_2a16a587-b16a-4522-b9e4-22512f3ed788.dat' '/galaxy/server/database/objects/0/d/5/dataset_0d51991b-4fde-41c1-a874-29d68bde07e0.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/e/9/1/dataset_e912d4a5-cdd3-4eb7-a40f-2102c8ef13b2.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 135, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 138, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 133, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "6041d598ac5b3d5a", "src": "hda", "uuid": "3150d6f9-1682-45cb-be70-01e9e537b066"}, "fastq_input1": {"id": "082c0f2a6b814296", "src": "hda", "uuid": "2a16a587-b16a-4522-b9e4-22512f3ed788"}, "fastq_input2": {"id": "d5638c25794906c3", "src": "hda", "uuid": "0d51991b-4fde-41c1-a874-29d68bde07e0"}}, "outputs": {"alignment_output": {"id": "4020a8d8a3dea3a7", "src": "hda", "uuid": "e912d4a5-cdd3-4eb7-a40f-2102c8ef13b2"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.002*0.89] collected minimizers\n[M::mm_idx_gen::0.003*1.73] sorted minimizers\n[M::main::0.003*1.72] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.003*1.72] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.003*1.69] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.008*1.85] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/2/a/1/dataset_2a16a587-b16a-4522-b9e4-22512f3ed788.dat /galaxy/server/database/objects/0/d/5/dataset_0d51991b-4fde-41c1-a874-29d68bde07e0.dat\n[M::main] Real time: 0.010 sec; CPU: 0.017 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.002*0.89] collected minimizers\n[M::mm_idx_gen::0.003*1.73] sorted minimizers\n[M::main::0.003*1.72] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.003*1.72] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.003*1.69] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.008*1.85] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/2/a/1/dataset_2a16a587-b16a-4522-b9e4-22512f3ed788.dat /galaxy/server/database/objects/0/d/5/dataset_0d51991b-4fde-41c1-a874-29d68bde07e0.dat\n[M::main] Real time: 0.010 sec; CPU: 0.017 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:49:45", "plugin": "core", "name": "end_epoch", "raw_value": "1662828585.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:49:45", "plugin": "core", "name": "start_epoch", "raw_value": "1662828585.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_p3b0az0e.sam v. /tmp/history_bam_converted_to_sam_fh5qcdwu.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_12.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_13.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1>11111@11111A111A100000000////011110//>>/12@1@22B/////1@>21/>>/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t>A@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@<1>@FFFGHHHHFHEFGDABFFGG/@DCE<CG1<GF0/DD000=<DHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#>AABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA<@HFDG0HHGGHGBDFGFG<DDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11>>ABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA<.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF<GGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 3, "time_seconds": 111.82422137260437, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "6041d598ac5b3d5a"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "bd0525a1cec53c41"}, "fastq_input|fastq_input2": {"src": "hda", "id": "d5638c25794906c3"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "92cf6d7f29bc52b9", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:49:45.342071", "create_time": "2022-09-10T16:48:24.273159", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-dwmk8", "command_line": "ln -f -s '/galaxy/server/database/objects/3/1/5/dataset_3150d6f9-1682-45cb-be70-01e9e537b066.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/3/9/c/dataset_39ceff82-5e3f-48b8-8726-3c7f9dac0245.dat' '/galaxy/server/database/objects/0/d/5/dataset_0d51991b-4fde-41c1-a874-29d68bde07e0.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/0/7/f/dataset_07f63c0c-0697-4424-8667-2840ef965d41.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 136, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 138, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 133, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "6041d598ac5b3d5a", "src": "hda", "uuid": "3150d6f9-1682-45cb-be70-01e9e537b066"}, "fastq_input1": {"id": "bd0525a1cec53c41", "src": "hda", "uuid": "39ceff82-5e3f-48b8-8726-3c7f9dac0245"}, "fastq_input2": {"id": "d5638c25794906c3", "src": "hda", "uuid": "0d51991b-4fde-41c1-a874-29d68bde07e0"}}, "outputs": {"alignment_output": {"id": "936c377491a017db", "src": "hda", "uuid": "07f63c0c-0697-4424-8667-2840ef965d41"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.003*0.68] collected minimizers\n[M::mm_idx_gen::0.004*1.28] sorted minimizers\n[M::main::0.004*1.28] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.28] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.26] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.011*1.40] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/3/9/c/dataset_39ceff82-5e3f-48b8-8726-3c7f9dac0245.dat /galaxy/server/database/objects/0/d/5/dataset_0d51991b-4fde-41c1-a874-29d68bde07e0.dat\n[M::main] Real time: 0.012 sec; CPU: 0.016 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.003*0.68] collected minimizers\n[M::mm_idx_gen::0.004*1.28] sorted minimizers\n[M::main::0.004*1.28] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.28] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.26] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.011*1.40] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/3/9/c/dataset_39ceff82-5e3f-48b8-8726-3c7f9dac0245.dat /galaxy/server/database/objects/0/d/5/dataset_0d51991b-4fde-41c1-a874-29d68bde07e0.dat\n[M::main] Real time: 0.012 sec; CPU: 0.016 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:49:36", "plugin": "core", "name": "end_epoch", "raw_value": "1662828576.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:49:36", "plugin": "core", "name": "start_epoch", "raw_value": "1662828576.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_bgq1mccl.sam v. /tmp/history_bam_converted_to_sam_cnow70q4.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_12.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_13.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1>11111@11111A111A100000000////011110//>>/12@1@22B/////1@>21/>>/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t>A@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@<1>@FFFGHHHHFHEFGDABFFGG/@DCE<CG1<GF0/DD000=<DHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#>AABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA<@HFDG0HHGGHGBDFGFG<DDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11>>ABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA<.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF<GGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 4, "time_seconds": 116.59913635253906, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "6041d598ac5b3d5a"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hdca", "id": "34a7f99d1dcf5aa6"}, "fastq_input|fastq_input_selector": "paired_collection"}, "job": {"model_class": "Job", "id": "c43df2937c3a7966", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:49:50.006248", "create_time": "2022-09-10T16:48:24.365777", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-4648v", "command_line": "ln -f -s '/galaxy/server/database/objects/3/1/5/dataset_3150d6f9-1682-45cb-be70-01e9e537b066.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/2/a/1/dataset_2a16a587-b16a-4522-b9e4-22512f3ed788.dat' '/galaxy/server/database/objects/0/d/5/dataset_0d51991b-4fde-41c1-a874-29d68bde07e0.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/f/4/f/dataset_f4fb4762-309b-4994-9a89-b91a421c180b.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 2, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 133, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "6041d598ac5b3d5a", "src": "hda", "uuid": "3150d6f9-1682-45cb-be70-01e9e537b066"}, "fastq_input11": {"id": "082c0f2a6b814296", "src": "hda", "uuid": "2a16a587-b16a-4522-b9e4-22512f3ed788"}, "fastq_input12": {"id": "d5638c25794906c3", "src": "hda", "uuid": "0d51991b-4fde-41c1-a874-29d68bde07e0"}}, "outputs": {"alignment_output": {"id": "4265b2accb3eccb7", "src": "hda", "uuid": "f4fb4762-309b-4994-9a89-b91a421c180b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.002*1.32] collected minimizers\n[M::mm_idx_gen::0.003*2.26] sorted minimizers\n[M::main::0.003*2.24] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.003*2.24] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.003*2.17] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*1.75] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/2/a/1/dataset_2a16a587-b16a-4522-b9e4-22512f3ed788.dat /galaxy/server/database/objects/0/d/5/dataset_0d51991b-4fde-41c1-a874-29d68bde07e0.dat\n[M::main] Real time: 0.010 sec; CPU: 0.016 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.002*1.32] collected minimizers\n[M::mm_idx_gen::0.003*2.26] sorted minimizers\n[M::main::0.003*2.24] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.003*2.24] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.003*2.17] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*1.75] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/2/a/1/dataset_2a16a587-b16a-4522-b9e4-22512f3ed788.dat /galaxy/server/database/objects/0/d/5/dataset_0d51991b-4fde-41c1-a874-29d68bde07e0.dat\n[M::main] Real time: 0.010 sec; CPU: 0.016 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:49:41", "plugin": "core", "name": "end_epoch", "raw_value": "1662828581.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:49:41", "plugin": "core", "name": "start_epoch", "raw_value": "1662828581.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_etwo28uw.sam v. /tmp/history_bam_converted_to_sam_jtim6lub.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_16.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_17.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1>11111@11111A111A100000000////011110//>>/12@1@22B/////1@>21/>>/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t>A@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@<1>@FFFGHHHHFHEFGDABFFGG/@DCE<CG1<GF0/DD000=<DHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#>AABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA<@HFDG0HHGGHGBDFGFG<DDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11>>ABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA<.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF<GGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 5, "time_seconds": 25.127389907836914, "inputs": {"reference_source|ref_file": "bwa-mem-mt-genome", "reference_source|reference_source_selector": "cached", "fastq_input|fastq_input1": {"src": "hda", "id": "9843ddfe55de574a"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single"}, "execution_problem": "parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: caeJap4,dm6,felCat5,hetGla1,Ptrichocarpa_156,galGal2canon,apiMel1,musFur1,galGal4,xenTro2,anoCar1,oryLat2,strPur3,eschColi_K12,micMur1,caeJap2,melUnd1,panPan1,Arabidopsis_thaliana_TAIR9,panTro3canon,criGri1,hg19chrM,mm7,felCat8,monDom5,droVir1,braFlo1,droMoj1,susScr2,Xanthomonas_oryzae_KACC10331,sacCer3,fr2,eschColi_O157H7,caeJap1,pseuAeru_UCBPP_PA14,rheMac3,tetNig2,papAnu2,droYak1,panTro1canon,droYak2,calJac3canon,papHam1,droAna3,hg18,calJac3,sarHar1,eriEur1,canFam2,caeRem1,hg38female,droEre1,rn4canon,felCat3,cavPor3,Amel_4.5,susScr3,otoGar3,dm3,droPer1,ponAbe2,lMaj5,galGal3canon,burkPseu_K96243,ce9,oryLat1,monDom1,melGal1,danRer6,27835,dm2,eschColi_APEC_O1,nomLeu3,priPac1,bosTau6,monDom4,Tcacao_1.0,eschColi_O157H7_EC4115,oryCun1,pUC18,borEut13,galGal3,hg19female,danRer10,Sscrofa9.58,mm9female,droAna2,hg19canon,nomLeu2,AaegL1,anoCar2,gorGor3,echTel1,danRer4,xenTro1,apiMel4,eschColi_O157H7_EDL933,vicPac1,rn3canon,danRer2,canFam1,droAna1,geoFor1,nomLeu1,mm8canon,ce10,droEre2,ornAna1,panTro4,droGri2,droMoj3,anoGam1,rheMac2,dipOrd1,caePb1,latCha1,susScr1,speTri2,bosTauMd3,equCab2chrM,droGri1,Homo_sapiens_nuHg19_mtrCRS,Spur_v2.6,caePb2,danRer7,gadMor1,ce2,bosTau4,hg_g1k_v37,mm9,sacCer1,phiX,strePneu_R6,gasAcu1,equCab2,sacCer2,taeGut1canon,oryLat2canon,ce6,hg19chrX,Zea_mays_B73_RefGen_v2,bosTau7,tetNig1canon,tupBel1,turTru2,otoGar1,mm9canon,bosTau2,Schizosaccharomyces_pombe_1.1,panTro1,sorAra1,bosTau8,vicPac2,eschColi_O157H7_TW14359,bosTau3,hg19_rCRS_pUC18_phiX174,venter1,hg18nohaps,danRer3,dp4,droWil1,AgamP3,hg19,oryCun2,rn6,caeJap3,allMis1,ce8,caePb3,ente638,saiBol1,Tcas_3.0,ci2canon,triCas2,droVir3,mm10,ce3,panTro3full,apiMel3,CpipJ1,mm8,tetNig2canon,rn4,eschColi_K12_DH10B,canFam3,caeRem3,burkPseu_1106A,tarSyr1,Homo_sapiens_AK1,danRer5,hg18canon,eschColi_CFT073,aplCal1,Hydra_JCVI,Bombyx_mori_p50T_2.0,apiMel2,Araly1,felCat4,xenTro3,oviAri1,hg17canon,galGal2,chrPic1,loxAfr1,dp3,CHM13_T2T_v2.0,oryza_sativa_japonica_nipponbare_IRGSP4.0,dasNov3,rn5,PhumU1,fr1,strPur2,hg38canon,equCab1,cerSim1,baciSubt,taeGut2,taeGut1,dasNov1,burkPseu_1710B,tetNig1,droSim1,ce5,choHof1,panTro2,cb3canon,aptMan1,ailMel1,mm7canon,ci2full,petMar1,eschColi_K12_W3110,cb3full,droVir2,bordBron,felCat4canon,panTro2canon,IscaW1,myoLuc2,droSec1,droMoj2,hg17,hg38,pseuAeru_PAO1,burkPseu_668,pseuAeru_PA7,caeRem2,bosTau5,Xanthomonas_oryzae_MAFF_311018,loxAfr3,rn3,Xanthomonas_oryzae_PXO99A,caeRem4,hg18chr21,calJac1,ce7,Arabidopsis_thaliana_TAIR10,ce4)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 6, "time_seconds": 8.476574897766113, "inputs": {"reference_source|ref_file": "bwa-mem-mt-genome", "reference_source|reference_source_selector": "cached", "fastq_input|fastq_input1": {"src": "hda", "id": "6ba8d013f56a0dd7"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single", "mapping_options|min_occ_floor": "1000", "alignment_options|A": "2", "alignment_options|B": "8", "alignment_options|O": "12", "alignment_options|O2": "32", "alignment_options|E": "2", "alignment_options|E2": "1", "alignment_options|z": "400", "alignment_options|s": "40"}, "execution_problem": "parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: caeJap4,dm6,felCat5,hetGla1,Ptrichocarpa_156,galGal2canon,apiMel1,musFur1,galGal4,xenTro2,anoCar1,oryLat2,strPur3,eschColi_K12,micMur1,caeJap2,melUnd1,panPan1,Arabidopsis_thaliana_TAIR9,panTro3canon,criGri1,hg19chrM,mm7,felCat8,monDom5,droVir1,braFlo1,droMoj1,susScr2,Xanthomonas_oryzae_KACC10331,sacCer3,fr2,eschColi_O157H7,caeJap1,pseuAeru_UCBPP_PA14,rheMac3,tetNig2,papAnu2,droYak1,panTro1canon,droYak2,calJac3canon,papHam1,droAna3,hg18,calJac3,sarHar1,eriEur1,canFam2,caeRem1,hg38female,droEre1,rn4canon,felCat3,cavPor3,Amel_4.5,susScr3,otoGar3,dm3,droPer1,ponAbe2,lMaj5,galGal3canon,burkPseu_K96243,ce9,oryLat1,monDom1,melGal1,danRer6,27835,dm2,eschColi_APEC_O1,nomLeu3,priPac1,bosTau6,monDom4,Tcacao_1.0,eschColi_O157H7_EC4115,oryCun1,pUC18,borEut13,galGal3,hg19female,danRer10,Sscrofa9.58,mm9female,droAna2,hg19canon,nomLeu2,AaegL1,anoCar2,gorGor3,echTel1,danRer4,xenTro1,apiMel4,eschColi_O157H7_EDL933,vicPac1,rn3canon,danRer2,canFam1,droAna1,geoFor1,nomLeu1,mm8canon,ce10,droEre2,ornAna1,panTro4,droGri2,droMoj3,anoGam1,rheMac2,dipOrd1,caePb1,latCha1,susScr1,speTri2,bosTauMd3,equCab2chrM,droGri1,Homo_sapiens_nuHg19_mtrCRS,Spur_v2.6,caePb2,danRer7,gadMor1,ce2,bosTau4,hg_g1k_v37,mm9,sacCer1,phiX,strePneu_R6,gasAcu1,equCab2,sacCer2,taeGut1canon,oryLat2canon,ce6,hg19chrX,Zea_mays_B73_RefGen_v2,bosTau7,tetNig1canon,tupBel1,turTru2,otoGar1,mm9canon,bosTau2,Schizosaccharomyces_pombe_1.1,panTro1,sorAra1,bosTau8,vicPac2,eschColi_O157H7_TW14359,bosTau3,hg19_rCRS_pUC18_phiX174,venter1,hg18nohaps,danRer3,dp4,droWil1,AgamP3,hg19,oryCun2,rn6,caeJap3,allMis1,ce8,caePb3,ente638,saiBol1,Tcas_3.0,ci2canon,triCas2,droVir3,mm10,ce3,panTro3full,apiMel3,CpipJ1,mm8,tetNig2canon,rn4,eschColi_K12_DH10B,canFam3,caeRem3,burkPseu_1106A,tarSyr1,Homo_sapiens_AK1,danRer5,hg18canon,eschColi_CFT073,aplCal1,Hydra_JCVI,Bombyx_mori_p50T_2.0,apiMel2,Araly1,felCat4,xenTro3,oviAri1,hg17canon,galGal2,chrPic1,loxAfr1,dp3,CHM13_T2T_v2.0,oryza_sativa_japonica_nipponbare_IRGSP4.0,dasNov3,rn5,PhumU1,fr1,strPur2,hg38canon,equCab1,cerSim1,baciSubt,taeGut2,taeGut1,dasNov1,burkPseu_1710B,tetNig1,droSim1,ce5,choHof1,panTro2,cb3canon,aptMan1,ailMel1,mm7canon,ci2full,petMar1,eschColi_K12_W3110,cb3full,droVir2,bordBron,felCat4canon,panTro2canon,IscaW1,myoLuc2,droSec1,droMoj2,hg17,hg38,pseuAeru_PAO1,burkPseu_668,pseuAeru_PA7,caeRem2,bosTau5,Xanthomonas_oryzae_MAFF_311018,loxAfr3,rn3,Xanthomonas_oryzae_PXO99A,caeRem4,hg18chr21,calJac1,ce7,Arabidopsis_thaliana_TAIR10,ce4)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 7, "time_seconds": 95.40628004074097, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "09235f807f59b349"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "09235f807f59b349"}, "fastq_input|analysis_type_selector": "ava-ont", "fastq_input|fastq_input_selector": "single", "io_options|output_format": "paf"}, "job": {"model_class": "Job", "id": "0a3eefb36c750d92", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:50:08.606202", "create_time": "2022-09-10T16:48:41.637844", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-xc6jx", "command_line": "ln -f -s '/galaxy/server/database/objects/5/8/e/dataset_58e5b874-7185-4c98-ac50-348673cd5942.dat' reference.fa && minimap2 -x ava-ont           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/5/8/e/dataset_58e5b874-7185-4c98-ac50-348673cd5942.dat' > '/galaxy/server/database/objects/c/6/a/dataset_c6aa1d78-8d6b-45c6-ab52-77a614b719ae.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"paf\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"ava-ont\", \"fastq_input1\": {\"values\": [{\"id\": 144, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 144, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "09235f807f59b349", "src": "hda", "uuid": "58e5b874-7185-4c98-ac50-348673cd5942"}, "fastq_input1": {"id": "09235f807f59b349", "src": "hda", "uuid": "58e5b874-7185-4c98-ac50-348673cd5942"}}, "outputs": {"alignment_output": {"id": "a2c051f387a26fcd", "src": "hda", "uuid": "c6aa1d78-8d6b-45c6-ab52-77a614b719ae"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.011*0.93] collected minimizers\n[M::mm_idx_gen::0.026*2.03] sorted minimizers\n[M::main::0.026*2.03] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.027*1.97] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.028*1.93] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.035*2.09] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 4 reference.fa /galaxy/server/database/objects/5/8/e/dataset_58e5b874-7185-4c98-ac50-348673cd5942.dat\n[M::main] Real time: 0.040 sec; CPU: 0.078 sec; Peak RSS: 0.011 GB\n", "stderr": "\n[M::mm_idx_gen::0.011*0.93] collected minimizers\n[M::mm_idx_gen::0.026*2.03] sorted minimizers\n[M::main::0.026*2.03] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.027*1.97] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.028*1.93] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.035*2.09] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 4 reference.fa /galaxy/server/database/objects/5/8/e/dataset_58e5b874-7185-4c98-ac50-348673cd5942.dat\n[M::main] Real time: 0.040 sec; CPU: 0.078 sec; Peak RSS: 0.011 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:49:54", "plugin": "core", "name": "end_epoch", "raw_value": "1662828594.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:49:54", "plugin": "core", "name": "start_epoch", "raw_value": "1662828594.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 8, "time_seconds": 101.47260880470276, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "18cbb3fc58a37e6f"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "18cbb3fc58a37e6f"}, "fastq_input|analysis_type_selector": "self-homology", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "43383680575a936b", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:51:26.538897", "create_time": "2022-09-10T16:49:58.905451", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-qts22", "command_line": "ln -f -s '/galaxy/server/database/objects/6/8/9/dataset_689816a4-f99e-4031-bfde-7bb735651390.dat' reference.fa && minimap2 -DP -k19 -w19 -m200           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/6/8/9/dataset_689816a4-f99e-4031-bfde-7bb735651390.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/6/6/9/dataset_669aa566-71cf-419d-9062-40b66f635c2e.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"self-homology\", \"fastq_input1\": {\"values\": [{\"id\": 146, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 146, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "18cbb3fc58a37e6f", "src": "hda", "uuid": "689816a4-f99e-4031-bfde-7bb735651390"}, "fastq_input1": {"id": "18cbb3fc58a37e6f", "src": "hda", "uuid": "689816a4-f99e-4031-bfde-7bb735651390"}}, "outputs": {"alignment_output": {"id": "47c28ddf711fce4b", "src": "hda", "uuid": "669aa566-71cf-419d-9062-40b66f635c2e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.003*0.85] collected minimizers\n[M::mm_idx_gen::0.004*1.35] sorted minimizers\n[M::main::0.004*1.35] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.33] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.32] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.030*1.02] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 4 -a reference.fa /galaxy/server/database/objects/6/8/9/dataset_689816a4-f99e-4031-bfde-7bb735651390.dat\n[M::main] Real time: 0.031 sec; CPU: 0.032 sec; Peak RSS: 0.010 GB\n", "stderr": "\n[M::mm_idx_gen::0.003*0.85] collected minimizers\n[M::mm_idx_gen::0.004*1.35] sorted minimizers\n[M::main::0.004*1.35] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.33] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.32] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.030*1.02] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 4 -a reference.fa /galaxy/server/database/objects/6/8/9/dataset_689816a4-f99e-4031-bfde-7bb735651390.dat\n[M::main] Real time: 0.031 sec; CPU: 0.032 sec; Peak RSS: 0.010 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:51:17", "plugin": "core", "name": "end_epoch", "raw_value": "1662828677.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:51:17", "plugin": "core", "name": "start_epoch", "raw_value": "1662828677.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0", "test_index": 0, "time_seconds": 183.42887663841248, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "f346478746331e74"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "f4b5911a12e51220"}, "paired_unpaired|fastq_input_selector": "paired", "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": false, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "f25dfb1ccb9490ba", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:07:03.949427", "create_time": "2022-09-10T17:04:13.562946", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-r9f2q", "command_line": "ln -s '/galaxy/server/database/objects/e/4/c/dataset_e4cf53b2-763d-4b00-b018-1946174d0424.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/a/0/f/dataset_a0f1a27f-4730-4d02-8eef-f988a633aa9d.dat' fq2.fastq && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq' -2 'fq2.fastq' --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "long": null, "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 260, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 261, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"fastq_input1": {"id": "f346478746331e74", "src": "hda", "uuid": "e4cf53b2-763d-4b00-b018-1946174d0424"}, "fastq_input2": {"id": "f4b5911a12e51220", "src": "hda", "uuid": "a0f1a27f-4730-4d02-8eef-f988a633aa9d"}}, "outputs": {"assembly": {"id": "3c9f64cc4027e96e", "src": "hda", "uuid": "f3e4338b-e892-47f3-adbb-9630462cb60a"}, "assembly_graph": {"id": "5d7573d6778a8f79", "src": "hda", "uuid": "1bb53546-e3aa-463d-b529-8de9f34d29b8"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2022-09-10 17:05:44)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/222/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon                               not used                                          \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2022-09-10 17:05:46)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2022-09-10 17:05:46)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/222/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/222/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/222/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/222/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/222/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/222/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.096    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.096    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.098    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.098    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.098    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.144    24M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.153    24M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.153    24M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.153    24M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.153    24M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.154    24M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.154    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.154    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.331    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.332    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.390    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.390    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.427    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.427    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.428    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.428    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.429    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.429    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.884     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:00.884     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:00.892    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.114    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.115    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.234    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.268    38M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.289    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.290    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.295    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.296    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.296    38M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.296    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.305    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.305    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.305    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.306    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.308    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.313    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.316    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.319    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.321    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.321    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.321    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.333    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.333    39M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.419    39M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.421    39M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.426    39M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.426    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.426    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.426    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.426    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.510    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.714    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.200    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:02.764    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:03.724    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:03.724    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:03.726    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:03.726    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:03.726    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:03.726    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:03.726    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:03.726    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:03.727    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:03.727    39M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:03.727    39M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:03.727    39M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:03\n..\n    : 246)   Deduplicating paths\n  0:00:04.723    31M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:04.723    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:04.723    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:04.723    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:04.723    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:04.723    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:04.723    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:04.724    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:04.724    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:04.724    31M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:04.724    31M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:04.724    31M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:04.724    31M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:04.729    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:04.729    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:04.734    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:04.734    31M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:04.738    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:04.740    31M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:04.743    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:04.746    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:04.753    31M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:04.755    31M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 4 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:04.721    32M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2022-09-10 17:06:39)\nFilter by read depth        (2022-09-10 17:06:39)\nFilter homopolymer loops    (2022-09-10 17:06:39)\nMerge all possible          (2022-09-10 17:06:39)\nNormalise read depths       (2022-09-10 17:06:39)\nRemove zero length segments (2022-09-10 17:06:39)\nSort link order             (2022-09-10 17:06:39)\nGraph cleaning finished     (2022-09-10 17:06:39)\nSaving /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2022-09-10 17:06:39)\nFilter by read depth        (2022-09-10 17:06:39)\nFilter homopolymer loops    (2022-09-10 17:06:39)\nMerge all possible          (2022-09-10 17:06:39)\nNormalise read depths       (2022-09-10 17:06:39)\nRemove zero length segments (2022-09-10 17:06:39)\nSort link order             (2022-09-10 17:06:39)\nGraph cleaning finished     (2022-09-10 17:06:39)\nSaving /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2022-09-10 17:06:39)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/\n\n\nDetermining graph multiplicity (2022-09-10 17:06:39)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/222/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2022-09-10 17:06:39)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2022-09-10 17:06:39)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2022-09-10 17:06:39)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2022-09-10 17:06:39)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2022-09-10 17:06:39)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2022-09-10 17:06:39)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2022-09-10 17:06:39)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/222/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/222/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/222/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/222/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/222/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/005_polished.gfa\n\n\nRotating completed replicons (2022-09-10 17:06:44)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2022-09-10 17:06:54)\nSaving /galaxy/server/database/jobs_directory/000/222/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/222/working/assembly.fasta\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2022-09-10 17:05:44)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/222/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon                               not used                                          \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2022-09-10 17:05:46)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2022-09-10 17:05:46)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/222/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/222/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/222/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/222/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/222/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/222/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.096    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.096    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.098    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.098    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.098    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.144    24M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.153    24M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.153    24M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.153    24M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.153    24M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.154    24M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.154    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.154    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.331    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.332    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.390    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.390    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.427    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.427    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.428    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.428    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.429    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.429    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.884     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:00.884     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:00.892    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.114    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.115    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.234    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.268    38M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.289    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.290    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.295    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.296    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.296    38M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.296    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.305    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.305    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.305    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.306    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.308    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.313    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.316    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.319    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.321    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.321    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.321    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.333    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.333    39M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.419    39M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.421    39M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.426    39M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.426    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.426    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.426    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.426    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.510    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.714    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.200    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:02.764    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:03.724    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:03.724    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:03.726    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:03.726    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:03.726    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:03.726    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:03.726    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:03.726    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:03.727    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:03.727    39M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:03.727    39M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:03.727    39M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:03\n..\n    : 246)   Deduplicating paths\n  0:00:04.723    31M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:04.723    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:04.723    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:04.723    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:04.723    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:04.723    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:04.723    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:04.724    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:04.724    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:04.724    31M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:04.724    31M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:04.724    31M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:04.724    31M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:04.729    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:04.729    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:04.734    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:04.734    31M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:04.738    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:04.740    31M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:04.743    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:04.746    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:04.753    31M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:04.755    31M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 4 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:04.721    32M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2022-09-10 17:06:39)\nFilter by read depth        (2022-09-10 17:06:39)\nFilter homopolymer loops    (2022-09-10 17:06:39)\nMerge all possible          (2022-09-10 17:06:39)\nNormalise read depths       (2022-09-10 17:06:39)\nRemove zero length segments (2022-09-10 17:06:39)\nSort link order             (2022-09-10 17:06:39)\nGraph cleaning finished     (2022-09-10 17:06:39)\nSaving /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2022-09-10 17:06:39)\nFilter by read depth        (2022-09-10 17:06:39)\nFilter homopolymer loops    (2022-09-10 17:06:39)\nMerge all possible          (2022-09-10 17:06:39)\nNormalise read depths       (2022-09-10 17:06:39)\nRemove zero length segments (2022-09-10 17:06:39)\nSort link order             (2022-09-10 17:06:39)\nGraph cleaning finished     (2022-09-10 17:06:39)\nSaving /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2022-09-10 17:06:39)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/\n\n\nDetermining graph multiplicity (2022-09-10 17:06:39)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/222/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2022-09-10 17:06:39)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2022-09-10 17:06:39)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2022-09-10 17:06:39)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2022-09-10 17:06:39)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2022-09-10 17:06:39)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2022-09-10 17:06:39)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2022-09-10 17:06:39)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/222/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/222/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/222/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/222/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/222/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/005_polished.gfa\n\n\nRotating completed replicons (2022-09-10 17:06:44)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2022-09-10 17:06:54)\nSaving /galaxy/server/database/jobs_directory/000/222/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/222/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "70.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:06:54", "plugin": "core", "name": "end_epoch", "raw_value": "1662829614.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:05:44", "plugin": "core", "name": "start_epoch", "raw_value": "1662829544.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0", "test_index": 1, "time_seconds": 360.40711545944214, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "7ebfc0e3c1767ca1"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "c531fe8ea5a4fe79"}, "paired_unpaired|fastq_input_selector": "paired", "long": {"src": "hda", "id": "34666296b7f744f4"}, "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": false, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "a25c6aeafa1149a2", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:10:14.616506", "create_time": "2022-09-10T17:04:29.983877", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-tl88m", "command_line": "ln -s '/galaxy/server/database/objects/d/b/c/dataset_dbce2eb3-34be-441f-9f9c-2f9b4449b82f.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/a/f/1/dataset_af1a2d8c-acd0-41c4-bf8b-8756e6e488cf.dat' fq2.fastq && ln -s '/galaxy/server/database/objects/8/f/4/dataset_8f496fe3-66dc-417d-87ae-a0ee6a022904.dat' 'lr.fasta' && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq' -2 'fq2.fastq' -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 267, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 268, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"fastq_input1": {"id": "7ebfc0e3c1767ca1", "src": "hda", "uuid": "dbce2eb3-34be-441f-9f9c-2f9b4449b82f"}, "fastq_input2": {"id": "c531fe8ea5a4fe79", "src": "hda", "uuid": "af1a2d8c-acd0-41c4-bf8b-8756e6e488cf"}, "long": {"id": "34666296b7f744f4", "src": "hda", "uuid": "8f496fe3-66dc-417d-87ae-a0ee6a022904"}}, "outputs": {"assembly": {"id": "807b6ce0fb3fef50", "src": "hda", "uuid": "6546371d-48fd-4e82-ac5b-ee11a8ccb6c7"}, "assembly_graph": {"id": "29e8312d90efdca9", "src": "hda", "uuid": "906e0922-d241-4bdc-bf05-a3f4a63bc18b"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2022-09-10 17:08:38)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/228/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon           1.4.20              good       /usr/local/bin/racon                   \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2022-09-10 17:08:40)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2022-09-10 17:08:40)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/228/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/228/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/228/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/228/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/228/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/228/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.010     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.010     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.141    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.141    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.147    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.147    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.153    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.244    24M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.284    24M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.284    24M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.285    24M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.287    24M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.290    24M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.290    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.290    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.813    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.813    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.103    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.104    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.258    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:01.260    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.260    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.262    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.262    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:01.262    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:03.230     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:03.230     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:03.244    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:04.368    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:04.369    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.959    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:05.067    33M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:05.178    33M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:05.178    33M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:05.186    33M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:05.187    33M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:05.187    33M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:05.187    33M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:05.199    33M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:05.199    33M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:05.199    33M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:05.199    33M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:05.208    33M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:05.215    33M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:05.220    33M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:05.224    33M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:05.226    32M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:05.226    32M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:05.226    32M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:05.259    32M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:05.260    33M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:05.361    33M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:05.363    33M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:05.374    33M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:05.374    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:05.375    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:05.375    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:05.375    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:05.470    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:05.732    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:06.324    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:07.025    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:08.191    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:08.192    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:08.193    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:08.194    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:08.194    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:08.194    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:08.195    33M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:08.195    33M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:08.196    33M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:08.199    33M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:08.199    33M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:08.200    33M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:08.2\n..\nworking/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:04.745    33M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2022-09-10 17:09:46)\nFilter by read depth        (2022-09-10 17:09:46)\nFilter homopolymer loops    (2022-09-10 17:09:46)\nMerge all possible          (2022-09-10 17:09:46)\nNormalise read depths       (2022-09-10 17:09:46)\nRemove zero length segments (2022-09-10 17:09:46)\nSort link order             (2022-09-10 17:09:46)\nGraph cleaning finished     (2022-09-10 17:09:46)\nSaving /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2022-09-10 17:09:46)\nFilter by read depth        (2022-09-10 17:09:46)\nFilter homopolymer loops    (2022-09-10 17:09:46)\nMerge all possible          (2022-09-10 17:09:46)\nNormalise read depths       (2022-09-10 17:09:46)\nRemove zero length segments (2022-09-10 17:09:46)\nSort link order             (2022-09-10 17:09:46)\nGraph cleaning finished     (2022-09-10 17:09:46)\nSaving /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2022-09-10 17:09:46)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/\n\n\nDetermining graph multiplicity (2022-09-10 17:09:46)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/228/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2022-09-10 17:09:46)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/228/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2022-09-10 17:09:46)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2022-09-10 17:09:46)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2022-09-10 17:09:46)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2022-09-10 17:09:46)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/228/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/228/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2022-09-10 17:09:46)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/228/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2022-09-10 17:09:46)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2022-09-10 17:09:46)\n1\t5386\t5\t5077\t-\t1\t5386\t8\t5080\t5072\t5072\t255\tcm:i:945\n1\t5386\t5093\t5384\t-\t1\t5386\t5087\t5378\t291\t291\t255\tcm:i:52\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2022-09-10 17:09:46)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5077,-,1,8,5080\n    5093,5384,-,1,5087,5378\nReference ranges:\n    1-: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 5076 points, score=5074.000394 (good)\n    line 2: 292 points, score=290.006826 (good)\nAll Seqan alignments (time to align = 0.037 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\n\n\nRead alignment summary (2022-09-10 17:09:47)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/228/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2022-09-10 17:09:47)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2022-09-10 17:09:47)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/228/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2022-09-10 17:09:47)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2022-09-10 17:09:47)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/228/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2022-09-10 17:09:47)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/228/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/228/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/228/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/228/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/228/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nPilon polish round 2\n  bowtie2-build 2_polish_input.fasta 2_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 2_polish_input.fasta -S 2_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/228/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/228/working/fq2.fastq\n  samtools sort -@ 4 -o 2_paired_alignments.bam -O bam -T temp 2_paired_alignments.sam\n  samtools index 2_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 2_polish_input.fasta --changes --output 2_pilon --outdir /galaxy/server/database/jobs_directory/000/228/working/pilon_polish --fix all --frags 2_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/228/working/005_polished.gfa\n\n\nRotating completed replicons (2022-09-10 17:09:56)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2022-09-10 17:10:06)\nSaving /galaxy/server/database/jobs_directory/000/228/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/228/working/assembly.fasta\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2022-09-10 17:08:38)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/228/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon           1.4.20              good       /usr/local/bin/racon                   \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2022-09-10 17:08:40)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2022-09-10 17:08:40)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/228/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/228/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/228/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/228/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/228/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/228/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.010     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.010     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.141    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.141    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.147    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.147    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.153    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.244    24M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.284    24M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.284    24M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.285    24M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.287    24M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.290    24M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.290    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.290    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.813    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.813    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.103    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.104    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.258    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:01.260    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.260    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.262    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.262    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:01.262    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:03.230     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:03.230     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:03.244    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:04.368    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:04.369    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.959    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:05.067    33M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:05.178    33M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:05.178    33M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:05.186    33M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:05.187    33M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:05.187    33M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:05.187    33M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:05.199    33M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:05.199    33M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:05.199    33M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:05.199    33M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:05.208    33M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:05.215    33M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:05.220    33M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:05.224    33M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:05.226    32M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:05.226    32M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:05.226    32M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:05.259    32M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:05.260    33M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:05.361    33M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:05.363    33M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:05.374    33M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:05.374    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:05.375    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:05.375    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:05.375    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:05.470    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:05.732    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:06.324    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:07.025    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:08.191    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:08.192    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:08.193    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:08.194    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:08.194    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:08.194    33M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:08.195    33M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:08.195    33M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:08.196    33M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:08.199    33M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:08.199    33M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:08.200    33M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:08.2\n..\nworking/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:04.745    33M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2022-09-10 17:09:46)\nFilter by read depth        (2022-09-10 17:09:46)\nFilter homopolymer loops    (2022-09-10 17:09:46)\nMerge all possible          (2022-09-10 17:09:46)\nNormalise read depths       (2022-09-10 17:09:46)\nRemove zero length segments (2022-09-10 17:09:46)\nSort link order             (2022-09-10 17:09:46)\nGraph cleaning finished     (2022-09-10 17:09:46)\nSaving /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2022-09-10 17:09:46)\nFilter by read depth        (2022-09-10 17:09:46)\nFilter homopolymer loops    (2022-09-10 17:09:46)\nMerge all possible          (2022-09-10 17:09:46)\nNormalise read depths       (2022-09-10 17:09:46)\nRemove zero length segments (2022-09-10 17:09:46)\nSort link order             (2022-09-10 17:09:46)\nGraph cleaning finished     (2022-09-10 17:09:46)\nSaving /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2022-09-10 17:09:46)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/\n\n\nDetermining graph multiplicity (2022-09-10 17:09:46)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/228/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2022-09-10 17:09:46)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/228/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2022-09-10 17:09:46)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2022-09-10 17:09:46)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2022-09-10 17:09:46)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2022-09-10 17:09:46)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/228/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/228/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2022-09-10 17:09:46)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/228/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2022-09-10 17:09:46)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2022-09-10 17:09:46)\n1\t5386\t5\t5077\t-\t1\t5386\t8\t5080\t5072\t5072\t255\tcm:i:945\n1\t5386\t5093\t5384\t-\t1\t5386\t5087\t5378\t291\t291\t255\tcm:i:52\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2022-09-10 17:09:46)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5077,-,1,8,5080\n    5093,5384,-,1,5087,5378\nReference ranges:\n    1-: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 5076 points, score=5074.000394 (good)\n    line 2: 292 points, score=290.006826 (good)\nAll Seqan alignments (time to align = 0.037 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\n\n\nRead alignment summary (2022-09-10 17:09:47)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/228/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2022-09-10 17:09:47)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2022-09-10 17:09:47)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/228/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2022-09-10 17:09:47)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2022-09-10 17:09:47)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/228/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2022-09-10 17:09:47)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/228/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/228/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/228/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/228/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/228/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nPilon polish round 2\n  bowtie2-build 2_polish_input.fasta 2_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 2_polish_input.fasta -S 2_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/228/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/228/working/fq2.fastq\n  samtools sort -@ 4 -o 2_paired_alignments.bam -O bam -T temp 2_paired_alignments.sam\n  samtools index 2_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 2_polish_input.fasta --changes --output 2_pilon --outdir /galaxy/server/database/jobs_directory/000/228/working/pilon_polish --fix all --frags 2_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/228/working/005_polished.gfa\n\n\nRotating completed replicons (2022-09-10 17:09:56)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2022-09-10 17:10:06)\nSaving /galaxy/server/database/jobs_directory/000/228/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/228/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "88.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:10:06", "plugin": "core", "name": "end_epoch", "raw_value": "1662829806.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:08:38", "plugin": "core", "name": "start_epoch", "raw_value": "1662829718.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0", "test_index": 2, "time_seconds": 270.2177231311798, "inputs": {"paired_unpaired|fastq_input1": {"src": "hdca", "id": "43a0297637d6aa03"}, "paired_unpaired|fastq_input_selector": "paired_collection", "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": true, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "8b8bb5aa33357d14", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:08:45.460413", "create_time": "2022-09-10T17:04:37.379396", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-smchk", "command_line": "ln -s '/galaxy/server/database/objects/d/b/c/dataset_dbce2eb3-34be-441f-9f9c-2f9b4449b82f.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/a/f/1/dataset_af1a2d8c-acd0-41c4-bf8b-8756e6e488cf.dat' fq2.fastq && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq' -2 'fq2.fastq' --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --no_pilon --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"true\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "long": null, "paired_unpaired": "{\"__current_case__\": 1, \"fastq_input1\": {\"values\": [{\"id\": 4, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}"}, "inputs": {"fastq_input11": {"id": "7ebfc0e3c1767ca1", "src": "hda", "uuid": "dbce2eb3-34be-441f-9f9c-2f9b4449b82f"}, "fastq_input12": {"id": "c531fe8ea5a4fe79", "src": "hda", "uuid": "af1a2d8c-acd0-41c4-bf8b-8756e6e488cf"}}, "outputs": {"assembly": {"id": "78255b04ff0c6e73", "src": "hda", "uuid": "16f43e5b-5217-4a28-b3ba-323aaacd2b65"}, "assembly_graph": {"id": "b4c7162faa7005bd", "src": "hda", "uuid": "084c078e-3411-45d2-a6bb-a9322dd2b115"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2022-09-10 17:07:00)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --no_pilon --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/229/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py       3.14.1    good       /usr/local/bin/spades.py  \n  racon                     not used                             \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nChoosing k-mer range for assembly (2022-09-10 17:07:00)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2022-09-10 17:07:00)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/229/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/229/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/229/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/229/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/229/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/229/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.096    86M / 86M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.096    62M / 62M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.098    72M / 72M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.098    72M / 72M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.098    72M / 72M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.124    24M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.130    24M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.130    24M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.130    24M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.131    24M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.132    24M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.132    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.132    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.300    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.300    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.353    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.354    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.388    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.389    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.389    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.390    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.390    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.391    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.856     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:00.856     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:00.863    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.064    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.064    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.183    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.210    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.234    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.234    43M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.238    43M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.241    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.241    43M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.241    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.249    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.250    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.250    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.250    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.253    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.257    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.259    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.262    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.264    44M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.265    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.265    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.277    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.277    44M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.355    44M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.357    44M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.360    44M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.361    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.361    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.361    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.361    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.449    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.656    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.143    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:02.715    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:03.694    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:03.694    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:03.696    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:03.696    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:03.696    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:03.696    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:03.696    44M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:03.696    44M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:03.696    44M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:03.697    44M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:03.697    44M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:03.697    44M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:03.697    44M / 57M   INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:03.697    44M / 57M   INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge r\n..\noverlaps\n  0:00:15.691    29M / 98M   INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:15.692    29M / 98M   INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:15.692    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:15.692    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:15.692    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 439)   Closing gaps in paths\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 467)   Gap closing completed\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 296)   Traversing tandem repeats\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 306)   Traversed 0 loops\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 244)   Finalizing paths\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 246)   Deduplicating paths\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:15.692    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:15.692    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:15.693    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:15.693    29M / 98M   INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:15.693    29M / 98M   INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:15.693    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:15.693    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:15.693    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:15.693    29M / 98M   INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:15.694    29M / 98M   INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:15.694    29M / 98M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:15.694    29M / 98M   INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:15.713    29M / 98M   INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:15.713    29M / 98M   INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:15.727    29M / 98M   INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:15.728    29M / 98M   INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:15.741    29M / 98M   INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:15.753    29M / 98M   INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:15.772    29M / 98M   INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:15.786    29M / 98M   INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:15.815    29M / 98M   INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:15.825    29M / 98M   INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 15 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:15.689    29M / 98M   WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2022-09-10 17:08:19)\nFilter by read depth        (2022-09-10 17:08:19)\nFilter homopolymer loops    (2022-09-10 17:08:19)\nMerge all possible          (2022-09-10 17:08:19)\nNormalise read depths       (2022-09-10 17:08:19)\nRemove zero length segments (2022-09-10 17:08:19)\nSort link order             (2022-09-10 17:08:19)\nGraph cleaning finished     (2022-09-10 17:08:19)\nSaving /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2022-09-10 17:08:19)\nFilter by read depth        (2022-09-10 17:08:19)\nFilter homopolymer loops    (2022-09-10 17:08:19)\nMerge all possible          (2022-09-10 17:08:19)\nNormalise read depths       (2022-09-10 17:08:19)\nRemove zero length segments (2022-09-10 17:08:19)\nSort link order             (2022-09-10 17:08:19)\nGraph cleaning finished     (2022-09-10 17:08:19)\nSaving /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2022-09-10 17:08:19)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/\n\n\nDetermining graph multiplicity (2022-09-10 17:08:19)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/229/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2022-09-10 17:08:19)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/229/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2022-09-10 17:08:19)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2022-09-10 17:08:19)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2022-09-10 17:08:19)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/229/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2022-09-10 17:08:19)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2022-09-10 17:08:19)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/229/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2022-09-10 17:08:19)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2022-09-10 17:08:33)\nSaving /galaxy/server/database/jobs_directory/000/229/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/229/working/assembly.fasta\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2022-09-10 17:07:00)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --no_pilon --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/229/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py       3.14.1    good       /usr/local/bin/spades.py  \n  racon                     not used                             \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nChoosing k-mer range for assembly (2022-09-10 17:07:00)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2022-09-10 17:07:00)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/229/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/229/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/229/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/229/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/229/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/229/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.096    86M / 86M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.096    62M / 62M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.098    72M / 72M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.098    72M / 72M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.098    72M / 72M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.124    24M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.130    24M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.130    24M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.130    24M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.131    24M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.132    24M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.132    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.132    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.300    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.300    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.353    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.354    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.388    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.389    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.389    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.390    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.390    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.391    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.856     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:00.856     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:00.863    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.064    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.064    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.183    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.210    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.234    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.234    43M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.238    43M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.241    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.241    43M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.241    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.249    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.250    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.250    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.250    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.253    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.257    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.259    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.262    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.264    44M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.265    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.265    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.277    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.277    44M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.355    44M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.357    44M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.360    44M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.361    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.361    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.361    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.361    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.449    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.656    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.143    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:02.715    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:03.694    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:03.694    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:03.696    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:03.696    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:03.696    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:03.696    44M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:03.696    44M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:03.696    44M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:03.696    44M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:03.697    44M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:03.697    44M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:03.697    44M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:03.697    44M / 57M   INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:03.697    44M / 57M   INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge r\n..\noverlaps\n  0:00:15.691    29M / 98M   INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:15.692    29M / 98M   INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:15.692    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:15.692    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:15.692    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 439)   Closing gaps in paths\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 467)   Gap closing completed\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 296)   Traversing tandem repeats\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 306)   Traversed 0 loops\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 244)   Finalizing paths\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 246)   Deduplicating paths\n  0:00:15.692    29M / 98M   INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:15.692    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:15.692    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:15.693    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:15.693    29M / 98M   INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:15.693    29M / 98M   INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:15.693    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:15.693    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:15.693    29M / 98M   INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:15.693    29M / 98M   INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:15.694    29M / 98M   INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:15.694    29M / 98M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:15.694    29M / 98M   INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:15.713    29M / 98M   INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:15.713    29M / 98M   INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:15.727    29M / 98M   INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:15.728    29M / 98M   INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:15.741    29M / 98M   INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:15.753    29M / 98M   INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:15.772    29M / 98M   INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:15.786    29M / 98M   INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:15.815    29M / 98M   INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:15.825    29M / 98M   INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 15 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:15.689    29M / 98M   WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2022-09-10 17:08:19)\nFilter by read depth        (2022-09-10 17:08:19)\nFilter homopolymer loops    (2022-09-10 17:08:19)\nMerge all possible          (2022-09-10 17:08:19)\nNormalise read depths       (2022-09-10 17:08:19)\nRemove zero length segments (2022-09-10 17:08:19)\nSort link order             (2022-09-10 17:08:19)\nGraph cleaning finished     (2022-09-10 17:08:19)\nSaving /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2022-09-10 17:08:19)\nFilter by read depth        (2022-09-10 17:08:19)\nFilter homopolymer loops    (2022-09-10 17:08:19)\nMerge all possible          (2022-09-10 17:08:19)\nNormalise read depths       (2022-09-10 17:08:19)\nRemove zero length segments (2022-09-10 17:08:19)\nSort link order             (2022-09-10 17:08:19)\nGraph cleaning finished     (2022-09-10 17:08:19)\nSaving /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2022-09-10 17:08:19)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/\n\n\nDetermining graph multiplicity (2022-09-10 17:08:19)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/229/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2022-09-10 17:08:19)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/229/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2022-09-10 17:08:19)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2022-09-10 17:08:19)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2022-09-10 17:08:19)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/229/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2022-09-10 17:08:19)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2022-09-10 17:08:19)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/229/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2022-09-10 17:08:19)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2022-09-10 17:08:33)\nSaving /galaxy/server/database/jobs_directory/000/229/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/229/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "94.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:08:33", "plugin": "core", "name": "end_epoch", "raw_value": "1662829713.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:06:59", "plugin": "core", "name": "start_epoch", "raw_value": "1662829619.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0", "test_index": 3, "time_seconds": 311.76917243003845, "inputs": {"paired_unpaired|fastq_input_selector": "none", "long": {"src": "hda", "id": "c419014a9ebedccc"}, "min_anchor_seg_len": "10", "spades|kmers": "21,23"}, "job": {"model_class": "Job", "id": "127d318825a0a258", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:10:22.382524", "create_time": "2022-09-10T17:05:19.692783", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-vmpnj", "command_line": "ln -s '/galaxy/server/database/objects/1/4/f/dataset_14f3f86c-6d5a-4f61-b28e-2e2139c74338.dat' 'lr.fasta' && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_anchor_seg_len '10'  --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmers '21,23' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"21,23\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"false\"}", "min_anchor_seg_len": "\"10\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 3, \"fastq_input_selector\": \"none\"}"}, "inputs": {"long": {"id": "c419014a9ebedccc", "src": "hda", "uuid": "14f3f86c-6d5a-4f61-b28e-2e2139c74338"}}, "outputs": {"assembly": {"id": "a3958d2b64d4cd56", "src": "hda", "uuid": "67cf4ad0-a920-4faa-a1f4-9c0976c276df"}, "assembly_graph": {"id": "e6bef8b6ef47df8c", "src": "hda", "uuid": "3faad537-a5d4-4b7d-b042-47adb9f1bef3"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2022-09-10 17:10:10)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only long reads, Unicycler will assemble the reads with miniasm and\nthen run repeated polishing rounds using Racon.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/231/working\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py                 not used                             \n  racon           1.4.20    good       /usr/local/bin/racon      \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nLoading reads (2022-09-10 17:10:10)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2022-09-10 17:10:10)\nSaving to /galaxy/server/database/jobs_directory/000/231/working/miniasm_assembly/01_assembly_reads.fastq:\n  40 long reads\n\nFinding overlaps with minimap... success\n  120 overlaps\n\nAssembling reads with miniasm... success\n  7 segments, 6 links\n\n    Unicycler removes any links from the string graph which create branches.\nI.e. if any segment has two or more links connected to one end, those links are\nremoved. This will result in a graph with only simple linear paths that is\nsuitable for creating unambiguous bridges.\n\nNo links needed removal\nSaving /galaxy/server/database/jobs_directory/000/231/working/miniasm_assembly/11_branching_paths_removed.gfa\nMerging segments into unitigs:\n\nLinear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-\n\n  1 linear unitig\n  total size = 5,836 bp\nSaving /galaxy/server/database/jobs_directory/000/231/working/miniasm_assembly/12_unitig_graph.gfa\nSaving /galaxy/server/database/jobs_directory/000/231/working/002_unitig_graph.gfa\n\n\nPolishing miniasm assembly with Racon (2022-09-10 17:10:11)\n    Unicycler now uses Racon to polish the miniasm assembly. It does multiple\nrounds of polishing to get the best consensus. Circular unitigs are rotated\nbetween rounds such that all parts (including the ends) are polished well.\n\nSaving to /galaxy/server/database/jobs_directory/000/231/working/miniasm_assembly/racon_polish/polishing_reads.fastq:\n  40 long reads\n\nPolish       Assembly          Mapping\nround            size          quality\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t210\t4010\t+\t1\t5836\t1061\t4603\t1147\t3800\t255\tcm:i:200\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t5836\t5221\t5833\t179\t612\t255\tcm:i:27\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t5836\t2376\t5833\t3457\t3457\t255\tcm:i:1153\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2525\t-\t1\t5836\t30\t2314\t787\t2399\t255\tcm:i:144\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t280\t4284\t-\t1\t5836\t4\t3936\t1481\t4004\t255\tcm:i:246\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4286\t-\t1\t5836\t4215\t5833\t546\t1618\t255\tcm:i:88\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t170\t4027\t+\t1\t5836\t1680\t5833\t1032\t4153\t255\tcm:i:174\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4082\t+\t1\t5836\t4\t1602\t220\t1598\t255\tcm:i:30\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1334\t4566\t-\t1\t5836\t2699\t5786\t1281\t3232\t255\tcm:i:243\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t5836\t50\t2663\t772\t2680\t255\tcm:i:129\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t5836\t2657\t5833\t1469\t3386\t255\tcm:i:268\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2786\t-\t1\t5836\t30\t2636\t905\t2689\t255\tcm:i:157\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t143\t4271\t-\t1\t5836\t338\t4254\t1834\t4128\t255\tcm:i:470\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3092\t4330\t-\t1\t5836\t4503\t5798\t430\t1295\t255\tcm:i:77\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t544\t4408\t-\t1\t5836\t69\t3927\t1208\t3864\t255\tcm:i:237\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3008\t4472\t-\t1\t5836\t4215\t5748\t351\t1533\t255\tcm:i:53\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t5836\t2909\t3222\t131\t313\t255\tcm:i:22\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t335\t4397\t+\t1\t5836\t1321\t5257\t1351\t4062\t255\tcm:i:280\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4349\t+\t1\t5836\t23\t961\t238\t938\t255\tcm:i:40\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t537\t+\t1\t5836\t5334\t5798\t154\t464\t255\tcm:i:26\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t111\t4359\t-\t1\t5836\t1673\t5798\t2062\t4248\t255\tcm:i:487\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t109\t1619\t-\t1\t5836\t30\t1525\t472\t1510\t255\tcm:i:68\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t5836\t1733\t5833\t1303\t4100\t255\tcm:i:230\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t5836\t4\t1690\t311\t1712\t255\tcm:i:43\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4205\t+\t1\t5836\t23\t3939\t1039\t3916\t255\tcm:i:166\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t296\t1782\t+\t1\t5836\t4242\t5798\t367\t1556\t255\tcm:i:63\nbegin           5,836             5.33\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6290\t1009\t5054\t2431\t4045\t255\tcm:i:529\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6290\t5670\t6287\t297\t617\t255\tcm:i:63\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6290\t4\t404\t122\t400\t255\tcm:i:19\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6290\t2540\t6287\t2249\t3747\t255\tcm:i:527\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6290\t51\t2474\t1276\t2423\t255\tcm:i:245\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6290\t4\t4316\t2322\t4312\t255\tcm:i:486\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6290\t4354\t6287\t943\t1933\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t116\t4027\t+\t1\t6290\t1774\t6287\t2145\t4513\t255\tcm:i:426\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6290\t4\t1741\t421\t1737\t255\tcm:i:61\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6290\t2854\t6226\t2257\t3372\t255\tcm:i:501\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6290\t51\t2831\t1459\t2780\t255\tcm:i:289\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6290\t2825\t6287\t2268\t3462\t255\tcm:i:513\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2745\t-\t1\t6290\t74\t2805\t1501\t2731\t255\tcm:i:289\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6290\t354\t4699\t2022\t4345\t255\tcm:i:377\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6290\t4984\t6271\t614\t1287\t255\tcm:i:117\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6290\t72\t4534\t1921\t4462\t255\tcm:i:337\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6290\t4597\t6206\t580\t1609\t255\tcm:i:103\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6290\t3083\t3386\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6290\t1126\t5708\t2368\t4582\t255\tcm:i:487\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4392\t+\t1\t6290\t23\t1039\t362\t1016\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t539\t+\t1\t6290\t5785\t6254\t217\t469\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6290\t1806\t6258\t2777\t4452\t255\tcm:i:600\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6290\t74\t1603\t761\t1529\t255\tcm:i:150\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t795\t+\t1\t6290\t5209\t5912\t149\t703\t255\tcm:i:24\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6290\t585\t1307\t155\t722\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t6290\t1886\t6287\t2070\t4401\t255\tcm:i:456\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6290\t4\t1838\t656\t1834\t255\tcm:i:109\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6290\t2060\t2358\t156\t298\t255\tcm:i:35\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6290\t23\t4436\t2106\t4413\t255\tcm:i:421\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6290\t4488\t6273\t744\t1785\t255\tcm:i:131\n1               6,290             7.82\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6242\t1016\t5009\t2460\t3993\t255\tcm:i:530\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6242\t5626\t6239\t283\t613\t255\tcm:i:61\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6242\t4\t408\t117\t404\t255\tcm:i:18\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6242\t2535\t6239\t2234\t3704\t255\tcm:i:514\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6242\t51\t2469\t1387\t2418\t255\tcm:i:271\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6242\t4\t4276\t2380\t4272\t255\tcm:i:494\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6242\t4314\t6239\t955\t1925\t255\tcm:i:196\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6242\t1759\t6239\t2194\t4480\t255\tcm:i:440\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6242\t4\t1735\t450\t1731\t255\tcm:i:67\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6242\t2848\t6178\t2284\t3330\t255\tcm:i:509\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6242\t51\t2825\t1504\t2774\t255\tcm:i:295\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6242\t2819\t6239\t2235\t3420\t255\tcm:i:510\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t109\t2745\t-\t1\t6242\t74\t2787\t1517\t2713\t255\tcm:i:304\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6242\t358\t4659\t2051\t4301\t255\tcm:i:391\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6242\t4939\t6223\t618\t1284\t255\tcm:i:114\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6242\t72\t4493\t1941\t4421\t255\tcm:i:345\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6242\t4556\t6158\t579\t1602\t255\tcm:i:105\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6242\t3077\t3380\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6242\t1133\t5664\t2405\t4531\t255\tcm:i:507\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6242\t23\t1051\t353\t1028\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6242\t5759\t6206\t204\t447\t255\tcm:i:40\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6242\t1799\t6210\t2749\t4411\t255\tcm:i:591\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6242\t74\t1601\t795\t1527\t255\tcm:i:165\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6242\t5166\t5916\t224\t750\t255\tcm:i:35\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t160\t847\t+\t1\t6242\t602\t1310\t144\t708\t255\tcm:i:16\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6242\t1908\t6239\t2061\t4331\t255\tcm:i:454\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6242\t4\t1831\t667\t1827\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6242\t2053\t2352\t157\t299\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6242\t23\t4395\t2130\t4372\t255\tcm:i:425\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6242\t4447\t6225\t762\t1778\t255\tcm:i:138\n2               6,242             8.02\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6265\t1028\t5025\t2436\t3997\t255\tcm:i:527\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6265\t5642\t6262\t281\t620\t255\tcm:i:59\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6265\t4\t408\t105\t404\t255\tcm:i:17\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6265\t2544\t6262\t2228\t3718\t255\tcm:i:507\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6265\t51\t2478\t1353\t2427\t255\tcm:i:260\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6265\t4\t4293\t2377\t4289\t255\tcm:i:492\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6265\t4331\t6262\t967\t1931\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6265\t1772\t6262\t2190\t4490\t255\tcm:i:436\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6265\t4\t1748\t448\t1744\t255\tcm:i:62\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6265\t2857\t6201\t2270\t3344\t255\tcm:i:503\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6265\t51\t2834\t1463\t2783\t255\tcm:i:284\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6265\t2828\t6262\t2251\t3434\t255\tcm:i:515\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t102\t2745\t-\t1\t6265\t74\t2804\t1511\t2730\t255\tcm:i:305\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6265\t358\t4676\t2063\t4318\t255\tcm:i:392\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4328\t-\t1\t6265\t4930\t6246\t623\t1316\t255\tcm:i:113\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6265\t72\t4510\t1987\t4438\t255\tcm:i:350\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6265\t4573\t6181\t569\t1608\t255\tcm:i:102\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6265\t3089\t3392\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6265\t1145\t5680\t2423\t4535\t255\tcm:i:509\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6265\t23\t1063\t337\t1040\t255\tcm:i:56\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6265\t5779\t6229\t223\t450\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6265\t1812\t6233\t2769\t4421\t255\tcm:i:601\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6265\t74\t1615\t764\t1541\t255\tcm:i:156\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6265\t5182\t5936\t236\t754\t255\tcm:i:36\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6265\t589\t1322\t155\t733\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6265\t1921\t6262\t2062\t4341\t255\tcm:i:449\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6265\t4\t1844\t660\t1840\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6265\t2063\t2361\t157\t298\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6265\t23\t4412\t2182\t4389\t255\tcm:i:436\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6265\t4464\t6248\t787\t1784\t255\tcm:i:141\n3               6,265             8.04\n\nBest polish: /galaxy/server/database/jobs_directory/000/231/working/miniasm_assembly/racon_polish/016_rotated.fasta\nSaving /galaxy/server/database/jobs_directory/000/231/working/miniasm_assembly/13_racon_polished.gfa\nSaving /galaxy/server/database/jobs_directory/000/231/working/003_racon_polished.gfa\n\n\nAssembly complete (2022-09-10 17:10:11)\nSaving /galaxy/server/database/jobs_directory/000/231/working/assembly.gfa\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2022-09-10 17:10:10)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only long reads, Unicycler will assemble the reads with miniasm and\nthen run repeated polishing rounds using Racon.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/231/working\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py                 not used                             \n  racon           1.4.20    good       /usr/local/bin/racon      \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nLoading reads (2022-09-10 17:10:10)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2022-09-10 17:10:10)\nSaving to /galaxy/server/database/jobs_directory/000/231/working/miniasm_assembly/01_assembly_reads.fastq:\n  40 long reads\n\nFinding overlaps with minimap... success\n  120 overlaps\n\nAssembling reads with miniasm... success\n  7 segments, 6 links\n\n    Unicycler removes any links from the string graph which create branches.\nI.e. if any segment has two or more links connected to one end, those links are\nremoved. This will result in a graph with only simple linear paths that is\nsuitable for creating unambiguous bridges.\n\nNo links needed removal\nSaving /galaxy/server/database/jobs_directory/000/231/working/miniasm_assembly/11_branching_paths_removed.gfa\nMerging segments into unitigs:\n\nLinear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-\n\n  1 linear unitig\n  total size = 5,836 bp\nSaving /galaxy/server/database/jobs_directory/000/231/working/miniasm_assembly/12_unitig_graph.gfa\nSaving /galaxy/server/database/jobs_directory/000/231/working/002_unitig_graph.gfa\n\n\nPolishing miniasm assembly with Racon (2022-09-10 17:10:11)\n    Unicycler now uses Racon to polish the miniasm assembly. It does multiple\nrounds of polishing to get the best consensus. Circular unitigs are rotated\nbetween rounds such that all parts (including the ends) are polished well.\n\nSaving to /galaxy/server/database/jobs_directory/000/231/working/miniasm_assembly/racon_polish/polishing_reads.fastq:\n  40 long reads\n\nPolish       Assembly          Mapping\nround            size          quality\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t210\t4010\t+\t1\t5836\t1061\t4603\t1147\t3800\t255\tcm:i:200\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t5836\t5221\t5833\t179\t612\t255\tcm:i:27\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t5836\t2376\t5833\t3457\t3457\t255\tcm:i:1153\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2525\t-\t1\t5836\t30\t2314\t787\t2399\t255\tcm:i:144\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t280\t4284\t-\t1\t5836\t4\t3936\t1481\t4004\t255\tcm:i:246\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4286\t-\t1\t5836\t4215\t5833\t546\t1618\t255\tcm:i:88\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t170\t4027\t+\t1\t5836\t1680\t5833\t1032\t4153\t255\tcm:i:174\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4082\t+\t1\t5836\t4\t1602\t220\t1598\t255\tcm:i:30\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1334\t4566\t-\t1\t5836\t2699\t5786\t1281\t3232\t255\tcm:i:243\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t5836\t50\t2663\t772\t2680\t255\tcm:i:129\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t5836\t2657\t5833\t1469\t3386\t255\tcm:i:268\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2786\t-\t1\t5836\t30\t2636\t905\t2689\t255\tcm:i:157\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t143\t4271\t-\t1\t5836\t338\t4254\t1834\t4128\t255\tcm:i:470\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3092\t4330\t-\t1\t5836\t4503\t5798\t430\t1295\t255\tcm:i:77\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t544\t4408\t-\t1\t5836\t69\t3927\t1208\t3864\t255\tcm:i:237\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3008\t4472\t-\t1\t5836\t4215\t5748\t351\t1533\t255\tcm:i:53\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t5836\t2909\t3222\t131\t313\t255\tcm:i:22\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t335\t4397\t+\t1\t5836\t1321\t5257\t1351\t4062\t255\tcm:i:280\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4349\t+\t1\t5836\t23\t961\t238\t938\t255\tcm:i:40\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t537\t+\t1\t5836\t5334\t5798\t154\t464\t255\tcm:i:26\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t111\t4359\t-\t1\t5836\t1673\t5798\t2062\t4248\t255\tcm:i:487\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t109\t1619\t-\t1\t5836\t30\t1525\t472\t1510\t255\tcm:i:68\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t5836\t1733\t5833\t1303\t4100\t255\tcm:i:230\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t5836\t4\t1690\t311\t1712\t255\tcm:i:43\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4205\t+\t1\t5836\t23\t3939\t1039\t3916\t255\tcm:i:166\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t296\t1782\t+\t1\t5836\t4242\t5798\t367\t1556\t255\tcm:i:63\nbegin           5,836             5.33\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6290\t1009\t5054\t2431\t4045\t255\tcm:i:529\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6290\t5670\t6287\t297\t617\t255\tcm:i:63\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6290\t4\t404\t122\t400\t255\tcm:i:19\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6290\t2540\t6287\t2249\t3747\t255\tcm:i:527\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6290\t51\t2474\t1276\t2423\t255\tcm:i:245\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6290\t4\t4316\t2322\t4312\t255\tcm:i:486\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6290\t4354\t6287\t943\t1933\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t116\t4027\t+\t1\t6290\t1774\t6287\t2145\t4513\t255\tcm:i:426\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6290\t4\t1741\t421\t1737\t255\tcm:i:61\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6290\t2854\t6226\t2257\t3372\t255\tcm:i:501\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6290\t51\t2831\t1459\t2780\t255\tcm:i:289\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6290\t2825\t6287\t2268\t3462\t255\tcm:i:513\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2745\t-\t1\t6290\t74\t2805\t1501\t2731\t255\tcm:i:289\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6290\t354\t4699\t2022\t4345\t255\tcm:i:377\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6290\t4984\t6271\t614\t1287\t255\tcm:i:117\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6290\t72\t4534\t1921\t4462\t255\tcm:i:337\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6290\t4597\t6206\t580\t1609\t255\tcm:i:103\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6290\t3083\t3386\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6290\t1126\t5708\t2368\t4582\t255\tcm:i:487\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4392\t+\t1\t6290\t23\t1039\t362\t1016\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t539\t+\t1\t6290\t5785\t6254\t217\t469\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6290\t1806\t6258\t2777\t4452\t255\tcm:i:600\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6290\t74\t1603\t761\t1529\t255\tcm:i:150\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t795\t+\t1\t6290\t5209\t5912\t149\t703\t255\tcm:i:24\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6290\t585\t1307\t155\t722\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t6290\t1886\t6287\t2070\t4401\t255\tcm:i:456\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6290\t4\t1838\t656\t1834\t255\tcm:i:109\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6290\t2060\t2358\t156\t298\t255\tcm:i:35\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6290\t23\t4436\t2106\t4413\t255\tcm:i:421\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6290\t4488\t6273\t744\t1785\t255\tcm:i:131\n1               6,290             7.82\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6242\t1016\t5009\t2460\t3993\t255\tcm:i:530\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6242\t5626\t6239\t283\t613\t255\tcm:i:61\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6242\t4\t408\t117\t404\t255\tcm:i:18\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6242\t2535\t6239\t2234\t3704\t255\tcm:i:514\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6242\t51\t2469\t1387\t2418\t255\tcm:i:271\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6242\t4\t4276\t2380\t4272\t255\tcm:i:494\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6242\t4314\t6239\t955\t1925\t255\tcm:i:196\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6242\t1759\t6239\t2194\t4480\t255\tcm:i:440\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6242\t4\t1735\t450\t1731\t255\tcm:i:67\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6242\t2848\t6178\t2284\t3330\t255\tcm:i:509\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6242\t51\t2825\t1504\t2774\t255\tcm:i:295\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6242\t2819\t6239\t2235\t3420\t255\tcm:i:510\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t109\t2745\t-\t1\t6242\t74\t2787\t1517\t2713\t255\tcm:i:304\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6242\t358\t4659\t2051\t4301\t255\tcm:i:391\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6242\t4939\t6223\t618\t1284\t255\tcm:i:114\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6242\t72\t4493\t1941\t4421\t255\tcm:i:345\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6242\t4556\t6158\t579\t1602\t255\tcm:i:105\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6242\t3077\t3380\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6242\t1133\t5664\t2405\t4531\t255\tcm:i:507\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6242\t23\t1051\t353\t1028\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6242\t5759\t6206\t204\t447\t255\tcm:i:40\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6242\t1799\t6210\t2749\t4411\t255\tcm:i:591\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6242\t74\t1601\t795\t1527\t255\tcm:i:165\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6242\t5166\t5916\t224\t750\t255\tcm:i:35\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t160\t847\t+\t1\t6242\t602\t1310\t144\t708\t255\tcm:i:16\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6242\t1908\t6239\t2061\t4331\t255\tcm:i:454\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6242\t4\t1831\t667\t1827\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6242\t2053\t2352\t157\t299\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6242\t23\t4395\t2130\t4372\t255\tcm:i:425\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6242\t4447\t6225\t762\t1778\t255\tcm:i:138\n2               6,242             8.02\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6265\t1028\t5025\t2436\t3997\t255\tcm:i:527\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6265\t5642\t6262\t281\t620\t255\tcm:i:59\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6265\t4\t408\t105\t404\t255\tcm:i:17\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6265\t2544\t6262\t2228\t3718\t255\tcm:i:507\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6265\t51\t2478\t1353\t2427\t255\tcm:i:260\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6265\t4\t4293\t2377\t4289\t255\tcm:i:492\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6265\t4331\t6262\t967\t1931\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6265\t1772\t6262\t2190\t4490\t255\tcm:i:436\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6265\t4\t1748\t448\t1744\t255\tcm:i:62\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6265\t2857\t6201\t2270\t3344\t255\tcm:i:503\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6265\t51\t2834\t1463\t2783\t255\tcm:i:284\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6265\t2828\t6262\t2251\t3434\t255\tcm:i:515\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t102\t2745\t-\t1\t6265\t74\t2804\t1511\t2730\t255\tcm:i:305\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6265\t358\t4676\t2063\t4318\t255\tcm:i:392\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4328\t-\t1\t6265\t4930\t6246\t623\t1316\t255\tcm:i:113\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6265\t72\t4510\t1987\t4438\t255\tcm:i:350\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6265\t4573\t6181\t569\t1608\t255\tcm:i:102\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6265\t3089\t3392\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6265\t1145\t5680\t2423\t4535\t255\tcm:i:509\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6265\t23\t1063\t337\t1040\t255\tcm:i:56\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6265\t5779\t6229\t223\t450\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6265\t1812\t6233\t2769\t4421\t255\tcm:i:601\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6265\t74\t1615\t764\t1541\t255\tcm:i:156\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6265\t5182\t5936\t236\t754\t255\tcm:i:36\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6265\t589\t1322\t155\t733\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6265\t1921\t6262\t2062\t4341\t255\tcm:i:449\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6265\t4\t1844\t660\t1840\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6265\t2063\t2361\t157\t298\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6265\t23\t4412\t2182\t4389\t255\tcm:i:436\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6265\t4464\t6248\t787\t1784\t255\tcm:i:141\n3               6,265             8.04\n\nBest polish: /galaxy/server/database/jobs_directory/000/231/working/miniasm_assembly/racon_polish/016_rotated.fasta\nSaving /galaxy/server/database/jobs_directory/000/231/working/miniasm_assembly/13_racon_polished.gfa\nSaving /galaxy/server/database/jobs_directory/000/231/working/003_racon_polished.gfa\n\n\nAssembly complete (2022-09-10 17:10:11)\nSaving /galaxy/server/database/jobs_directory/000/231/working/assembly.gfa\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:10:11", "plugin": "core", "name": "end_epoch", "raw_value": "1662829811.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:10:10", "plugin": "core", "name": "start_epoch", "raw_value": "1662829810.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_FPKM_count/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_FPKM_count", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 113.52754163742065, "inputs": {"input": {"src": "hda", "id": "7a5b9436c35e71e0"}, "refgene": {"src": "hda", "id": "8dc5fb6635e21fc1"}}, "job": {"model_class": "Job", "id": "0df69576e7f556c9", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:36:17.428255", "create_time": "2022-09-10T16:34:52.888490", "galaxy_version": "21.09", "command_version": "FPKM_count.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_FPKM_count/2.6.4.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-sd799", "command_line": "ln -sf '/galaxy/server/database/objects/c/5/e/dataset_c5eafa52-10ca-41d0-9642-0deeba9e37ff.dat' 'local_input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/f/5/4/metadata_f541bf93-ec5f-4071-b08a-73eb762f9ea8.dat' 'local_input.bam.bai' && FPKM_count.py -i 'local_input.bam' -o output -r '/galaxy/server/database/objects/2/5/a/dataset_25a11cac-cc36-4036-ba9f-bb97849a388a.dat'          --single-read=\"1\"", "traceback": null, "params": {"strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "multihits_type": "{\"__current_case__\": 1, \"multihits_type_selector\": \"use_multihits\"}", "onlyexonic": "\"false\"", "singleread": "\"1\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"input": {"id": "7a5b9436c35e71e0", "src": "hda", "uuid": "c5eafa52-10ca-41d0-9642-0deeba9e37ff"}, "refgene": {"id": "8dc5fb6635e21fc1", "src": "hda", "uuid": "25a11cac-cc36-4036-ba9f-bb97849a388a"}}, "outputs": {"outputxls": {"id": "f218848280604567", "src": "hda", "uuid": "d2272a5e-8bd0-451f-b8ba-626536e5726b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Extract exon regions from  /galaxy/server/database/objects/2/5/a/dataset_25a11cac-cc36-4036-ba9f-bb97849a388a.dat...\nCounting total fragment ...  Done\nTotal fragment = 20.0                \nTotal exonic fragment = 2.0                 \n 1 transcripts finished\r 2 transcripts finished\r 3 transcripts finished\r 4 transcripts finished\r 5 transcripts finished\r 6 transcripts finished\r 7 transcripts finished\r", "job_stdout": "", "job_stderr": "", "stderr": "Extract exon regions from  /galaxy/server/database/objects/2/5/a/dataset_25a11cac-cc36-4036-ba9f-bb97849a388a.dat...\nCounting total fragment ...  Done\nTotal fragment = 20.0                \nTotal exonic fragment = 2.0                 \n 1 transcripts finished\r 2 transcripts finished\r 3 transcripts finished\r 4 transcripts finished\r 5 transcripts finished\r 6 transcripts finished\r 7 transcripts finished\r", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:36:06", "plugin": "core", "name": "start_epoch", "raw_value": "1662827766.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:36:06", "plugin": "core", "name": "end_epoch", "raw_value": "1662827766.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RNA_fragment_size/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RNA_fragment_size", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 115.79088234901428, "inputs": {"input": {"src": "hda", "id": "16356ec471312716"}, "refgene": {"src": "hda", "id": "be5ad72928c31517"}}, "job": {"model_class": "Job", "id": "641e42a9c851d31c", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:38:33.164184", "create_time": "2022-09-10T16:36:53.776118", "galaxy_version": "21.09", "command_version": "RNA_fragment_size.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RNA_fragment_size/2.6.4.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-hq92t", "command_line": "ln -sf '/galaxy/server/database/objects/0/f/d/dataset_0fde1937-b5ba-480c-9d31-57760f0e4d37.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/c/4/9/metadata_c4985ec3-d1b8-40b6-83c2-6ff5ecc65f48.dat' 'input.bam.bai' && RNA_fragment_size.py -i 'input.bam' --refgene='/galaxy/server/database/objects/6/0/5/dataset_6050f4a9-1e79-4961-9854-db2310b47e5c.dat' --mapq=30 --frag-num=3 > '/galaxy/server/database/objects/b/e/b/dataset_beb88b60-1bcf-412d-8148-0f518091efe6.dat'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "fragnum": "\"3\"", "mapq": "\"30\""}, "inputs": {"refgene": {"id": "be5ad72928c31517", "src": "hda", "uuid": "6050f4a9-1e79-4961-9854-db2310b47e5c"}, "input": {"id": "16356ec471312716", "src": "hda", "uuid": "0fde1937-b5ba-480c-9d31-57760f0e4d37"}}, "outputs": {"output": {"id": "6a006aab45eeb1e8", "src": "hda", "uuid": "beb88b60-1bcf-412d-8148-0f518091efe6"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:38:21", "plugin": "core", "name": "end_epoch", "raw_value": "1662827901.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:38:21", "plugin": "core", "name": "start_epoch", "raw_value": "1662827901.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RPKM_saturation/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RPKM_saturation", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 120.45056223869324, "inputs": {"input": {"src": "hda", "id": "056f6585b91f5b54"}, "refgene": {"src": "hda", "id": "a109f83f6a85af84"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "6e9c4a773ea428f0", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:38:20.222692", "create_time": "2022-09-10T16:36:37.342861", "galaxy_version": "21.09", "command_version": "RPKM_saturation.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RPKM_saturation/2.6.4.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-dxqzw", "command_line": "RPKM_saturation.py -i '/galaxy/server/database/objects/e/9/9/dataset_e9902a8e-f54c-4873-876c-e65bab3ce27c.dat' -o output -r '/galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat'    -l 5 -u 100 -s 5 -c 0.01", "traceback": null, "params": {"strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "percentileFloor": "\"5\"", "percentileCeiling": "\"100\"", "percentileStep": "\"5\"", "rpkmCutoff": "\"0.01\"", "mapq": "\"30\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"refgene": {"id": "5a5fa198ccc6dcda", "src": "hda", "uuid": "3bcd8304-6529-4d44-b34e-0c3127748615"}, "input": {"id": "056f6585b91f5b54", "src": "hda", "uuid": "e9902a8e-f54c-4873-876c-e65bab3ce27c"}}, "outputs": {"outputxls": {"id": "9d459e4a9d9f0993", "src": "hda", "uuid": "09a76010-c070-4d67-8428-5e42581bb05a"}, "outputpdf": {"id": "4c910282e29de632", "src": "hda", "uuid": "77eb2abc-204a-4006-ae5a-111ed7fe88b4"}, "outputr": {"id": "480d1142b4370899", "src": "hda", "uuid": "99b0d9a7-9250-44c9-b7ec-edad39b4f384"}, "outputrawxls": {"id": "0abf74bcdec95a50", "src": "hda", "uuid": "6f2fdad4-e793-4342-b272-ddb3b4147065"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nshuffling alignments ... Done\nsampling 5% (245) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 10% (491) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 15% (737) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 20% (983) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 25% (1229) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 30% (1474) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 35% (1720) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 40% (1966) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 45% (2212) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 50% (2458) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 55% (2703) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 60% (2949) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 65% (3195) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 70% (3441) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 75% (3687) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 80% (3932) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 85% (4178) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 90% (4424) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 95% (4670) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 100% (4916) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nshuffling alignments ... Done\nsampling 5% (245) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 10% (491) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 15% (737) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 20% (983) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 25% (1229) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 30% (1474) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 35% (1720) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 40% (1966) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 45% (2212) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 50% (2458) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 55% (2703) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 60% (2949) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 65% (3195) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 70% (3441) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 75% (3687) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 80% (3932) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 85% (4178) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 90% (4424) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 95% (4670) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\nsampling 100% (4916) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/3/b/c/dataset_3bcd8304-6529-4d44-b34e-0c3127748615.dat ...\n\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:38:10", "plugin": "core", "name": "end_epoch", "raw_value": "1662827890.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:38:09", "plugin": "core", "name": "start_epoch", "raw_value": "1662827889.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 101.09692811965942, "inputs": {"input": {"src": "hda", "id": "a81d109feb5c3854"}, "chromsize": {"src": "hda", "id": "e66f908a4adf2e04"}}, "job": {"model_class": "Job", "id": "242a851e6dd94da6", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:44:06.892086", "create_time": "2022-09-10T16:42:37.532778", "galaxy_version": "21.09", "command_version": "bam2wig.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-zcqnz", "command_line": "ln -sf '/galaxy/server/database/objects/6/a/e/dataset_6aea8922-f195-41ec-ba75-7f73191731b6.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/c/5/9/metadata_c597ad66-0657-4a46-8256-2f3be2b435c1.dat' 'input.bam.bai' && bam2wig.py -i 'input.bam' -s '/galaxy/server/database/objects/1/4/c/dataset_14cc7e6e-86e5-4633-8c83-a7ba4305a0ae.dat' -o outfile", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "wigsum_type": "{\"__current_case__\": 1, \"wigsum_type_selector\": \"raw\"}", "multihits_type": "{\"__current_case__\": 1, \"multihits_type_selector\": \"use_multihits\"}"}, "inputs": {"chromsize": {"id": "e66f908a4adf2e04", "src": "hda", "uuid": "14cc7e6e-86e5-4633-8c83-a7ba4305a0ae"}, "input": {"id": "a81d109feb5c3854", "src": "hda", "uuid": "6aea8922-f195-41ec-ba75-7f73191731b6"}}, "outputs": {"output": {"id": "e24f687a9d116373", "src": "hda", "uuid": "9d42143e-4dbb-47bd-a36c-88462e11f82d"}}, "output_collections": {}, "tool_stdout": "Skip multi-hits:False\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/1/4/c/dataset_14cc7e6e-86e5-4633-8c83-a7ba4305a0ae.dat outfile.bw \n", "tool_stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "job_stdout": "", "job_stderr": "", "stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "stdout": "Skip multi-hits:False\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/1/4/c/dataset_14cc7e6e-86e5-4633-8c83-a7ba4305a0ae.dat outfile.bw \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:43:50", "plugin": "core", "name": "end_epoch", "raw_value": "1662828230.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:43:50", "plugin": "core", "name": "start_epoch", "raw_value": "1662828230.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig", "tool_version": "2.6.4", "test_index": 1, "time_seconds": 122.21728014945984, "inputs": {"input": {"src": "hda", "id": "c43df2937c3a7966"}, "chromsize": {"src": "hda", "id": "559afa66f607db36"}, "multihits_type|mapq": "20", "multihits_type|multihits_type_selector": "skip_multihits"}, "job": {"model_class": "Job", "id": "3ffb1f93816c79e8", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:45:50.891572", "create_time": "2022-09-10T16:44:07.124618", "galaxy_version": "21.09", "command_version": "bam2wig.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-9qnmm", "command_line": "ln -sf '/galaxy/server/database/objects/9/5/a/dataset_95ad47e2-e0dc-485c-a115-e2973d8dad00.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/4/9/0/metadata_490bceac-ceb0-4528-920e-aee08217bc4f.dat' 'input.bam.bai' && bam2wig.py -i 'input.bam' -s '/galaxy/server/database/objects/8/e/4/dataset_8e4feb52-165f-4ec1-91ad-bc5df80ce1e6.dat' -o outfile       --skip-multi-hits --mapq=20", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "wigsum_type": "{\"__current_case__\": 1, \"wigsum_type_selector\": \"raw\"}", "multihits_type": "{\"__current_case__\": 0, \"mapq\": \"20\", \"multihits_type_selector\": \"skip_multihits\"}"}, "inputs": {"input": {"id": "c43df2937c3a7966", "src": "hda", "uuid": "95ad47e2-e0dc-485c-a115-e2973d8dad00"}, "chromsize": {"id": "559afa66f607db36", "src": "hda", "uuid": "8e4feb52-165f-4ec1-91ad-bc5df80ce1e6"}}, "outputs": {"output": {"id": "3a586b36acbcc5f5", "src": "hda", "uuid": "d7b95f4d-e5cd-4896-88f3-98aea40bfb30"}}, "output_collections": {}, "tool_stdout": "Skip multi-hits:True\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/8/e/4/dataset_8e4feb52-165f-4ec1-91ad-bc5df80ce1e6.dat outfile.bw \n", "tool_stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "job_stdout": "", "job_stderr": "", "stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "stdout": "Skip multi-hits:True\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/8/e/4/dataset_8e4feb52-165f-4ec1-91ad-bc5df80ce1e6.dat outfile.bw \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:45:40", "plugin": "core", "name": "end_epoch", "raw_value": "1662828340.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:45:40", "plugin": "core", "name": "start_epoch", "raw_value": "1662828340.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig", "tool_version": "2.6.4", "test_index": 2, "time_seconds": 118.32694244384766, "inputs": {"input": {"src": "hda", "id": "8185507c65ff5b71"}, "chromsize": {"src": "hda", "id": "ab11e958670dad5b"}, "strand_type|pair_type": "sd", "strand_type|strand_specific": "pair"}, "job": {"model_class": "Job", "id": "9f25dae41bef72c4", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:45:49.994705", "create_time": "2022-09-10T16:44:22.173627", "galaxy_version": "21.09", "command_version": "bam2wig.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-bhxg7", "command_line": "ln -sf '/galaxy/server/database/objects/8/e/2/dataset_8e2de2b2-2c0b-4d3b-a3ce-9295b827d735.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/4/2/a/metadata_42a94c9e-4328-45ce-baf2-adcef06851eb.dat' 'input.bam.bai' && bam2wig.py -i 'input.bam' -s '/galaxy/server/database/objects/8/3/c/dataset_83c67416-e9ea-4f88-b421-eccdefe146c0.dat' -o outfile  -d '1++,1--,2+-,2-+'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strand_type": "{\"__current_case__\": 0, \"pair_type\": \"sd\", \"strand_specific\": \"pair\"}", "wigsum_type": "{\"__current_case__\": 1, \"wigsum_type_selector\": \"raw\"}", "multihits_type": "{\"__current_case__\": 1, \"multihits_type_selector\": \"use_multihits\"}"}, "inputs": {"input": {"id": "8185507c65ff5b71", "src": "hda", "uuid": "8e2de2b2-2c0b-4d3b-a3ce-9295b827d735"}, "chromsize": {"id": "ab11e958670dad5b", "src": "hda", "uuid": "83c67416-e9ea-4f88-b421-eccdefe146c0"}}, "outputs": {"outputfwd": {"id": "e4da52f4cc21e518", "src": "hda", "uuid": "2532e86f-d01d-48c2-83ee-55707642bc5f"}, "outputrv": {"id": "c33f85d604713b8d", "src": "hda", "uuid": "40c4c4f2-4a2c-47d1-9353-dbf344ec1e35"}}, "output_collections": {}, "tool_stdout": "Skip multi-hits:False\n", "tool_stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n/bin/sh: wigToBigWig: not found\n", "job_stdout": "", "job_stderr": "", "stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n/bin/sh: wigToBigWig: not found\n", "stdout": "Skip multi-hits:False\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:45:37", "plugin": "core", "name": "end_epoch", "raw_value": "1662828337.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:45:37", "plugin": "core", "name": "start_epoch", "raw_value": "1662828337.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig", "tool_version": "2.6.4", "test_index": 3, "time_seconds": 113.3884346485138, "inputs": {"input": {"src": "hda", "id": "8185507c65ff5b71"}, "chromsize": {"src": "hda", "id": "ab11e958670dad5b"}, "wigsum_type|totalwig": "100", "wigsum_type|wigsum_type_selector": "normalize"}, "job": {"model_class": "Job", "id": "45585f7ee8befdcd", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:46:00.082123", "create_time": "2022-09-10T16:44:24.184703", "galaxy_version": "21.09", "command_version": "bam2wig.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-gvjm2", "command_line": "ln -sf '/galaxy/server/database/objects/8/e/2/dataset_8e2de2b2-2c0b-4d3b-a3ce-9295b827d735.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/4/2/a/metadata_42a94c9e-4328-45ce-baf2-adcef06851eb.dat' 'input.bam.bai' && bam2wig.py -i 'input.bam' -s '/galaxy/server/database/objects/8/3/c/dataset_83c67416-e9ea-4f88-b421-eccdefe146c0.dat' -o outfile    -t 100", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "wigsum_type": "{\"__current_case__\": 0, \"totalwig\": \"100\", \"wigsum_type_selector\": \"normalize\"}", "multihits_type": "{\"__current_case__\": 1, \"multihits_type_selector\": \"use_multihits\"}"}, "inputs": {"input": {"id": "8185507c65ff5b71", "src": "hda", "uuid": "8e2de2b2-2c0b-4d3b-a3ce-9295b827d735"}, "chromsize": {"id": "ab11e958670dad5b", "src": "hda", "uuid": "83c67416-e9ea-4f88-b421-eccdefe146c0"}}, "outputs": {"output": {"id": "43383680575a936b", "src": "hda", "uuid": "5eb1cd0a-837b-424b-a4f1-0066418dd369"}}, "output_collections": {}, "tool_stdout": "Skip multi-hits:False\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/8/3/c/dataset_83c67416-e9ea-4f88-b421-eccdefe146c0.dat outfile.bw \n", "tool_stderr": "Calcualte wigsum ... \nNo alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n\n\ntotal wigsum is:1960.0\n\nNo alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "job_stdout": "", "job_stderr": "", "stderr": "Calcualte wigsum ... \nNo alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n\n\ntotal wigsum is:1960.0\n\nNo alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "stdout": "Skip multi-hits:False\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/8/3/c/dataset_83c67416-e9ea-4f88-b421-eccdefe146c0.dat outfile.bw \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:45:45", "plugin": "core", "name": "end_epoch", "raw_value": "1662828345.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:45:45", "plugin": "core", "name": "start_epoch", "raw_value": "1662828345.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam_stat/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam_stat", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 114.68589043617249, "inputs": {"input": {"src": "hda", "id": "8185507c65ff5b71"}}, "job": {"model_class": "Job", "id": "99fdc437e77885d9", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:46:03.788335", "create_time": "2022-09-10T16:44:25.377785", "galaxy_version": "21.09", "command_version": "bam_stat.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam_stat/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-7wlgb", "command_line": "bam_stat.py -i '/galaxy/server/database/objects/8/e/2/dataset_8e2de2b2-2c0b-4d3b-a3ce-9295b827d735.dat' -q 30 > '/galaxy/server/database/objects/c/1/7/dataset_c170120a-7f3c-4f53-a40f-67c550d0707c.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "mapq": "\"30\""}, "inputs": {"input": {"id": "8185507c65ff5b71", "src": "hda", "uuid": "8e2de2b2-2c0b-4d3b-a3ce-9295b827d735"}}, "outputs": {"output": {"id": "71c3a9ae119dc06c", "src": "hda", "uuid": "c170120a-7f3c-4f53-a40f-67c550d0707c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Load BAM file ...  Done\n", "stderr": "\nLoad BAM file ...  Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:45:48", "plugin": "core", "name": "end_epoch", "raw_value": "1662828348.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:45:47", "plugin": "core", "name": "start_epoch", "raw_value": "1662828347.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 138.75483512878418, "inputs": {"input": {"src": "hda", "id": "43a0297637d6aa03"}}, "job": {"model_class": "Job", "id": "e8c502a73fde8a16", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:34:23.845180", "create_time": "2022-09-10T16:32:24.448844", "galaxy_version": "21.09", "command_version": "clipping_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-hxh9n", "command_line": "clipping_profile.py -i '/galaxy/server/database/objects/7/1/7/dataset_717b7560-e012-4031-9fe1-e1f5631b3577.dat' -o output -q 30 -s \"SE\"", "traceback": null, "params": {"mapq": "\"30\"", "layout": "\"SE\"", "rscript_output": "\"false\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"input": {"id": "43a0297637d6aa03", "src": "hda", "uuid": "717b7560-e012-4031-9fe1-e1f5631b3577"}}, "outputs": {"outputpdf": {"id": "b767810bd2c4e320", "src": "hda", "uuid": "2b276921-71f4-4af9-b174-8239f8892873"}, "outputxls": {"id": "f80edd179f4f7aac", "src": "hda", "uuid": "51ebea3a-3c03-4a7f-9fb8-76742711b69b"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:34:08", "plugin": "core", "name": "end_epoch", "raw_value": "1662827648.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:34:07", "plugin": "core", "name": "start_epoch", "raw_value": "1662827647.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile/2.6.4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile", "tool_version": "2.6.4", "test_index": 1, "time_seconds": 116.90612435340881, "inputs": {"input": {"src": "hda", "id": "7a5b9436c35e71e0"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "4c6ccdb3bdc277d9", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:36:19.647411", "create_time": "2022-09-10T16:34:39.976836", "galaxy_version": "21.09", "command_version": "clipping_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-pcptt", "command_line": "clipping_profile.py -i '/galaxy/server/database/objects/c/5/e/dataset_c5eafa52-10ca-41d0-9642-0deeba9e37ff.dat' -o output -q 30 -s \"SE\"", "traceback": null, "params": {"mapq": "\"30\"", "layout": "\"SE\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"auto\""}, "inputs": {"input": {"id": "7a5b9436c35e71e0", "src": "hda", "uuid": "c5eafa52-10ca-41d0-9642-0deeba9e37ff"}}, "outputs": {"outputpdf": {"id": "c71e48b2070d79df", "src": "hda", "uuid": "d736e9b3-1c6c-41e5-be1c-8b54465e6d17"}, "outputxls": {"id": "cb639fc5fff48730", "src": "hda", "uuid": "0ce10f3c-19b0-46ac-95ff-c74a8ae0916c"}, "outputr": {"id": "6e9c4a773ea428f0", "src": "hda", "uuid": "3c6c70d5-bcd6-479a-83aa-11b3f5b85287"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:36:09", "plugin": "core", "name": "start_epoch", "raw_value": "1662827769.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:36:10", "plugin": "core", "name": "end_epoch", "raw_value": "1662827770.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_deletion_profile/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_deletion_profile", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 102.60663771629333, "inputs": {"input": {"src": "hda", "id": "9eb525c72de362ef"}, "readlength": "101", "rscript_output": true}, "job": {"model_class": "Job", "id": "c71e48b2070d79df", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:37:59.681975", "create_time": "2022-09-10T16:36:29.176797", "galaxy_version": "21.09", "command_version": "deletion_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_deletion_profile/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-nb6gn", "command_line": "deletion_profile.py -i '/galaxy/server/database/objects/b/a/0/dataset_ba0f5dd4-46a1-43ad-aab3-e74a99bb14b3.dat' -o output -l 101 -n 1000000 -q 30", "traceback": null, "params": {"readlength": "\"101\"", "readnum": "\"1000000\"", "mapq": "\"30\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"input": {"id": "9eb525c72de362ef", "src": "hda", "uuid": "ba0f5dd4-46a1-43ad-aab3-e74a99bb14b3"}}, "outputs": {"outputxls": {"id": "f8ae5d2aead522be", "src": "hda", "uuid": "2587bd74-efe3-4bef-89a0-6489d84a6dcb"}, "outputpdf": {"id": "088b645b95f13e27", "src": "hda", "uuid": "9e089905-2d98-4f07-8312-8cb81cb0ac49"}, "outputr": {"id": "5509f9bcc5c73f0a", "src": "hda", "uuid": "8d029374-117d-4035-a108-172f693ed938"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n\n\n", "tool_stderr": "Process BAM file ...  Total reads used: 0\n", "job_stdout": "", "job_stderr": "", "stderr": "Process BAM file ...  Total reads used: 0\n", "stdout": "null device \n          1 \n\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:37:50", "plugin": "core", "name": "end_epoch", "raw_value": "1662827870.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:37:50", "plugin": "core", "name": "start_epoch", "raw_value": "1662827870.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage/2.6.4.3-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage", "tool_version": "2.6.4.3", "test_index": 0, "time_seconds": 133.1834375858307, "inputs": {"batch_mode|input": {"src": "hda", "id": "7a5b9436c35e71e0"}, "batch_mode|batch_mode_selector": "batch", "refgene": {"src": "hda", "id": "8dc5fb6635e21fc1"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "c95e255641065b09", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:36:37.083167", "create_time": "2022-09-10T16:34:54.293802", "galaxy_version": "21.09", "command_version": "geneBody_coverage.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage/2.6.4.3", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-6hngz", "command_line": "ln -sf '/galaxy/server/database/objects/c/5/e/dataset_c5eafa52-10ca-41d0-9642-0deeba9e37ff.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/f/5/4/metadata_f541bf93-ec5f-4071-b08a-73eb762f9ea8.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam.bai' && geneBody_coverage.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam' -r '/galaxy/server/database/objects/4/0/3/dataset_4039d2b9-274b-448b-a28e-6008ef04734e.dat' --minimum_length 100 -o output", "traceback": null, "params": {"batch_mode": "{\"__current_case__\": 0, \"batch_mode_selector\": \"batch\", \"input\": {\"values\": [{\"id\": 22, \"src\": \"hda\"}]}}", "minimum_length": "\"100\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"input": {"id": "7a5b9436c35e71e0", "src": "hda", "uuid": "c5eafa52-10ca-41d0-9642-0deeba9e37ff"}, "refgene": {"id": "02d59f7a10879fbb", "src": "hda", "uuid": "4039d2b9-274b-448b-a28e-6008ef04734e"}}, "outputs": {"outputcurvespdf": {"id": "d936a1e6146afe0a", "src": "hda", "uuid": "232f4b0d-2e5e-40cf-8a59-e0ec63536936"}, "outputr": {"id": "a854ad03597f8538", "src": "hda", "uuid": "7de69ea7-59bd-4e8f-ab9b-744ab12d544d"}, "outputtxt": {"id": "641e42a9c851d31c", "src": "hda", "uuid": "34906fb0-807c-424b-aaa5-4eb60217fc13"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "@ 2022-09-10 16:36:24: Read BED file (reference gene model) ...\n@ 2022-09-10 16:36:24: Total 7 transcripts loaded\n@ 2022-09-10 16:36:24: Get BAM file(s) ...\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam\n@ 2022-09-10 16:36:24: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...\n\n\n\n\tSample\tSkewness\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam\t3.366683083597443\n@ 2022-09-10 16:36:24: Running R script ...\n", "job_stdout": "", "job_stderr": "", "stderr": "@ 2022-09-10 16:36:24: Read BED file (reference gene model) ...\n@ 2022-09-10 16:36:24: Total 7 transcripts loaded\n@ 2022-09-10 16:36:24: Get BAM file(s) ...\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam\n@ 2022-09-10 16:36:24: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...\n\n\n\n\tSample\tSkewness\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam\t3.366683083597443\n@ 2022-09-10 16:36:24: Running R script ...\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:36:23", "plugin": "core", "name": "start_epoch", "raw_value": "1662827783.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:36:24", "plugin": "core", "name": "end_epoch", "raw_value": "1662827784.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage/2.6.4.3-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage", "tool_version": "2.6.4.3", "test_index": 1, "time_seconds": 134.50183606147766, "inputs": {"batch_mode|inputs": [{"src": "hda", "id": "7a5b9436c35e71e0"}, {"src": "hda", "id": "7a5b9436c35e71e0"}, {"src": "hda", "id": "7a5b9436c35e71e0"}], "batch_mode|batch_mode_selector": "merge", "refgene": {"src": "hda", "id": "8dc5fb6635e21fc1"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "7a5b9436c35e71e0", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:36:38.158820", "create_time": "2022-09-10T16:34:54.484149", "galaxy_version": "21.09", "command_version": "geneBody_coverage.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage/2.6.4.3", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-rk42z", "command_line": "ln -sf '/galaxy/server/database/objects/c/5/e/dataset_c5eafa52-10ca-41d0-9642-0deeba9e37ff.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/f/5/4/metadata_f541bf93-ec5f-4071-b08a-73eb762f9ea8.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam.bai' && echo 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam' >> 'input_list.txt' &&  ln -sf '/galaxy/server/database/objects/c/5/e/dataset_c5eafa52-10ca-41d0-9642-0deeba9e37ff.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/f/5/4/metadata_f541bf93-ec5f-4071-b08a-73eb762f9ea8.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam.bai' && echo 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam' >> 'input_list.txt' &&  ln -sf '/galaxy/server/database/objects/c/5/e/dataset_c5eafa52-10ca-41d0-9642-0deeba9e37ff.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/f/5/4/metadata_f541bf93-ec5f-4071-b08a-73eb762f9ea8.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam.bai' && echo 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam' >> 'input_list.txt' && geneBody_coverage.py -i 'input_list.txt' -r '/galaxy/server/database/objects/4/0/3/dataset_4039d2b9-274b-448b-a28e-6008ef04734e.dat' --minimum_length 100 -o output", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "minimum_length": "\"100\"", "batch_mode": "{\"__current_case__\": 1, \"batch_mode_selector\": \"merge\", \"inputs\": {\"values\": [{\"id\": 22, \"src\": \"hda\"}, {\"id\": 22, \"src\": \"hda\"}, {\"id\": 22, \"src\": \"hda\"}]}}"}, "inputs": {"inputs": {"id": "7a5b9436c35e71e0", "src": "hda", "uuid": "c5eafa52-10ca-41d0-9642-0deeba9e37ff"}, "inputs1": {"id": "7a5b9436c35e71e0", "src": "hda", "uuid": "c5eafa52-10ca-41d0-9642-0deeba9e37ff"}, "inputs2": {"id": "7a5b9436c35e71e0", "src": "hda", "uuid": "c5eafa52-10ca-41d0-9642-0deeba9e37ff"}, "inputs3": {"id": "7a5b9436c35e71e0", "src": "hda", "uuid": "c5eafa52-10ca-41d0-9642-0deeba9e37ff"}, "refgene": {"id": "02d59f7a10879fbb", "src": "hda", "uuid": "4039d2b9-274b-448b-a28e-6008ef04734e"}}, "outputs": {"outputheatmappdf": {"id": "fb8e7ce61cf26194", "src": "hda", "uuid": "2fcfb1fc-1fc4-4219-a41f-4061dba4a218"}, "outputcurvespdf": {"id": "08c53a3a4e5ccefa", "src": "hda", "uuid": "bfaa40c8-0ebb-4cc6-98e4-b05f08266cd1"}, "outputr": {"id": "2fc5c74308ecce8d", "src": "hda", "uuid": "7c57a727-15dd-41b0-87f6-197202d8764d"}, "outputtxt": {"id": "9309780ddf5422c2", "src": "hda", "uuid": "1afa9a0b-522a-424e-ba6d-5fd5035c8820"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \nnull device \n          1 \n", "tool_stderr": "@ 2022-09-10 16:36:26: Read BED file (reference gene model) ...\n@ 2022-09-10 16:36:26: Total 7 transcripts loaded\n@ 2022-09-10 16:36:26: Get BAM file(s) ...\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam\n@ 2022-09-10 16:36:26: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...\n@ 2022-09-10 16:36:26: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam ...\n@ 2022-09-10 16:36:26: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam ...\n\n\n\n\tSample\tSkewness\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam\t3.366683083597443\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam.1\t3.366683083597443\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam.2\t3.366683083597443\n@ 2022-09-10 16:36:26: Running R script ...\n", "job_stdout": "", "job_stderr": "", "stderr": "@ 2022-09-10 16:36:26: Read BED file (reference gene model) ...\n@ 2022-09-10 16:36:26: Total 7 transcripts loaded\n@ 2022-09-10 16:36:26: Get BAM file(s) ...\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam\n@ 2022-09-10 16:36:26: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...\n@ 2022-09-10 16:36:26: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam ...\n@ 2022-09-10 16:36:26: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam ...\n\n\n\n\tSample\tSkewness\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam\t3.366683083597443\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam.1\t3.366683083597443\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam.2\t3.366683083597443\n@ 2022-09-10 16:36:26: Running R script ...\n", "stdout": "null device \n          1 \nnull device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:36:26", "plugin": "core", "name": "start_epoch", "raw_value": "1662827786.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:36:26", "plugin": "core", "name": "end_epoch", "raw_value": "1662827786.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage2/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage2", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 139.0620834827423, "inputs": {"input": {"src": "hda", "id": "8a1377a408ce266f"}, "refgene": {"src": "hda", "id": "d9a5b50cfcd97949"}}, "job": {"model_class": "Job", "id": "67283b15ecec3a5b", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:34:23.787993", "create_time": "2022-09-10T16:32:30.485483", "galaxy_version": "21.09", "command_version": "geneBody_coverage2.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage2/2.6.4.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-24xcw", "command_line": "geneBody_coverage2.py -i '/galaxy/server/database/objects/b/1/8/dataset_b18af5c7-aecb-4162-925e-9171f3f21d7e.dat' -r '/galaxy/server/database/objects/e/7/c/dataset_e7c98957-6704-482e-afc9-bd6ca74ce31f.dat' -o output", "traceback": null, "params": {"chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bigwig\""}, "inputs": {"input": {"id": "8a1377a408ce266f", "src": "hda", "uuid": "b18af5c7-aecb-4162-925e-9171f3f21d7e"}, "refgene": {"id": "e5f9dc4f8e7b387c", "src": "hda", "uuid": "e7c98957-6704-482e-afc9-bd6ca74ce31f"}}, "outputs": {"outputpdf": {"id": "625a344e8bb5881c", "src": "hda", "uuid": "6bbf5503-5e8a-4eb6-a109-f528d3d57c5b"}, "outputtxt": {"id": "ec88575a4cbb87f0", "src": "hda", "uuid": "c01601fb-2089-40f8-9b16-da9aca3ca004"}, "outputr": {"id": "4c6ccdb3bdc277d9", "src": "hda", "uuid": "234a1d34-75ae-4445-9cfc-82510fe3d2f5"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "calculating coverage over gene body ...\n  1 genes finished\r  2 genes finished\r  5 genes finished\r  6 genes finished\r  7 genes finished\r", "job_stdout": "", "job_stderr": "", "stderr": "calculating coverage over gene body ...\n  1 genes finished\r  2 genes finished\r  5 genes finished\r  6 genes finished\r  7 genes finished\r", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:34:10", "plugin": "core", "name": "end_epoch", "raw_value": "1662827650.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:34:09", "plugin": "core", "name": "start_epoch", "raw_value": "1662827649.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_infer_experiment/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_infer_experiment", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 122.16912794113159, "inputs": {"input": {"src": "hda", "id": "16356ec471312716"}, "refgene": {"src": "hda", "id": "be5ad72928c31517"}}, "job": {"model_class": "Job", "id": "fb8e7ce61cf26194", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:38:40.903183", "create_time": "2022-09-10T16:37:02.249404", "galaxy_version": "21.09", "command_version": "infer_experiment.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_infer_experiment/2.6.4.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-tvznr", "command_line": "infer_experiment.py -i '/galaxy/server/database/objects/0/f/d/dataset_0fde1937-b5ba-480c-9d31-57760f0e4d37.dat' -r '/galaxy/server/database/objects/2/5/4/dataset_2547ba1d-0030-474b-b117-0a6e0994baac.dat' --sample-size 200000 --mapq 30 > '/galaxy/server/database/objects/6/c/5/dataset_6c5a6bd6-7b09-4b70-9ae4-c6e51d9ce89b.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "mapq": "\"30\"", "sample_size": "\"200000\""}, "inputs": {"refgene": {"id": "e92ade99f949ad34", "src": "hda", "uuid": "2547ba1d-0030-474b-b117-0a6e0994baac"}, "input": {"id": "16356ec471312716", "src": "hda", "uuid": "0fde1937-b5ba-480c-9d31-57760f0e4d37"}}, "outputs": {"output": {"id": "a78e7718ebaf8e86", "src": "hda", "uuid": "6c5a6bd6-7b09-4b70-9ae4-c6e51d9ce89b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Reading reference gene model /galaxy/server/database/objects/2/5/4/dataset_2547ba1d-0030-474b-b117-0a6e0994baac.dat ... Done\nLoading SAM/BAM file ...  Finished\nTotal 30 usable reads were sampled\n", "stderr": "\nReading reference gene model /galaxy/server/database/objects/2/5/4/dataset_2547ba1d-0030-474b-b117-0a6e0994baac.dat ... Done\nLoading SAM/BAM file ...  Finished\nTotal 30 usable reads were sampled\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:38:30", "plugin": "core", "name": "end_epoch", "raw_value": "1662827910.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:38:29", "plugin": "core", "name": "start_epoch", "raw_value": "1662827909.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_inner_distance/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_inner_distance", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 124.69875431060791, "inputs": {"input": {"src": "hda", "id": "1be4f4bdf3be373a"}, "refgene": {"src": "hda", "id": "c38fae633b1c873f"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "c775fba46bda7cf1", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:42:25.017602", "create_time": "2022-09-10T16:40:41.345064", "galaxy_version": "21.09", "command_version": "inner_distance.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_inner_distance/2.6.4.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-ttd72", "command_line": "inner_distance.py -i '/galaxy/server/database/objects/0/4/9/dataset_04915153-d8b7-45d8-9159-601b207ad413.dat' -o output -r '/galaxy/server/database/objects/b/4/0/dataset_b403f2ce-33c4-4881-b0ef-5896aae54e3b.dat' --sample-size 200000 --lower-bound -250 --upper-bound 250 --step 5 --mapq 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\"", "step": "\"5\"", "upperBound": "\"250\"", "lowerBound": "\"-250\"", "sample_size": "\"200000\""}, "inputs": {"input": {"id": "1be4f4bdf3be373a", "src": "hda", "uuid": "04915153-d8b7-45d8-9159-601b207ad413"}, "refgene": {"id": "7badcc989e31f260", "src": "hda", "uuid": "b403f2ce-33c4-4881-b0ef-5896aae54e3b"}}, "outputs": {"outputpdf": {"id": "065113b5b6d82e5f", "src": "hda", "uuid": "1b36f76d-a5cb-4581-a328-db438cf00a47"}, "outputtxt": {"id": "255ba92c6ce31c1c", "src": "hda", "uuid": "0682c209-0969-4888-a52e-77f75847e48a"}, "outputfreqtxt": {"id": "5f93dacac8f24a43", "src": "hda", "uuid": "9cc09500-b9a3-487e-b03a-eb3303d9d669"}, "outputr": {"id": "66977f3005bfbf52", "src": "hda", "uuid": "c4fd8477-42f1-4100-aa6e-52c16082580c"}}, "output_collections": {}, "tool_stdout": "Name\tMean\tMedian\tsd\noutput\t96.4736842105263\t67\t87.858705014265\nnull device \n          1 \n", "tool_stderr": "Get exon regions from /galaxy/server/database/objects/b/4/0/dataset_b403f2ce-33c4-4881-b0ef-5896aae54e3b.dat ...\nLoad BAM file ...  Done\nTotal read pairs  used 20\n", "job_stdout": "", "job_stderr": "", "stderr": "Get exon regions from /galaxy/server/database/objects/b/4/0/dataset_b403f2ce-33c4-4881-b0ef-5896aae54e3b.dat ...\nLoad BAM file ...  Done\nTotal read pairs  used 20\n", "stdout": "Name\tMean\tMedian\tsd\noutput\t96.4736842105263\t67\t87.858705014265\nnull device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:42:08", "plugin": "core", "name": "end_epoch", "raw_value": "1662828128.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:42:08", "plugin": "core", "name": "start_epoch", "raw_value": "1662828128.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_insertion_profile/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_insertion_profile", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 110.67877078056335, "inputs": {"input": {"src": "hda", "id": "a81d109feb5c3854"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "02fd1d16203b59b0", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:44:08.887674", "create_time": "2022-09-10T16:42:32.566691", "galaxy_version": "21.09", "command_version": "insertion_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_insertion_profile/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-gz52h", "command_line": "insertion_profile.py -i '/galaxy/server/database/objects/6/a/e/dataset_6aea8922-f195-41ec-ba75-7f73191731b6.dat' -o output -q 30 -s \"SE\"", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "layout": "\"SE\"", "mapq": "\"30\""}, "inputs": {"input": {"id": "a81d109feb5c3854", "src": "hda", "uuid": "6aea8922-f195-41ec-ba75-7f73191731b6"}}, "outputs": {"outputpdf": {"id": "13202e7db17f5357", "src": "hda", "uuid": "b4550f4e-87fd-42f4-8573-7d97ddc5f055"}, "outputxls": {"id": "7151330f46fdc45f", "src": "hda", "uuid": "ce417915-5fdf-4ad3-93b9-33d0d450d84c"}, "outputr": {"id": "7b5a5bbe0591f96e", "src": "hda", "uuid": "598f536e-dc46-4324-9685-d0bb20d6a41a"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:43:53", "plugin": "core", "name": "end_epoch", "raw_value": "1662828233.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:43:53", "plugin": "core", "name": "start_epoch", "raw_value": "1662828233.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_annotation/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_annotation", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 142.04259276390076, "inputs": {"input": {"src": "hda", "id": "c775fba46bda7cf1"}, "refgene": {"src": "hda", "id": "bca1da2ae51e7f53"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "056f6585b91f5b54", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:40:21.805858", "create_time": "2022-09-10T16:38:11.347116", "galaxy_version": "21.09", "command_version": "junction_annotation.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_annotation/2.6.4.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-bqddc", "command_line": "junction_annotation.py --input-file '/galaxy/server/database/objects/d/c/3/dataset_dc3788b8-a7bb-4dac-b620-d16ac8ce12fb.dat' --refgene '/galaxy/server/database/objects/b/f/8/dataset_bf88061e-99a4-4720-894a-0ef4401c6af2.dat' --out-prefix output --min-intron 50 --mapq 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\"", "min_intron": "\"50\""}, "inputs": {"input": {"id": "c775fba46bda7cf1", "src": "hda", "uuid": "dc3788b8-a7bb-4dac-b620-d16ac8ce12fb"}, "refgene": {"id": "fc852b6259673048", "src": "hda", "uuid": "bf88061e-99a4-4720-894a-0ef4401c6af2"}}, "outputs": {"outputpdf": {"id": "06107574e5ed219b", "src": "hda", "uuid": "26e17413-1129-4a07-bf85-08083f81bff7"}, "outputjpdf": {"id": "13fc60715f86e849", "src": "hda", "uuid": "9b48080a-17b5-41bf-a87a-8869c8adcb85"}, "outputxls": {"id": "017a38355fe487ed", "src": "hda", "uuid": "1d7427de-75f2-4594-816f-2a9c31f2ab20"}, "outputr": {"id": "c8fb5b8cef38d2d0", "src": "hda", "uuid": "5e7716ba-fd38-4185-a486-c03bdc370764"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \nnull device \n          1 \ntotal = 4\n", "tool_stderr": "Reading reference bed file:  /galaxy/server/database/objects/b/f/8/dataset_bf88061e-99a4-4720-894a-0ef4401c6af2.dat  ...  Done\nLoad BAM file ...  Done\n\n===================================================================\nTotal splicing  Events:\t4\nKnown Splicing Events:\t1\nPartial Novel Splicing Events:\t1\nNovel Splicing Events:\t1\n\nTotal splicing  Junctions:\t3\nKnown Splicing Junctions:\t1\nPartial Novel Splicing Junctions:\t1\nNovel Splicing Junctions:\t1\n\n===================================================================\n", "job_stdout": "", "job_stderr": "", "stderr": "Reading reference bed file:  /galaxy/server/database/objects/b/f/8/dataset_bf88061e-99a4-4720-894a-0ef4401c6af2.dat  ...  Done\nLoad BAM file ...  Done\n\n===================================================================\nTotal splicing  Events:\t4\nKnown Splicing Events:\t1\nPartial Novel Splicing Events:\t1\nNovel Splicing Events:\t1\n\nTotal splicing  Junctions:\t3\nKnown Splicing Junctions:\t1\nPartial Novel Splicing Junctions:\t1\nNovel Splicing Junctions:\t1\n\n===================================================================\n", "stdout": "null device \n          1 \nnull device \n          1 \ntotal = 4\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:40:02", "plugin": "core", "name": "end_epoch", "raw_value": "1662828002.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:40:02", "plugin": "core", "name": "start_epoch", "raw_value": "1662828002.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_saturation/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_saturation", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 122.39096260070801, "inputs": {"input": {"src": "hda", "id": "0d749a848e4f59b8"}, "refgene": {"src": "hda", "id": "0bb6a6712133044e"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "4242e0006d14176f", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:47:53.250976", "create_time": "2022-09-10T16:46:11.692867", "galaxy_version": "21.09", "command_version": "junction_saturation.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_saturation/2.6.4.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-96gjf", "command_line": "junction_saturation.py --input-file '/galaxy/server/database/objects/c/3/0/dataset_c30e9e95-455c-4691-8bfa-26ede8037e2e.dat' --refgene '/galaxy/server/database/objects/d/9/0/dataset_d904faa5-894d-46f8-83d8-d91b033a415f.dat' --out-prefix output --min-intron 50 --min-coverage 1 --mapq 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "percentiles_type": "{\"__current_case__\": 1, \"percentiles_type_selector\": \"default\"}", "mapq": "\"30\"", "min_coverage": "\"1\"", "min_intron": "\"50\""}, "inputs": {"input": {"id": "0d749a848e4f59b8", "src": "hda", "uuid": "c30e9e95-455c-4691-8bfa-26ede8037e2e"}, "refgene": {"id": "e18ac8e9cd08a2a7", "src": "hda", "uuid": "d904faa5-894d-46f8-83d8-d91b033a415f"}}, "outputs": {"outputpdf": {"id": "d3e488b858fe13b4", "src": "hda", "uuid": "2262654a-8c4d-40ca-b786-e41d4b6b7cbb"}, "outputr": {"id": "814dd29e35937066", "src": "hda", "uuid": "0a56b2e8-3820-4342-86a4-981cbda5e335"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "reading reference bed file:  /galaxy/server/database/objects/d/9/0/dataset_d904faa5-894d-46f8-83d8-d91b033a415f.dat  ...  Done! Total 14 known splicing junctions.\nLoad BAM file ...  Done\nshuffling alignments ... Done\nsampling 5% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 10% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 15% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 20% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 25% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 30% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 35% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 40% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 45% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 50% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 55% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 60% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 65% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 70% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.\nsampling 75% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.\nsampling 80% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.\nsampling 85% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.\nsampling 90% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.\nsampling 95% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.\nsampling 100% (3) splicing reads. 3 splicing junctions. 1 known splicing junctions. 2 novel splicing junctions.\n", "job_stdout": "", "job_stderr": "", "stderr": "reading reference bed file:  /galaxy/server/database/objects/d/9/0/dataset_d904faa5-894d-46f8-83d8-d91b033a415f.dat  ...  Done! Total 14 known splicing junctions.\nLoad BAM file ...  Done\nshuffling alignments ... Done\nsampling 5% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 10% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 15% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 20% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 25% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 30% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 35% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 40% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 45% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 50% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 55% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 60% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 65% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.\nsampling 70% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.\nsampling 75% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.\nsampling 80% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.\nsampling 85% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.\nsampling 90% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.\nsampling 95% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.\nsampling 100% (3) splicing reads. 3 splicing junctions. 1 known splicing junctions. 2 novel splicing junctions.\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:47:41", "plugin": "core", "name": "end_epoch", "raw_value": "1662828461.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:47:41", "plugin": "core", "name": "start_epoch", "raw_value": "1662828461.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_mismatch_profile/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_mismatch_profile", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 115.02290391921997, "inputs": {"input": {"src": "hda", "id": "a506c0ed1dd1c920"}, "readlength": "101", "rscript_output": true}, "job": {"model_class": "Job", "id": "eb8422d053acd1e5", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:40:35.570179", "create_time": "2022-09-10T16:38:54.187718", "galaxy_version": "21.09", "command_version": "mismatch_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_mismatch_profile/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-ghtdt", "command_line": "mismatch_profile.py -i '/galaxy/server/database/objects/3/7/9/dataset_379c503c-cc3b-4fa1-bd62-9a7f5c2feed5.dat' -o output -l 101 -n 1000000 -q 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\"", "readnum": "\"1000000\"", "readlength": "\"101\""}, "inputs": {"input": {"id": "a506c0ed1dd1c920", "src": "hda", "uuid": "379c503c-cc3b-4fa1-bd62-9a7f5c2feed5"}}, "outputs": {"outputpdf": {"id": "171a68103261263f", "src": "hda", "uuid": "593603b1-c921-4467-99ce-9384f2e9080a"}, "outputxls": {"id": "3ffb1f93816c79e8", "src": "hda", "uuid": "66b5bbf5-6290-47ba-8dfa-9650680d30a2"}, "outputr": {"id": "47e378e4d688c6b3", "src": "hda", "uuid": "d20e3af0-6c96-4591-8b49-cdc0e2b599ae"}}, "output_collections": {}, "tool_stdout": "\n\n", "tool_stderr": "Process BAM file ...  No mismatches found\n", "job_stdout": "", "job_stderr": "", "stderr": "Process BAM file ...  No mismatches found\n", "stdout": "\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:40:18", "plugin": "core", "name": "start_epoch", "raw_value": "1662828018.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:40:18", "plugin": "core", "name": "end_epoch", "raw_value": "1662828018.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_GC/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_GC", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 105.83333969116211, "inputs": {"input": {"src": "hda", "id": "0d749a848e4f59b8"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "f2ce19db76ad1135", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:47:35.594103", "create_time": "2022-09-10T16:46:08.924426", "galaxy_version": "21.09", "command_version": "read_GC.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_GC/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-m5c7l", "command_line": "read_GC.py --input-file '/galaxy/server/database/objects/c/3/0/dataset_c30e9e95-455c-4691-8bfa-26ede8037e2e.dat' --out-prefix output --mapq 30", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\""}, "inputs": {"input": {"id": "0d749a848e4f59b8", "src": "hda", "uuid": "c30e9e95-455c-4691-8bfa-26ede8037e2e"}}, "outputs": {"outputpdf": {"id": "85a19f17362ec412", "src": "hda", "uuid": "fd2e09dd-4eb2-4dff-8828-ac9d66dc482a"}, "outputxls": {"id": "7a2c64f12ba511fe", "src": "hda", "uuid": "58f0470c-2def-4337-b6d5-a7561162acd2"}, "outputr": {"id": "47eebc5ab10428a8", "src": "hda", "uuid": "4947cc11-deb0-41f3-8619-53bf44f7c6db"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Read BAM file ...  Done\nwriting GC content ...\nwriting R script ...\n", "job_stdout": "", "job_stderr": "", "stderr": "Read BAM file ...  Done\nwriting GC content ...\nwriting R script ...\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:47:26", "plugin": "core", "name": "end_epoch", "raw_value": "1662828446.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:47:26", "plugin": "core", "name": "start_epoch", "raw_value": "1662828446.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_NVC/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_NVC", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 138.96275854110718, "inputs": {"input": {"src": "hda", "id": "43a0297637d6aa03"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "ac57eca498e99e10", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:34:23.865300", "create_time": "2022-09-10T16:32:23.480544", "galaxy_version": "21.09", "command_version": "read_NVC.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_NVC/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-nw2qk", "command_line": "read_NVC.py --input-file '/galaxy/server/database/objects/7/1/7/dataset_717b7560-e012-4031-9fe1-e1f5631b3577.dat' --out-prefix output  --mapq 30", "traceback": null, "params": {"nx": "\"false\"", "mapq": "\"30\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"auto\""}, "inputs": {"input": {"id": "43a0297637d6aa03", "src": "hda", "uuid": "717b7560-e012-4031-9fe1-e1f5631b3577"}}, "outputs": {"outputpdf": {"id": "ac57eca498e99e10", "src": "hda", "uuid": "b433ca58-dc75-42aa-b08c-ba88f7e7d8e4"}, "outputxls": {"id": "b3cae573ff9233c4", "src": "hda", "uuid": "466fb374-ca60-479e-95d6-4edd267120be"}, "outputr": {"id": "e8c502a73fde8a16", "src": "hda", "uuid": "cc06d2a6-353b-41e1-825e-b58b77fab555"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Read BAM file ...  Done\ngenerating data matrix ...\ngenerating R script  ...\n", "job_stdout": "", "job_stderr": "", "stderr": "Read BAM file ...  Done\ngenerating data matrix ...\ngenerating R script  ...\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:33:59", "plugin": "core", "name": "end_epoch", "raw_value": "1662827639.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:33:58", "plugin": "core", "name": "start_epoch", "raw_value": "1662827638.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_distribution/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_distribution", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 115.04593062400818, "inputs": {"input": {"src": "hda", "id": "a506c0ed1dd1c920"}, "refgene": {"src": "hda", "id": "242a851e6dd94da6"}}, "job": {"model_class": "Job", "id": "480d1142b4370899", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:40:28.372309", "create_time": "2022-09-10T16:38:50.427928", "galaxy_version": "21.09", "command_version": "read_distribution.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_distribution/2.6.4.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-nlm2p", "command_line": "read_distribution.py -i '/galaxy/server/database/objects/3/7/9/dataset_379c503c-cc3b-4fa1-bd62-9a7f5c2feed5.dat' -r '/galaxy/server/database/objects/c/4/a/dataset_c4aa7568-470c-420f-b6a2-4f251189424f.dat' > '/galaxy/server/database/objects/8/f/f/dataset_8ff0d0ac-8c72-4b50-b315-3f7bd4179970.dat'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "a506c0ed1dd1c920", "src": "hda", "uuid": "379c503c-cc3b-4fa1-bd62-9a7f5c2feed5"}, "refgene": {"id": "1c0f3b60a181dbb0", "src": "hda", "uuid": "c4aa7568-470c-420f-b6a2-4f251189424f"}}, "outputs": {"output": {"id": "098cfcf85c014a0f", "src": "hda", "uuid": "8ff0d0ac-8c72-4b50-b315-3f7bd4179970"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "processing /galaxy/server/database/objects/c/4/a/dataset_c4aa7568-470c-420f-b6a2-4f251189424f.dat ... Done\nprocessing /galaxy/server/database/objects/3/7/9/dataset_379c503c-cc3b-4fa1-bd62-9a7f5c2feed5.dat ... Finished\n\n", "stderr": "\nprocessing /galaxy/server/database/objects/c/4/a/dataset_c4aa7568-470c-420f-b6a2-4f251189424f.dat ... Done\nprocessing /galaxy/server/database/objects/3/7/9/dataset_379c503c-cc3b-4fa1-bd62-9a7f5c2feed5.dat ... Finished\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:40:14", "plugin": "core", "name": "start_epoch", "raw_value": "1662828014.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:40:15", "plugin": "core", "name": "end_epoch", "raw_value": "1662828015.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_duplication/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_duplication", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 137.99726915359497, "inputs": {"input": {"src": "hda", "id": "43a0297637d6aa03"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "b3cae573ff9233c4", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:34:22.278963", "create_time": "2022-09-10T16:32:23.597527", "galaxy_version": "21.09", "command_version": "read_duplication.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_duplication/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-jv95d", "command_line": "read_duplication.py -i '/galaxy/server/database/objects/7/1/7/dataset_717b7560-e012-4031-9fe1-e1f5631b3577.dat' -o output -u 500 -q 30", "traceback": null, "params": {"upLimit": "\"500\"", "mapq": "\"30\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"auto\""}, "inputs": {"input": {"id": "43a0297637d6aa03", "src": "hda", "uuid": "717b7560-e012-4031-9fe1-e1f5631b3577"}}, "outputs": {"outputpdf": {"id": "bd36b6ba6fdc093b", "src": "hda", "uuid": "c6e536a1-de70-4a6d-84e3-fae526a13e0e"}, "outputxls": {"id": "67283b15ecec3a5b", "src": "hda", "uuid": "0dcbf799-6240-40bb-b4e2-cc97c022331d"}, "outputseqxls": {"id": "515b273a0d10ae76", "src": "hda", "uuid": "e2cc4fb0-e728-4b2b-874d-3f6938b3ca80"}, "outputr": {"id": "78ae44efffff519a", "src": "hda", "uuid": "0fda1b47-be67-45d5-9c9a-bd9960f5ea0f"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nreport duplicte rate based on sequence ...\nreport duplicte rate based on mapping  ...\ngenerate R script ...\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nreport duplicte rate based on sequence ...\nreport duplicte rate based on mapping  ...\ngenerate R script ...\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:33:58", "plugin": "core", "name": "end_epoch", "raw_value": "1662827638.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:33:58", "plugin": "core", "name": "start_epoch", "raw_value": "1662827638.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 100.85512447357178, "inputs": {"inputs": {"src": "hda", "id": "45585f7ee8befdcd"}}, "job": {"model_class": "Job", "id": "fc852b6259673048", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:42:09.186759", "create_time": "2022-09-10T16:40:44.063740", "galaxy_version": "21.09", "command_version": "read_hexamer.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-hc56b", "command_line": "ln -sf '/galaxy/server/database/objects/3/c/a/dataset_3ca268c9-b7e4-45e9-989f-e96d16afcb12.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq\" && read_hexamer.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq' > '/galaxy/server/database/objects/5/4/b/dataset_54b3c205-4a3c-42c6-a1f1-229422ac0e1f.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "refgene": null, "refgenome": null}, "inputs": {"inputs": {"id": "45585f7ee8befdcd", "src": "hda", "uuid": "3ca268c9-b7e4-45e9-989f-e96d16afcb12"}}, "outputs": {"output": {"id": "c0f459531426022b", "src": "hda", "uuid": "54b3c205-4a3c-42c6-a1f1-229422ac0e1f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\n", "stderr": "\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:41:58", "plugin": "core", "name": "start_epoch", "raw_value": "1662828118.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:41:58", "plugin": "core", "name": "end_epoch", "raw_value": "1662828118.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer", "tool_version": "2.6.4", "test_index": 1, "time_seconds": 102.37152314186096, "inputs": {"inputs": {"src": "hda", "id": "99fdc437e77885d9"}}, "job": {"model_class": "Job", "id": "06107574e5ed219b", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:42:17.890530", "create_time": "2022-09-10T16:40:48.620910", "galaxy_version": "21.09", "command_version": "read_hexamer.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-hn5wg", "command_line": "gunzip -c '/galaxy/server/database/objects/9/c/d/dataset_9cd35b32-5f2f-4cc7-8e44-6fcdbabbc76e.dat' > \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz\" && read_hexamer.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz' > '/galaxy/server/database/objects/b/2/9/dataset_b298b9b6-7c34-48aa-866c-bdc6b48bb70a.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "refgene": null, "refgenome": null}, "inputs": {"inputs": {"id": "99fdc437e77885d9", "src": "hda", "uuid": "9cd35b32-5f2f-4cc7-8e44-6fcdbabbc76e"}}, "outputs": {"output": {"id": "4242e0006d14176f", "src": "hda", "uuid": "b298b9b6-7c34-48aa-866c-bdc6b48bb70a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz file ... Done\n", "stderr": "\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz file ... Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:42:02", "plugin": "core", "name": "start_epoch", "raw_value": "1662828122.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:42:02", "plugin": "core", "name": "end_epoch", "raw_value": "1662828122.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer", "tool_version": "2.6.4", "test_index": 2, "time_seconds": 108.07375311851501, "inputs": {"inputs": [{"src": "hda", "id": "49b1f477c4dd2691"}, {"src": "hda", "id": "74e45278bfbc596c"}]}, "job": {"model_class": "Job", "id": "a4b9a0f8b79be117", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:43:51.877462", "create_time": "2022-09-10T16:42:24.132925", "galaxy_version": "21.09", "command_version": "read_hexamer.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-gjr2k", "command_line": "ln -sf '/galaxy/server/database/objects/4/5/3/dataset_453ea2a0-93ed-4634-ac5e-3bd76afaede6.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq\" &&    ln -sf '/galaxy/server/database/objects/0/6/3/dataset_063de57d-5164-4596-8261-ffa12a7f82c8.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq\" && read_hexamer.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq,pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq' > '/galaxy/server/database/objects/a/c/e/dataset_ace79c92-93c4-4a9c-938e-9a86722067be.dat'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "refgene": null, "refgenome": null}, "inputs": {"inputs1": {"id": "49b1f477c4dd2691", "src": "hda", "uuid": "453ea2a0-93ed-4634-ac5e-3bd76afaede6"}, "inputs": {"id": "49b1f477c4dd2691", "src": "hda", "uuid": "453ea2a0-93ed-4634-ac5e-3bd76afaede6"}, "inputs2": {"id": "74e45278bfbc596c", "src": "hda", "uuid": "063de57d-5164-4596-8261-ffa12a7f82c8"}}, "outputs": {"output": {"id": "08a9fa5cb8c295f5", "src": "hda", "uuid": "ace79c92-93c4-4a9c-938e-9a86722067be"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq file ... Done\n", "stderr": "\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq file ... Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:43:42", "plugin": "core", "name": "end_epoch", "raw_value": "1662828222.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:43:42", "plugin": "core", "name": "start_epoch", "raw_value": "1662828222.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer", "tool_version": "2.6.4", "test_index": 3, "time_seconds": 99.49208331108093, "inputs": {"inputs": [{"src": "hda", "id": "49b1f477c4dd2691"}, {"src": "hda", "id": "49b1f477c4dd2691"}]}, "job": {"model_class": "Job", "id": "607031269ee0ddc8", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:43:48.631569", "create_time": "2022-09-10T16:42:27.386225", "galaxy_version": "21.09", "command_version": "read_hexamer.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-lmg6x", "command_line": "ln -sf '/galaxy/server/database/objects/4/5/3/dataset_453ea2a0-93ed-4634-ac5e-3bd76afaede6.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq\" &&    ln -sf '/galaxy/server/database/objects/4/5/3/dataset_453ea2a0-93ed-4634-ac5e-3bd76afaede6.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1\" && read_hexamer.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq,pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1' > '/galaxy/server/database/objects/8/3/2/dataset_8324495f-4415-4b4a-9946-f01c9729f11a.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "refgene": null, "refgenome": null}, "inputs": {"inputs2": {"id": "49b1f477c4dd2691", "src": "hda", "uuid": "453ea2a0-93ed-4634-ac5e-3bd76afaede6"}, "inputs1": {"id": "49b1f477c4dd2691", "src": "hda", "uuid": "453ea2a0-93ed-4634-ac5e-3bd76afaede6"}, "inputs": {"id": "49b1f477c4dd2691", "src": "hda", "uuid": "453ea2a0-93ed-4634-ac5e-3bd76afaede6"}}, "outputs": {"output": {"id": "691bddc003cb1278", "src": "hda", "uuid": "8324495f-4415-4b4a-9946-f01c9729f11a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1 file ... Done\n", "stderr": "\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1 file ... Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:43:40", "plugin": "core", "name": "end_epoch", "raw_value": "1662828220.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:43:39", "plugin": "core", "name": "start_epoch", "raw_value": "1662828219.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_quality/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_quality", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 101.29010725021362, "inputs": {"input": {"src": "hda", "id": "9f25dae41bef72c4"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "bca1da2ae51e7f53", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:42:03.079141", "create_time": "2022-09-10T16:40:42.143241", "galaxy_version": "21.09", "command_version": "read_quality.py 2.6.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_quality/2.6.4", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-8wlff", "command_line": "read_quality.py --input-file '/galaxy/server/database/objects/4/5/8/dataset_4585bc75-dbc3-4c8c-959a-f4aa8cba488e.dat' --out-prefix output -r 1000 --mapq 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\"", "reduce": "\"1000\""}, "inputs": {"input": {"id": "9f25dae41bef72c4", "src": "hda", "uuid": "4585bc75-dbc3-4c8c-959a-f4aa8cba488e"}}, "outputs": {"outputheatpdf": {"id": "644500c8eb392ead", "src": "hda", "uuid": "87eef7d5-24b0-437c-87e1-9bda54c168e3"}, "outputboxpdf": {"id": "a31b837e6d285df7", "src": "hda", "uuid": "08655c46-56c9-477d-9695-ba2a82343396"}, "outputr": {"id": "f2ce19db76ad1135", "src": "hda", "uuid": "7e95edbb-b57b-4719-9078-5959a0fc4144"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \nnull device \n          1 \n", "tool_stderr": "Read BAM file ...  Done\n", "job_stdout": "", "job_stderr": "", "stderr": "Read BAM file ...  Done\n", "stdout": "null device \n          1 \nnull device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:41:54", "plugin": "core", "name": "start_epoch", "raw_value": "1662828114.0000000"}, {"title": "Job End Time", "value": "2022-09-10 16:41:55", "plugin": "core", "name": "end_epoch", "raw_value": "1662828115.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_tin/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_tin", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 120.41976475715637, "inputs": {"input": {"src": "hda", "id": "5e967719aa90bbde"}, "refgene": {"src": "hda", "id": "a4b9a0f8b79be117"}}, "job": {"model_class": "Job", "id": "5a5fa198ccc6dcda", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T16:40:20.681215", "create_time": "2022-09-10T16:38:33.928104", "galaxy_version": "21.09", "command_version": "tin.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_tin/2.6.4.1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-r66t8", "command_line": "ln -sf '/galaxy/server/database/objects/4/3/d/dataset_43d72ca8-a953-40fc-9856-c7dc1d2316a2.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/e/b/a/metadata_eba263bd-7880-4d8f-bbc4-516c1aeeb1c8.dat' 'input.bam.bai' && tin.py -i 'input.bam' --refgene='/galaxy/server/database/objects/f/f/1/dataset_ff198f05-6564-46d0-85d8-da1940bf32a0.dat' --minCov=10 --sample-size=100", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "subtractbackground": "\"false\"", "samplesize": "\"100\"", "minCov": "\"10\""}, "inputs": {"input": {"id": "5e967719aa90bbde", "src": "hda", "uuid": "43d72ca8-a953-40fc-9856-c7dc1d2316a2"}, "refgene": {"id": "0f36854868e1cccf", "src": "hda", "uuid": "ff198f05-6564-46d0-85d8-da1940bf32a0"}}, "outputs": {"outputsummary": {"id": "607031269ee0ddc8", "src": "hda", "uuid": "fe2c947d-068f-44d8-8c32-11c4e07c555a"}, "outputxls": {"id": "02fd1d16203b59b0", "src": "hda", "uuid": "533c56aa-f633-4048-adb9-d5ecbe1cd46d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "@ 2022-09-10 16:40:12: Get BAM file(s) ...\nTotal 1 BAM file(s):\n\tinput.bam\n@ 2022-09-10 16:40:12: Processing input.bam\n 2 transcripts finished\r", "job_stdout": "", "job_stderr": "", "stderr": "@ 2022-09-10 16:40:12: Get BAM file(s) ...\nTotal 1 BAM file(s):\n\tinput.bam\n@ 2022-09-10 16:40:12: Processing input.bam\n 2 transcripts finished\r", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-09-10 16:40:12", "plugin": "core", "name": "end_epoch", "raw_value": "1662828012.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 16:40:12", "plugin": "core", "name": "start_epoch", "raw_value": "1662828012.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 0, "time_seconds": 214.96659207344055, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "8709eb9f3835c938"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "97a128b947f17303"}}, "job": {"model_class": "Job", "id": "b117a3e12d33bd07", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:10:39.015256", "create_time": "2022-09-10T17:07:15.028645", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-84sqf", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/0/6/1/dataset_061b1065-dd35-4fb0-8b46-0fc84ffe6773.dat --pe1-2 fastq:/galaxy/server/database/objects/0/a/e/dataset_0ae8691a-f62c-47a9-9612-98829ab00b32.dat && python '/galaxy/server/database/jobs_directory/000/234/configs/tmpswehr7v4' < contigs.fasta > '/galaxy/server/database/objects/d/5/c/dataset_d5c91e9e-b4cd-49b0-b727-76b4d10a50b8.dat' && python '/galaxy/server/database/jobs_directory/000/234/configs/tmpswehr7v4' < scaffolds.fasta > '/galaxy/server/database/objects/b/e/a/dataset_beaaf595-eeff-46bb-b1cb-86044a75ffcc.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 276, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 277, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "8709eb9f3835c938", "src": "hda", "uuid": "061b1065-dd35-4fb0-8b46-0fc84ffe6773"}, "libraries_0|files_0|rev_reads": {"id": "97a128b947f17303", "src": "hda", "uuid": "0ae8691a-f62c-47a9-9612-98829ab00b32"}}, "outputs": {"out_log": {"id": "8d3180c5cf7082f0", "src": "hda", "uuid": "68417699-41bd-4a0d-a7b1-2fc948734de0"}, "out_scaffolds": {"id": "1281de2d239e4a2c", "src": "hda", "uuid": "f36dcd77-4807-4f17-80c0-015df9cf0b1a"}, "out_contigs": {"id": "352d4d9f04a40406", "src": "hda", "uuid": "af0d0a02-73e1-436d-b6a1-02929794b530"}, "out_scaffold_stats": {"id": "63e88a39c510c7d2", "src": "hda", "uuid": "beaaf595-eeff-46bb-b1cb-86044a75ffcc"}, "out_contig_stats": {"id": "48c3ad7feb1e0bdf", "src": "hda", "uuid": "d5c91e9e-b4cd-49b0-b727-76b4d10a50b8"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/234/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/0/6/1/dataset_061b1065-dd35-4fb0-8b46-0fc84ffe6773.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/0/a/e/dataset_0ae8691a-f62c-47a9-9612-98829ab00b32.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/234/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/0/6/1/dataset_061b1065-dd35-4fb0-8b46-0fc84ffe6773.dat']\n      right reads: ['/galaxy/server/database/objects/0/a/e/dataset_0ae8691a-f62c-47a9-9612-98829ab00b32.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/234/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/234/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/234/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/234/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/6/1/dataset_061b1065-dd35-4fb0-8b46-0fc84ffe6773.dat\n  0:00:00.515     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/a/e/dataset_0ae8691a-f62c-47a9-9612-98829ab00b32.dat\n  0:00:00.980     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.986    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.186    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.186    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.288    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.320    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.343    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.346    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.348    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.349    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.357    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.357    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.357    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/6/1/dataset_061b1065-dd35-4fb0-8b46-0fc84ffe6773.dat\n  0:00:01.384    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/a/e/dataset_0ae8691a-f62c-47a9-9612-98829ab00b32.dat\n  0:00:01.408    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.408    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.408    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.413    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.413    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.424    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.424    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.424    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.424    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/0/6/1/dataset_061b1065-dd35-4fb0-8b46-0fc84ffe6773.dat and /galaxy/server/database/objects/0/a/e/dataset_0ae8691a-f62c-47a9-9612-98829ab00b32.dat\n  0:00:01.438    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.444    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.446    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.474    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.474    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.474    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/234/working/corrected/corrected.yaml\n  0:00:01.478    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/234/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/234/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/234/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.076    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.079     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.176   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.179     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.278   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.332     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.332     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.332     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.333     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.333     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.333     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.333     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.469     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.471    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.472    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.526    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.526    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.560    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.561    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.561    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.562    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.562    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.562    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.058     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.065    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.305    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.306    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.443    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.479    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.498    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.498    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.499    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.500    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:06.026    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.027    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.027    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.027    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.027    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.027    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.027    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.027    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.027    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.027    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.027    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.027    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.037    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.037    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.037    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.039    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.039    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.039    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/before_rr.fasta\n  0:00:06.043    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph.fastg\n  0:00:06.048    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/simplified_contigs.fasta\n  0:00:06.052    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/intermediate_contigs.fasta\n  0:00:06.060    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.060    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.060    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.060    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.060    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.060    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:06.081    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.172    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.427    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.427    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:06.433    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.488   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.492   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.495   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.498   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.498   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.498   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.507   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.512   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.528    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.528    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.528    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.528    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.529    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.529    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.529    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.529    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.529    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.529    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.529    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.529    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.529    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.529    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.532    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.532    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.532    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.532    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.532    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.532    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.532    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.532    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.532    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.532    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.532    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.533    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/before_rr.fasta\n  0:00:06.538    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph.fastg\n  0:00:06.542    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/234/working//K33/final_contigs.paths\n  0:00:06.551    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/234/working//K33/scaffolds.paths\n  0:00:06.580    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.582    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/234/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/234/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/234/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/234/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/234/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/234/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/234/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/234/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/234/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/0/6/1/dataset_061b1065-dd35-4fb0-8b46-0fc84ffe6773.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/0/a/e/dataset_0ae8691a-f62c-47a9-9612-98829ab00b32.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/234/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/0/6/1/dataset_061b1065-dd35-4fb0-8b46-0fc84ffe6773.dat']\n      right reads: ['/galaxy/server/database/objects/0/a/e/dataset_0ae8691a-f62c-47a9-9612-98829ab00b32.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/234/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/234/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/234/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/234/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/6/1/dataset_061b1065-dd35-4fb0-8b46-0fc84ffe6773.dat\n  0:00:00.515     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/a/e/dataset_0ae8691a-f62c-47a9-9612-98829ab00b32.dat\n  0:00:00.980     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.986    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.186    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.186    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.288    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.320    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.343    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.346    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.348    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.349    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.357    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.357    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.357    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/6/1/dataset_061b1065-dd35-4fb0-8b46-0fc84ffe6773.dat\n  0:00:01.384    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/a/e/dataset_0ae8691a-f62c-47a9-9612-98829ab00b32.dat\n  0:00:01.408    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.408    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.408    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.413    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.413    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.413    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.424    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.424    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.424    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.424    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/0/6/1/dataset_061b1065-dd35-4fb0-8b46-0fc84ffe6773.dat and /galaxy/server/database/objects/0/a/e/dataset_0ae8691a-f62c-47a9-9612-98829ab00b32.dat\n  0:00:01.438    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.444    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.446    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.474    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.474    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.474    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/234/working/corrected/corrected.yaml\n  0:00:01.478    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/234/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/234/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/234/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.076    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.079     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.176   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.179     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.278   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.332     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.332     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.332     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.333     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.333     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.333     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.333     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.469     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.471    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.472    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.526    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.526    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.560    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.561    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.561    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.562    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.562    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.562    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.058     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.065    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.305    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.306    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.443    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.479    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.498    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.498    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.499    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.500    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:06.026    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.027    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.027    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.027    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.027    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.027    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.027    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.027    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.027    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.027    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.027    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.027    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.037    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.037    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.037    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.039    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.039    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.039    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/before_rr.fasta\n  0:00:06.043    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph.fastg\n  0:00:06.048    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/simplified_contigs.fasta\n  0:00:06.052    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/intermediate_contigs.fasta\n  0:00:06.060    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.060    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.060    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.060    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.060    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.060    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:06.081    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.172    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.427    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.427    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:06.433    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.488   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.492   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.495   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.498   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.498   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.498   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.507   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.512   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.528    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.528    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.528    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.528    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.529    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.529    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.529    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.529    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.529    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.529    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.529    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.529    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.529    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.529    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.529    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.532    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.532    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.532    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.532    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.532    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.532    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.532    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.532    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.532    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.532    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.532    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.532    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.532    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.533    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/before_rr.fasta\n  0:00:06.538    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph.fastg\n  0:00:06.542    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/234/working//K33/final_contigs.paths\n  0:00:06.551    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/234/working//K33/scaffolds.paths\n  0:00:06.580    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.582    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/234/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/234/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/234/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/234/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/234/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/234/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/234/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/234/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "9 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "9.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:10:28", "plugin": "core", "name": "end_epoch", "raw_value": "1662829828.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:10:19", "plugin": "core", "name": "start_epoch", "raw_value": "1662829819.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 1, "time_seconds": 127.22700023651123, "inputs": {"sc": false, "onlyassembler": true, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "c5e369792eec2812"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "2444d2f6e250470b"}}, "job": {"model_class": "Job", "id": "328afd22eff379d3", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:10:52.871258", "create_time": "2022-09-10T17:08:59.755898", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-9dcsr", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output  --only-assembler  -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fasta:/galaxy/server/database/objects/5/9/6/dataset_596658dd-a1e7-4bee-9b7f-06fc89c78553.dat --pe1-2 fasta:/galaxy/server/database/objects/1/7/0/dataset_17008e74-daba-46e1-b8ff-ec11373444c8.dat && python '/galaxy/server/database/jobs_directory/000/237/configs/tmp5a8ol6hz' < contigs.fasta > '/galaxy/server/database/objects/7/5/c/dataset_75c57f73-24b3-4c83-9d17-08701d6e511c.dat' && python '/galaxy/server/database/jobs_directory/000/237/configs/tmp5a8ol6hz' < scaffolds.fasta > '/galaxy/server/database/objects/d/f/5/dataset_df5bf8cb-a461-49c7-86d9-159cd5bf01b6.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 283, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 284, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"true\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "c5e369792eec2812", "src": "hda", "uuid": "596658dd-a1e7-4bee-9b7f-06fc89c78553"}, "libraries_0|files_0|rev_reads": {"id": "2444d2f6e250470b", "src": "hda", "uuid": "17008e74-daba-46e1-b8ff-ec11373444c8"}}, "outputs": {"out_log": {"id": "2f5437f94da7327b", "src": "hda", "uuid": "a25fec6e-2e6e-46a2-b1b1-3957266ea9fe"}, "out_scaffolds": {"id": "16829b3dc2bc6178", "src": "hda", "uuid": "ef1ae67e-cd02-4faf-b4fc-7e06562d81a9"}, "out_contigs": {"id": "c152dc96a57234aa", "src": "hda", "uuid": "9ca9ddce-f672-439c-9d6c-f725a3694b22"}, "out_scaffold_stats": {"id": "69687329205b4bd7", "src": "hda", "uuid": "df5bf8cb-a461-49c7-86d9-159cd5bf01b6"}, "out_contig_stats": {"id": "446f72ff0f4af45e", "src": "hda", "uuid": "75c57f73-24b3-4c83-9d17-08701d6e511c"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/237/working\t--disable-gzip-output\t--only-assembler\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfasta:/galaxy/server/database/objects/5/9/6/dataset_596658dd-a1e7-4bee-9b7f-06fc89c78553.dat\t--pe1-2\tfasta:/galaxy/server/database/objects/1/7/0/dataset_17008e74-daba-46e1-b8ff-ec11373444c8.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/237/working\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/5/9/6/dataset_596658dd-a1e7-4bee-9b7f-06fc89c78553.dat']\n      right reads: ['/galaxy/server/database/objects/1/7/0/dataset_17008e74-daba-46e1-b8ff-ec11373444c8.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/237/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/237/working/spades.log\n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/237/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/237/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.062    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.065     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.162   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.166     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.260   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.316     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.316     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611\n  0:00:00.316     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.317     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.318     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.318     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.318     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.443     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.445    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.445    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.511    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:00.511    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.537    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.538    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.538    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.539    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.539    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.539    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.035     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.\n  0:00:01.042    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.256    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.\n  0:00:01.256    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.377    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.408    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.424    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).\n  0:00:01.425    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.427    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.428    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph\n  0:00:01.428    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths\n  0:00:01.429    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted\n  0:00:01.429    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops\n  0:00:01.429    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.429    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.429    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.430    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.442    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).\n  0:00:01.442    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.453    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM\n  0:00:01.458    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding\n  0:00:01.458    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0\n  0:00:01.458    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356\n  0:00:01.458    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478\n  0:00:01.458    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.495    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.590    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:01.939    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:02.530    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:03.609    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:05.376    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849\n  0:00:05.378    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568\n  0:00:05.378    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251\n  0:00:05.378    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135\n  0:00:05.378    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738\n  0:00:05.378    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705\n  0:00:05.378    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135\n  0:00:05.378    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0\n  0:00:05.378    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer\n  0:00:05.378    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill\n  0:00:05.379    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:05.379    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:05.379    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:05.380    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:05.380    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:05.917     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.\n  0:00:05.923    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:06.140    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:06.140    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:06.259    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:06.289    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:06.308    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).\n  0:00:06.308    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.\n  0:00:06.309    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled\n  0:00:06.310    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps\n  0:00:06.311    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)\n  0:00:06.314    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads\n  0:00:06.314    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices\n  0:00:06.314    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:06.314    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.315    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification\n  0:00:06.316    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:06.316    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times\n  0:00:06.316    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification\n  0:00:06.316    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started\n  0:00:06.316    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00\n..\n    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:07.252    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.253    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.253    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.253    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.253    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.253    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.253    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.253    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.254    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.254    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.254    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865\n  0:00:07.254    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.254    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.254    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.262    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.262    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.262    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.264    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.264    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/237/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.264    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K33/before_rr.fasta\n  0:00:07.269    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/237/working//K33/assembly_graph.fastg\n  0:00:07.274    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K33/simplified_contigs.fasta\n  0:00:07.277    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K33/intermediate_contigs.fasta\n  0:00:07.284    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.284    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.284    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.284    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.284    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.284    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.310    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.396    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:07.655    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:07.655    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges\n  0:00:07.661    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100\n  0:00:07.713   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:07.716   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.719   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:07.722   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:07.723   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:07.723   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:07.731   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.737   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:07.750    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:07.750    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:07.750    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:07.750    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:07.752    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:07.752    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:07.752    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:07.752    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:07.752    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:07.752    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:07.752    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:07.752    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:07.752    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:07.752    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:07.753    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:07.753    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:07.753    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:07.753    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:07.753    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:07.753    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:07.753    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:07.753    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:07.753    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:07.753    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.753    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/237/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.754    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K33/before_rr.fasta\n  0:00:07.759    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/237/working//K33/assembly_graph.fastg\n  0:00:07.765    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/237/working//K33/final_contigs.paths\n  0:00:07.773    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/237/working//K33/scaffolds.paths\n  0:00:07.789    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:07.791    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 7 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/237/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/237/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/237/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/237/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/237/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/237/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/237/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/237/working\t--disable-gzip-output\t--only-assembler\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfasta:/galaxy/server/database/objects/5/9/6/dataset_596658dd-a1e7-4bee-9b7f-06fc89c78553.dat\t--pe1-2\tfasta:/galaxy/server/database/objects/1/7/0/dataset_17008e74-daba-46e1-b8ff-ec11373444c8.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/237/working\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/5/9/6/dataset_596658dd-a1e7-4bee-9b7f-06fc89c78553.dat']\n      right reads: ['/galaxy/server/database/objects/1/7/0/dataset_17008e74-daba-46e1-b8ff-ec11373444c8.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/237/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/237/working/spades.log\n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/237/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/237/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.062    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.065     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.162   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.166     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.260   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.316     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.316     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611\n  0:00:00.316     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.317     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.318     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.318     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.318     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.443     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.445    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.445    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.511    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:00.511    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.537    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.538    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.538    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.539    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.539    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.539    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.035     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.\n  0:00:01.042    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.256    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.\n  0:00:01.256    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.377    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.408    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.424    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).\n  0:00:01.425    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.427    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.428    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph\n  0:00:01.428    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths\n  0:00:01.429    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted\n  0:00:01.429    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops\n  0:00:01.429    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.429    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.429    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.430    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.442    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).\n  0:00:01.442    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.453    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM\n  0:00:01.458    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding\n  0:00:01.458    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0\n  0:00:01.458    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356\n  0:00:01.458    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478\n  0:00:01.458    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.495    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.590    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:01.939    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:02.530    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:03.609    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:05.376    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849\n  0:00:05.378    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568\n  0:00:05.378    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251\n  0:00:05.378    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135\n  0:00:05.378    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738\n  0:00:05.378    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705\n  0:00:05.378    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135\n  0:00:05.378    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0\n  0:00:05.378    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer\n  0:00:05.378    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill\n  0:00:05.379    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:05.379    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:05.379    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:05.380    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:05.380    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:05.917     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.\n  0:00:05.923    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:06.140    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:06.140    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:06.259    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:06.289    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:06.308    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).\n  0:00:06.308    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.\n  0:00:06.309    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled\n  0:00:06.310    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps\n  0:00:06.311    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)\n  0:00:06.314    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads\n  0:00:06.314    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices\n  0:00:06.314    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:06.314    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.315    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification\n  0:00:06.316    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:06.316    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover\n  0:00:06.316    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times\n  0:00:06.316    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification\n  0:00:06.316    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started\n  0:00:06.316    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00\n..\n    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:07.252    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.253    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.253    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.253    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.253    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.253    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.253    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.253    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.254    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.254    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.254    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.254    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865\n  0:00:07.254    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.254    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.254    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.262    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.262    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.262    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.264    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.264    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/237/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.264    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K33/before_rr.fasta\n  0:00:07.269    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/237/working//K33/assembly_graph.fastg\n  0:00:07.274    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K33/simplified_contigs.fasta\n  0:00:07.277    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K33/intermediate_contigs.fasta\n  0:00:07.284    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.284    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.284    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.284    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.284    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.284    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.310    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.396    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:07.655    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:07.655    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges\n  0:00:07.661    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100\n  0:00:07.713   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:07.716   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.719   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:07.722   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:07.723   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:07.723   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:07.731   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.737   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:07.750    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:07.750    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:07.750    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:07.750    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:07.752    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:07.752    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:07.752    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:07.752    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:07.752    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:07.752    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:07.752    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:07.752    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:07.752    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:07.752    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:07.752    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:07.753    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:07.753    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:07.753    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:07.753    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:07.753    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:07.753    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:07.753    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:07.753    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:07.753    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:07.753    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:07.753    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:07.753    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.753    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/237/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.754    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K33/before_rr.fasta\n  0:00:07.759    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/237/working//K33/assembly_graph.fastg\n  0:00:07.765    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/237/working//K33/final_contigs.paths\n  0:00:07.773    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/237/working//K33/scaffolds.paths\n  0:00:07.789    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:07.791    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 7 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/237/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/237/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/237/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/237/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/237/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/237/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/237/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "8 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "8.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:10:42", "plugin": "core", "name": "end_epoch", "raw_value": "1662829842.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:10:34", "plugin": "core", "name": "start_epoch", "raw_value": "1662829834.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 2, "time_seconds": 109.92898368835449, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "a33ba3a9a383dd54"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "9f6433a3e934e540"}}, "job": {"model_class": "Job", "id": "99f36f82636a23f4", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:12:04.674593", "create_time": "2022-09-10T17:10:28.410667", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-9xz99", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/2/8/4/dataset_284f77a8-6a48-4b45-af5f-2b39358599fe.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/c/f/a/dataset_cfafc6df-a60c-4a69-bb96-1548e546cad3.dat && python '/galaxy/server/database/jobs_directory/000/242/configs/tmpu3ddke_d' < contigs.fasta > '/galaxy/server/database/objects/7/3/b/dataset_73b385cd-57ce-41ea-b3ad-004d351588eb.dat' && python '/galaxy/server/database/jobs_directory/000/242/configs/tmpu3ddke_d' < scaffolds.fasta > '/galaxy/server/database/objects/9/0/3/dataset_90366647-ea8e-475b-8b01-3ccb8b376bf8.dat'", "traceback": null, "params": {"__input_ext": "\"fastq.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 290, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 291, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "a33ba3a9a383dd54", "src": "hda", "uuid": "284f77a8-6a48-4b45-af5f-2b39358599fe"}, "libraries_0|files_0|rev_reads": {"id": "9f6433a3e934e540", "src": "hda", "uuid": "cfafc6df-a60c-4a69-bb96-1548e546cad3"}}, "outputs": {"out_log": {"id": "9f7e63bf08f64056", "src": "hda", "uuid": "2b73e66a-1b59-40bb-90bd-17d3a8bb5302"}, "out_scaffolds": {"id": "9ec29ae13bd7be77", "src": "hda", "uuid": "556b60dd-a264-4776-9da9-97ef1ae4731f"}, "out_contigs": {"id": "1fb0a48cbb34da7c", "src": "hda", "uuid": "adbb456c-7607-4dc7-ab74-34c793c0e76b"}, "out_scaffold_stats": {"id": "a0dab9617aafa6a5", "src": "hda", "uuid": "90366647-ea8e-475b-8b01-3ccb8b376bf8"}, "out_contig_stats": {"id": "3224aaa5f2b6690f", "src": "hda", "uuid": "73b385cd-57ce-41ea-b3ad-004d351588eb"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/242/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/2/8/4/dataset_284f77a8-6a48-4b45-af5f-2b39358599fe.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/c/f/a/dataset_cfafc6df-a60c-4a69-bb96-1548e546cad3.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/242/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/2/8/4/dataset_284f77a8-6a48-4b45-af5f-2b39358599fe.dat']\n      right reads: ['/galaxy/server/database/objects/c/f/a/dataset_cfafc6df-a60c-4a69-bb96-1548e546cad3.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/242/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/242/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/242/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/242/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.005     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.007     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.008     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.008     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.008     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.008     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/8/4/dataset_284f77a8-6a48-4b45-af5f-2b39358599fe.dat\n  0:00:00.455     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/c/f/a/dataset_cfafc6df-a60c-4a69-bb96-1548e546cad3.dat\n  0:00:00.950     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.956    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.186    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.187    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.305    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.335    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.353    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.354    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.356    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.358    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.367    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.367    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.367    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/8/4/dataset_284f77a8-6a48-4b45-af5f-2b39358599fe.dat\n  0:00:01.396    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/c/f/a/dataset_cfafc6df-a60c-4a69-bb96-1548e546cad3.dat\n  0:00:01.424    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.424    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.424    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.430    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.430    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.447    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.447    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.447    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.447    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/2/8/4/dataset_284f77a8-6a48-4b45-af5f-2b39358599fe.dat and /galaxy/server/database/objects/c/f/a/dataset_cfafc6df-a60c-4a69-bb96-1548e546cad3.dat\n  0:00:01.467    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.473    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.476    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.504    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.504    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.504    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/242/working/corrected/corrected.yaml\n  0:00:01.510    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/242/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/242/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/242/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.066    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.071     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.168   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.173     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.273   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.327     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.327     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.327     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.328     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.329     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.329     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.329     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.451     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.453    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.453    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.508    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.508    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.534    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.535    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.535    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.536    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.536    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.536    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:00.996     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.004    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.205    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.205    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.321    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.349    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.369    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.369    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.370    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.371    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n 0:00:05.737    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:05.737    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:05.737    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:05.738    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:05.738    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:05.738    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:05.738    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:05.738    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:05.738    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:05.738    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:05.738    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:05.738    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:05.746    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:05.746    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:05.746    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:05.749    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.749    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/242/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:05.750    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/242/working//K33/before_rr.fasta\n  0:00:05.754    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/242/working//K33/assembly_graph.fastg\n  0:00:05.757    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/242/working//K33/simplified_contigs.fasta\n  0:00:05.761    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/242/working//K33/intermediate_contigs.fasta\n  0:00:05.767    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:05.767    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:05.767    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:05.767    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:05.767    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:05.767    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:05.791    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.878    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.135    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.135    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:06.141    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.197   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.199   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.203   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.204   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.204   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.204   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.211   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.216   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.227    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.227    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.227    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.227    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.227    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.227    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.227    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.227    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.227    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.227    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.227    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.227    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.228    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.228    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.228    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.228    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.228    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.228    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.228    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.228    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.228    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.228    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.228    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/242/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.229    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/242/working//K33/before_rr.fasta\n  0:00:06.233    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/242/working//K33/assembly_graph.fastg\n  0:00:06.236    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/242/working//K33/final_contigs.paths\n  0:00:06.242    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/242/working//K33/scaffolds.paths\n  0:00:06.257    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.258    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/242/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/242/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/242/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/242/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/242/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/242/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/242/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/242/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/242/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/2/8/4/dataset_284f77a8-6a48-4b45-af5f-2b39358599fe.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/c/f/a/dataset_cfafc6df-a60c-4a69-bb96-1548e546cad3.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/242/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/2/8/4/dataset_284f77a8-6a48-4b45-af5f-2b39358599fe.dat']\n      right reads: ['/galaxy/server/database/objects/c/f/a/dataset_cfafc6df-a60c-4a69-bb96-1548e546cad3.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/242/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/242/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/242/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/242/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.005     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.007     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.008     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.008     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.008     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.008     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/8/4/dataset_284f77a8-6a48-4b45-af5f-2b39358599fe.dat\n  0:00:00.455     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/c/f/a/dataset_cfafc6df-a60c-4a69-bb96-1548e546cad3.dat\n  0:00:00.950     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.956    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.186    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.187    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.305    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.335    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.353    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.354    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.356    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.358    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.367    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.367    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.367    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/8/4/dataset_284f77a8-6a48-4b45-af5f-2b39358599fe.dat\n  0:00:01.396    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/c/f/a/dataset_cfafc6df-a60c-4a69-bb96-1548e546cad3.dat\n  0:00:01.424    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.424    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.424    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.429    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.430    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.430    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.447    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.447    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.447    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.447    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/2/8/4/dataset_284f77a8-6a48-4b45-af5f-2b39358599fe.dat and /galaxy/server/database/objects/c/f/a/dataset_cfafc6df-a60c-4a69-bb96-1548e546cad3.dat\n  0:00:01.467    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.473    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.476    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.504    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.504    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.504    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/242/working/corrected/corrected.yaml\n  0:00:01.510    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/242/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/242/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/242/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.066    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.071     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.168   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.173     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.273   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.327     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.327     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.327     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.328     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.329     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.329     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.329     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.451     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.453    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.453    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.508    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.508    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.534    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.535    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.535    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.536    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.536    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.536    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:00.996     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.004    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.205    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.205    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.321    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.349    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.369    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.369    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.370    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.371    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n 0:00:05.737    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:05.737    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:05.737    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:05.738    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:05.738    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:05.738    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:05.738    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:05.738    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:05.738    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:05.738    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:05.738    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:05.738    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:05.738    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:05.746    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:05.746    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:05.746    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:05.749    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.749    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/242/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:05.750    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/242/working//K33/before_rr.fasta\n  0:00:05.754    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/242/working//K33/assembly_graph.fastg\n  0:00:05.757    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/242/working//K33/simplified_contigs.fasta\n  0:00:05.761    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/242/working//K33/intermediate_contigs.fasta\n  0:00:05.767    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:05.767    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:05.767    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:05.767    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:05.767    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:05.767    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:05.791    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.878    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.135    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.135    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:06.141    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.197   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.199   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.203   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.204   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.204   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.204   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.211   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.216   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.227    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.227    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.227    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.227    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.227    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.227    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.227    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.227    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.227    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.227    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.227    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.227    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.227    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.228    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.228    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.228    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.228    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.228    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.228    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.228    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.228    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.228    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.228    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.228    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.228    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.228    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/242/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.229    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/242/working//K33/before_rr.fasta\n  0:00:06.233    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/242/working//K33/assembly_graph.fastg\n  0:00:06.236    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/242/working//K33/final_contigs.paths\n  0:00:06.242    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/242/working//K33/scaffolds.paths\n  0:00:06.257    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.258    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/242/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/242/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/242/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/242/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/242/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/242/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/242/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/242/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "8 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "8.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:11:55", "plugin": "core", "name": "end_epoch", "raw_value": "1662829915.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:11:47", "plugin": "core", "name": "start_epoch", "raw_value": "1662829907.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 3, "time_seconds": 120.04910135269165, "inputs": {"sc": false, "careful": false, "kmer_choice|auto_kmer_choice": true, "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "d81d99fa27701c50"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "68f1a395e6cf4015"}}, "job": {"model_class": "Job", "id": "c9302cad1438c971", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:12:22.935420", "create_time": "2022-09-10T17:10:36.534126", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-wd88f", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250}  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/d/a/3/dataset_da318921-c265-4e97-9399-9caee2712ee4.dat --pe1-2 fastq:/galaxy/server/database/objects/3/a/9/dataset_3a9a3426-ef23-4459-9d58-c6db3ae92287.dat && python '/galaxy/server/database/jobs_directory/000/243/configs/tmpdedr5x_9' < contigs.fasta > '/galaxy/server/database/objects/c/e/0/dataset_ce01901e-159f-41ee-b819-0e56684a0606.dat' && python '/galaxy/server/database/jobs_directory/000/243/configs/tmpdedr5x_9' < scaffolds.fasta > '/galaxy/server/database/objects/0/1/3/dataset_0136280d-3e9b-444b-bcce-703f410be1af.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 292, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 293, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 1, \"auto_kmer_choice\": \"true\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "d81d99fa27701c50", "src": "hda", "uuid": "da318921-c265-4e97-9399-9caee2712ee4"}, "libraries_0|files_0|rev_reads": {"id": "68f1a395e6cf4015", "src": "hda", "uuid": "3a9a3426-ef23-4459-9d58-c6db3ae92287"}}, "outputs": {"out_log": {"id": "afb3138e52bf7b89", "src": "hda", "uuid": "b74ee561-50b1-4cdb-832e-6c29faf97c6f"}, "out_scaffolds": {"id": "2d12fba66c7b8c7b", "src": "hda", "uuid": "abd7838c-8e61-40dd-a8b1-eef88d31677a"}, "out_contigs": {"id": "1221de52441e1711", "src": "hda", "uuid": "ba11b4d2-df21-451f-9f31-5db94d1e82fe"}, "out_scaffold_stats": {"id": "9db725d62515777e", "src": "hda", "uuid": "0136280d-3e9b-444b-bcce-703f410be1af"}, "out_contig_stats": {"id": "6de564aa25b533dc", "src": "hda", "uuid": "ce01901e-159f-41ee-b819-0e56684a0606"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/243/working\t--disable-gzip-output\t-t\t4\t-m\t39\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/d/a/3/dataset_da318921-c265-4e97-9399-9caee2712ee4.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/3/a/9/dataset_3a9a3426-ef23-4459-9d58-c6db3ae92287.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/243/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/d/a/3/dataset_da318921-c265-4e97-9399-9caee2712ee4.dat']\n      right reads: ['/galaxy/server/database/objects/3/a/9/dataset_3a9a3426-ef23-4459-9d58-c6db3ae92287.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: automatic selection based on read length\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/243/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/243/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/243/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/243/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/a/3/dataset_da318921-c265-4e97-9399-9caee2712ee4.dat\n  0:00:00.518     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/3/a/9/dataset_3a9a3426-ef23-4459-9d58-c6db3ae92287.dat\n  0:00:01.025     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.033    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.258    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.258    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.365    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.393    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.409    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.411    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.413    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.415    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.422    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.422    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.422    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/a/3/dataset_da318921-c265-4e97-9399-9caee2712ee4.dat\n  0:00:01.452    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/3/a/9/dataset_3a9a3426-ef23-4459-9d58-c6db3ae92287.dat\n  0:00:01.482    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.482    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.482    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.501    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.501    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.501    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.501    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/d/a/3/dataset_da318921-c265-4e97-9399-9caee2712ee4.dat and /galaxy/server/database/objects/3/a/9/dataset_3a9a3426-ef23-4459-9d58-c6db3ae92287.dat\n  0:00:01.516    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.523    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.527    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.547    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.548    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.548    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/243/working/corrected/corrected.yaml\n  0:00:01.552    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/243/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K21\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/243/working/K21/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/243/working/dataset.info) with K=21\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.061    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.064     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.160   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.165     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.261   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.321     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.321     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.321     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.321     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.322     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.322     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.322     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.446     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.447    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.447    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.504    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.\n  0:00:00.504    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.532    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.533    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.533    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.533    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.533    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.533    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.011     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.\n  0:00:01.018    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.246    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.\n  0:00:01.246    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.352    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.380    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.408    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).\n  0:00:01.409    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.410    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.411    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping\n  0:00:01.411    16M / 3G    INFO    General                 (construction.cpp          : 2\n..\n:03.336    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.337    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.337    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.337    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.337    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.337    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.337    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.337    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.337    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62\n  0:00:03.337    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.337    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.337    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.346    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.346    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.346    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.349    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.349    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/243/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:03.349    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/243/working//K55/before_rr.fasta\n  0:00:03.353    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/243/working//K55/assembly_graph.fastg\n  0:00:03.356    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/243/working//K55/simplified_contigs.fasta\n  0:00:03.361    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/243/working//K55/intermediate_contigs.fasta\n  0:00:03.367    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.367    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.367    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.367    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945\n  0:00:03.367    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.367    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.388    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.478    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:03.735    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:03.735    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges\n  0:00:03.742    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100\n  0:00:03.801   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:03.804   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.806   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:03.808   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:03.808   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:03.808   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:03.818   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.823   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:03.833    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:03.833    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:03.833    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:03.833    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:03.833    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:03.833    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:03.833    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:03.833    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:03.833    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:03.833    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:03.834    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:03.834    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:03.834    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:03.834    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:03.834    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:03.834    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:03.834    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:03.834    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:03.834    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:03.834    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:03.834    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:03.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:03.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:03.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:03.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:03.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:03.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:03.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:03.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:03.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:03.835    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.835    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/243/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:03.836    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/243/working//K55/before_rr.fasta\n  0:00:03.840    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/243/working//K55/assembly_graph.fastg\n  0:00:03.843    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/243/working//K55/final_contigs.paths\n  0:00:03.850    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/243/working//K55/scaffolds.paths\n  0:00:03.863    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:03.865    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 3 seconds\n\n===== Assembling finished. Used k-mer sizes: 21, 33, 55 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/243/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/243/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/243/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/243/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/243/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/243/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/243/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/243/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/243/working\t--disable-gzip-output\t-t\t4\t-m\t39\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/d/a/3/dataset_da318921-c265-4e97-9399-9caee2712ee4.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/3/a/9/dataset_3a9a3426-ef23-4459-9d58-c6db3ae92287.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/243/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/d/a/3/dataset_da318921-c265-4e97-9399-9caee2712ee4.dat']\n      right reads: ['/galaxy/server/database/objects/3/a/9/dataset_3a9a3426-ef23-4459-9d58-c6db3ae92287.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: automatic selection based on read length\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/243/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/243/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/243/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/243/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/a/3/dataset_da318921-c265-4e97-9399-9caee2712ee4.dat\n  0:00:00.518     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/3/a/9/dataset_3a9a3426-ef23-4459-9d58-c6db3ae92287.dat\n  0:00:01.025     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.033    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.258    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.258    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.365    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.393    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.409    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.411    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.413    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.415    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.422    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.422    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.422    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/a/3/dataset_da318921-c265-4e97-9399-9caee2712ee4.dat\n  0:00:01.452    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/3/a/9/dataset_3a9a3426-ef23-4459-9d58-c6db3ae92287.dat\n  0:00:01.482    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.482    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.482    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.501    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.501    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.501    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.501    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/d/a/3/dataset_da318921-c265-4e97-9399-9caee2712ee4.dat and /galaxy/server/database/objects/3/a/9/dataset_3a9a3426-ef23-4459-9d58-c6db3ae92287.dat\n  0:00:01.516    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.523    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.527    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.547    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.548    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.548    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/243/working/corrected/corrected.yaml\n  0:00:01.552    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/243/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K21\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/243/working/K21/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/243/working/dataset.info) with K=21\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.061    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.064     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.160   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.165     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.261   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.321     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.321     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.321     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.321     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.322     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.322     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.322     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.446     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.447    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.447    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.504    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.\n  0:00:00.504    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.532    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.533    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.533    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.533    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.533    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.533    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.011     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.\n  0:00:01.018    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.246    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.\n  0:00:01.246    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.352    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.380    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.408    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).\n  0:00:01.409    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.410    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.411    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping\n  0:00:01.411    16M / 3G    INFO    General                 (construction.cpp          : 2\n..\n:03.336    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.337    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.337    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.337    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.337    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.337    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.337    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.337    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.337    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.337    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62\n  0:00:03.337    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.337    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.337    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.346    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.346    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.346    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.349    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.349    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/243/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:03.349    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/243/working//K55/before_rr.fasta\n  0:00:03.353    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/243/working//K55/assembly_graph.fastg\n  0:00:03.356    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/243/working//K55/simplified_contigs.fasta\n  0:00:03.361    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/243/working//K55/intermediate_contigs.fasta\n  0:00:03.367    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.367    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.367    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.367    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945\n  0:00:03.367    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.367    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.388    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.478    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:03.735    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:03.735    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges\n  0:00:03.742    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100\n  0:00:03.801   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:03.804   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.806   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:03.808   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:03.808   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:03.808   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:03.818   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.823   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:03.833    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:03.833    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:03.833    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:03.833    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:03.833    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:03.833    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:03.833    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:03.833    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:03.833    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:03.833    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:03.834    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:03.834    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:03.834    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:03.834    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:03.834    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:03.834    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:03.834    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:03.834    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:03.834    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:03.834    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:03.834    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:03.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:03.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:03.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:03.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:03.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:03.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:03.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:03.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:03.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:03.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:03.835    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:03.835    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.835    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/243/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:03.836    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/243/working//K55/before_rr.fasta\n  0:00:03.840    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/243/working//K55/assembly_graph.fastg\n  0:00:03.843    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/243/working//K55/final_contigs.paths\n  0:00:03.850    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/243/working//K55/scaffolds.paths\n  0:00:03.863    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:03.865    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 3 seconds\n\n===== Assembling finished. Used k-mer sizes: 21, 33, 55 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/243/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/243/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/243/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/243/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/243/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/243/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/243/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/243/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "15 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "15.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:12:14", "plugin": "core", "name": "end_epoch", "raw_value": "1662829934.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:11:59", "plugin": "core", "name": "start_epoch", "raw_value": "1662829919.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 4, "time_seconds": 117.30244565010071, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "77", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "d5b187a71a706bb1"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "c2ce814a6b5920ee"}}, "job": {"model_class": "Job", "id": "e620e9bd09ac3ea1", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:12:36.298837", "create_time": "2022-09-10T17:10:51.030676", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-dzbvr", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"77\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/a/8/5/dataset_a85ec9e7-d565-4a6c-82c4-da94d37b2963.dat --pe1-2 fastq:/galaxy/server/database/objects/1/3/b/dataset_13bce8b4-85b1-4291-b33b-91d73890cc56.dat && python '/galaxy/server/database/jobs_directory/000/246/configs/tmpz5v_epci' < contigs.fasta > '/galaxy/server/database/objects/2/0/d/dataset_20d5453c-9ab7-42c1-8775-246fac4d0d39.dat' && python '/galaxy/server/database/jobs_directory/000/246/configs/tmpz5v_epci' < scaffolds.fasta > '/galaxy/server/database/objects/3/4/8/dataset_348ef7e6-fc08-4c10-b446-7c7f90532103.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 304, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 305, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"77\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "d5b187a71a706bb1", "src": "hda", "uuid": "a85ec9e7-d565-4a6c-82c4-da94d37b2963"}, "libraries_0|files_0|rev_reads": {"id": "c2ce814a6b5920ee", "src": "hda", "uuid": "13bce8b4-85b1-4291-b33b-91d73890cc56"}}, "outputs": {"out_log": {"id": "2fa059e946a5d22d", "src": "hda", "uuid": "60648abe-bbcd-4a43-b186-52f617278f02"}, "out_scaffolds": {"id": "e69db8fe8c77cb66", "src": "hda", "uuid": "2b2e04dc-1694-4dc4-9eef-95ef812338d8"}, "out_contigs": {"id": "17e4c72cb7dbff31", "src": "hda", "uuid": "87ab30c2-b20b-46cb-b048-22082af2ab39"}, "out_scaffold_stats": {"id": "594746ee8079b430", "src": "hda", "uuid": "348ef7e6-fc08-4c10-b446-7c7f90532103"}, "out_contig_stats": {"id": "af120cd8c84bf1fb", "src": "hda", "uuid": "20d5453c-9ab7-42c1-8775-246fac4d0d39"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/246/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t77\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/a/8/5/dataset_a85ec9e7-d565-4a6c-82c4-da94d37b2963.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/1/3/b/dataset_13bce8b4-85b1-4291-b33b-91d73890cc56.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/246/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/a/8/5/dataset_a85ec9e7-d565-4a6c-82c4-da94d37b2963.dat']\n      right reads: ['/galaxy/server/database/objects/1/3/b/dataset_13bce8b4-85b1-4291-b33b-91d73890cc56.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [77]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/246/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/246/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/246/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/246/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.001     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.003     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.003     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.003     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.003     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.003     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.003     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/a/8/5/dataset_a85ec9e7-d565-4a6c-82c4-da94d37b2963.dat\n  0:00:00.461     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/3/b/dataset_13bce8b4-85b1-4291-b33b-91d73890cc56.dat\n  0:00:00.913     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.919    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.119    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.119    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.225    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.253    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.268    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.270    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.271    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.273    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.280    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.280    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.280    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/a/8/5/dataset_a85ec9e7-d565-4a6c-82c4-da94d37b2963.dat\n  0:00:01.309    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/3/b/dataset_13bce8b4-85b1-4291-b33b-91d73890cc56.dat\n  0:00:01.332    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.332    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.332    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.337    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.337    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.348    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.348    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.348    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.348    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/a/8/5/dataset_a85ec9e7-d565-4a6c-82c4-da94d37b2963.dat and /galaxy/server/database/objects/1/3/b/dataset_13bce8b4-85b1-4291-b33b-91d73890cc56.dat\n  0:00:01.362    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.369    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.372    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.399    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.399    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.400    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/246/working/corrected/corrected.yaml\n  0:00:01.404    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/246/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K77\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/246/working/K77/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/246/working/dataset.info) with K=77\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.062    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.065     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.160   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.165     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.260   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.315     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.316     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.316     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.316     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.316     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.317     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.317     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101\n  0:00:00.446     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.448    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.448    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.505    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.\n  0:00:00.506    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.535    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.536    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.536    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.536    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.536    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.536    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525\n  0:00:01.013     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.\n  0:00:01.020    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.226    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.\n  0:00:01.226    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.353    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.380    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.399    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).\n  0:00:01.399    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.400    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.403    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:03.529    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.529    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.529    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.529    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.529    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.529    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.529    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.529    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.529    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594\n  0:00:03.529    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.529    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.529    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.536    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.536    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.536    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.538    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.538    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/246/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:03.539    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/246/working//K77/before_rr.fasta\n  0:00:03.543    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/246/working//K77/assembly_graph.fastg\n  0:00:03.547    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/246/working//K77/simplified_contigs.fasta\n  0:00:03.551    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/246/working//K77/intermediate_contigs.fasta\n  0:00:03.559    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.559    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.559    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.559    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899\n  0:00:03.559    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.559    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.584    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.677    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:03.933    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:03.933    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges\n  0:00:03.940    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100\n  0:00:03.993   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:03.996   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.998   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:04.000   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:04.000   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:04.000   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:04.008   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:04.013   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:04.028    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:04.028    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:04.028    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:04.028    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:04.028    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:04.028    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:04.028    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:04.028    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:04.028    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:04.028    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:04.028    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:04.029    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:04.029    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:04.029    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:04.029    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:04.029    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:04.029    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:04.029    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:04.029    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:04.029    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:04.029    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:04.030    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:04.030    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:04.030    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:04.030    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:04.030    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:04.030    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:04.030    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:04.030    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:04.030    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:04.030    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:04.030    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:04.030    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:04.030    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:04.031    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:04.031    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:04.031    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:04.031    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:04.031    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:04.031    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/246/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:04.032    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/246/working//K77/before_rr.fasta\n  0:00:04.037    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/246/working//K77/assembly_graph.fastg\n  0:00:04.040    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/246/working//K77/final_contigs.paths\n  0:00:04.047    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/246/working//K77/scaffolds.paths\n  0:00:04.061    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:04.062    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 4 seconds\n\n===== Assembling finished. Used k-mer sizes: 77 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/246/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/246/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/246/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/246/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/246/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/246/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/246/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/246/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/246/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t77\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/a/8/5/dataset_a85ec9e7-d565-4a6c-82c4-da94d37b2963.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/1/3/b/dataset_13bce8b4-85b1-4291-b33b-91d73890cc56.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/246/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/a/8/5/dataset_a85ec9e7-d565-4a6c-82c4-da94d37b2963.dat']\n      right reads: ['/galaxy/server/database/objects/1/3/b/dataset_13bce8b4-85b1-4291-b33b-91d73890cc56.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [77]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/246/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/246/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/246/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/246/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.001     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.003     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.003     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.003     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.003     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.003     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.003     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/a/8/5/dataset_a85ec9e7-d565-4a6c-82c4-da94d37b2963.dat\n  0:00:00.461     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/3/b/dataset_13bce8b4-85b1-4291-b33b-91d73890cc56.dat\n  0:00:00.913     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.919    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.119    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.119    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.225    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.253    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.268    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.270    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.271    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.273    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.280    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.280    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.280    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/a/8/5/dataset_a85ec9e7-d565-4a6c-82c4-da94d37b2963.dat\n  0:00:01.309    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/3/b/dataset_13bce8b4-85b1-4291-b33b-91d73890cc56.dat\n  0:00:01.332    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.332    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.332    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.336    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.337    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.337    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.348    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.348    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.348    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.348    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/a/8/5/dataset_a85ec9e7-d565-4a6c-82c4-da94d37b2963.dat and /galaxy/server/database/objects/1/3/b/dataset_13bce8b4-85b1-4291-b33b-91d73890cc56.dat\n  0:00:01.362    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.369    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.372    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.399    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.399    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.400    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/246/working/corrected/corrected.yaml\n  0:00:01.404    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/246/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K77\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/246/working/K77/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/246/working/dataset.info) with K=77\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.062    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.065     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.160   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.165     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.260   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.315     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.316     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.316     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.316     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.316     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.317     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.317     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101\n  0:00:00.446     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.448    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.448    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.505    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.\n  0:00:00.506    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.535    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.536    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.536    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.536    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.536    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.536    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525\n  0:00:01.013     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.\n  0:00:01.020    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.226    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.\n  0:00:01.226    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.353    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.380    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.399    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).\n  0:00:01.399    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.400    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.403    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:03.529    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.529    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.529    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.529    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.529    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.529    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.529    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.529    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.529    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.529    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594\n  0:00:03.529    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.529    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.529    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.536    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.536    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.536    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.538    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.538    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/246/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:03.539    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/246/working//K77/before_rr.fasta\n  0:00:03.543    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/246/working//K77/assembly_graph.fastg\n  0:00:03.547    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/246/working//K77/simplified_contigs.fasta\n  0:00:03.551    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/246/working//K77/intermediate_contigs.fasta\n  0:00:03.559    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.559    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.559    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.559    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899\n  0:00:03.559    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.559    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.584    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.677    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:03.933    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:03.933    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges\n  0:00:03.940    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100\n  0:00:03.993   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:03.996   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.998   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:04.000   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:04.000   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:04.000   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:04.008   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:04.013   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:04.028    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:04.028    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:04.028    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:04.028    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:04.028    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:04.028    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:04.028    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:04.028    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:04.028    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:04.028    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:04.028    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:04.029    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:04.029    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:04.029    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:04.029    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:04.029    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:04.029    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:04.029    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:04.029    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:04.029    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:04.029    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:04.030    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:04.030    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:04.030    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:04.030    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:04.030    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:04.030    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:04.030    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:04.030    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:04.030    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:04.030    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:04.030    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:04.030    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:04.030    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:04.031    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:04.031    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:04.031    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:04.031    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:04.031    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:04.031    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:04.031    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:04.031    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/246/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:04.032    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/246/working//K77/before_rr.fasta\n  0:00:04.037    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/246/working//K77/assembly_graph.fastg\n  0:00:04.040    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/246/working//K77/final_contigs.paths\n  0:00:04.047    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/246/working//K77/scaffolds.paths\n  0:00:04.061    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:04.062    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 4 seconds\n\n===== Assembling finished. Used k-mer sizes: 77 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/246/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/246/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/246/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/246/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/246/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/246/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/246/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/246/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "6 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "6.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:12:24", "plugin": "core", "name": "end_epoch", "raw_value": "1662829944.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:12:18", "plugin": "core", "name": "start_epoch", "raw_value": "1662829938.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 5, "time_seconds": 117.12989902496338, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "4aece14e0ab4b60b"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "a760143850fcf80b"}, "contig_graph_out": true, "scaffold_graph_out": true}, "job": {"model_class": "Job", "id": "362ada1bbb2e97c1", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:12:49.703434", "create_time": "2022-09-10T17:11:04.045499", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-gcl7n", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/6/b/a/dataset_6baece8e-1a6d-4448-b2f1-cf1a46a68558.dat --pe1-2 fastq:/galaxy/server/database/objects/1/7/c/dataset_17c90d48-f03d-479c-8e87-153da3d8c5ae.dat && python '/galaxy/server/database/jobs_directory/000/249/configs/tmpxlofaz9p' < contigs.fasta > '/galaxy/server/database/objects/1/a/7/dataset_1a70aa01-00e1-4450-bf41-54ef75f537b2.dat' && python '/galaxy/server/database/jobs_directory/000/249/configs/tmpxlofaz9p' < scaffolds.fasta > '/galaxy/server/database/objects/0/c/6/dataset_0c6dd4e3-0254-4613-9877-3a483797046a.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"true\"", "contig_graph_out": "\"true\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 311, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 312, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "4aece14e0ab4b60b", "src": "hda", "uuid": "6baece8e-1a6d-4448-b2f1-cf1a46a68558"}, "libraries_0|files_0|rev_reads": {"id": "a760143850fcf80b", "src": "hda", "uuid": "17c90d48-f03d-479c-8e87-153da3d8c5ae"}}, "outputs": {"scaffold_graph": {"id": "8d7401976206a216", "src": "hda", "uuid": "64228ed0-e73d-49f6-b7e9-541144d85c63"}, "contig_graph": {"id": "cdc2b37b4e83470d", "src": "hda", "uuid": "79313077-3ee6-4ca5-af9f-0fe6392f14de"}, "out_log": {"id": "11e1a59c57cd4d48", "src": "hda", "uuid": "822684ae-dbc7-45e9-bad1-6f030289a4cf"}, "out_scaffolds": {"id": "ef76b8ded46b79a4", "src": "hda", "uuid": "9b30f7d3-725a-4cc8-82f9-da882e2815ad"}, "out_contigs": {"id": "149842ff04a670d2", "src": "hda", "uuid": "737a31f4-a63f-4ff6-af10-dcda25d0f40d"}, "out_scaffold_stats": {"id": "a0accdde00ff5ac4", "src": "hda", "uuid": "0c6dd4e3-0254-4613-9877-3a483797046a"}, "out_contig_stats": {"id": "ec555e900016fdaf", "src": "hda", "uuid": "1a70aa01-00e1-4450-bf41-54ef75f537b2"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/249/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/6/b/a/dataset_6baece8e-1a6d-4448-b2f1-cf1a46a68558.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/1/7/c/dataset_17c90d48-f03d-479c-8e87-153da3d8c5ae.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/249/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/6/b/a/dataset_6baece8e-1a6d-4448-b2f1-cf1a46a68558.dat']\n      right reads: ['/galaxy/server/database/objects/1/7/c/dataset_17c90d48-f03d-479c-8e87-153da3d8c5ae.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/249/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/249/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/249/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/249/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/b/a/dataset_6baece8e-1a6d-4448-b2f1-cf1a46a68558.dat\n  0:00:00.488     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/7/c/dataset_17c90d48-f03d-479c-8e87-153da3d8c5ae.dat\n  0:00:00.936     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.944    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.168    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.168    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.293    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.323    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.344    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.346    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.349    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.351    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.360    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.360    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.360    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/b/a/dataset_6baece8e-1a6d-4448-b2f1-cf1a46a68558.dat\n  0:00:01.390    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/7/c/dataset_17c90d48-f03d-479c-8e87-153da3d8c5ae.dat\n  0:00:01.417    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.417    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.417    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.425    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.425    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.438    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.438    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.438    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.439    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/6/b/a/dataset_6baece8e-1a6d-4448-b2f1-cf1a46a68558.dat and /galaxy/server/database/objects/1/7/c/dataset_17c90d48-f03d-479c-8e87-153da3d8c5ae.dat\n  0:00:01.456    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.462    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.466    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.490    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.490    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.490    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/249/working/corrected/corrected.yaml\n  0:00:01.494    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/249/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/249/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/249/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.061    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.064     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.160   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.164     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.255   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.309     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.309     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.309     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.310     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.310     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.310     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.310     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.428     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.430    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.430    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.482    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.482    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.513    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.514    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.514    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.515    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.515    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.515    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.007     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.014    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.244    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.244    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.366    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.392    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.413    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.413    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.415    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.416    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:05.865    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:05.866    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:05.866    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:05.866    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:05.866    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:05.866    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:05.866    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:05.866    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:05.866    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:05.866    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:05.866    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:05.866    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:05.873    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:05.873    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:05.874    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:05.875    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.876    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/249/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:05.876    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/249/working//K33/before_rr.fasta\n  0:00:05.881    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/249/working//K33/assembly_graph.fastg\n  0:00:05.885    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/249/working//K33/simplified_contigs.fasta\n  0:00:05.889    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/249/working//K33/intermediate_contigs.fasta\n  0:00:05.899    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:05.899    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:05.899    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:05.899    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:05.899    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:05.899    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:05.922    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.011    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.268    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.269    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:06.276    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.331   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.333   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.337   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.338   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.339   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.339   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.347   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.352   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.366    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.366    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.366    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.366    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.367    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.367    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.367    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.367    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.367    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.367    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.367    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.367    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.368    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.368    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.368    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.368    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.368    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.368    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.368    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.368    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.368    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.369    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.369    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.369    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.369    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.369    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.369    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.369    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.369    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.369    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.370    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.370    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.370    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.370    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.370    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.370    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/249/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.372    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/249/working//K33/before_rr.fasta\n  0:00:06.376    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/249/working//K33/assembly_graph.fastg\n  0:00:06.381    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/249/working//K33/final_contigs.paths\n  0:00:06.389    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/249/working//K33/scaffolds.paths\n  0:00:06.403    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.406    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/249/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/249/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/249/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/249/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/249/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/249/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/249/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/249/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/249/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/6/b/a/dataset_6baece8e-1a6d-4448-b2f1-cf1a46a68558.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/1/7/c/dataset_17c90d48-f03d-479c-8e87-153da3d8c5ae.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/249/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/6/b/a/dataset_6baece8e-1a6d-4448-b2f1-cf1a46a68558.dat']\n      right reads: ['/galaxy/server/database/objects/1/7/c/dataset_17c90d48-f03d-479c-8e87-153da3d8c5ae.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/249/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/249/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/249/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/249/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/b/a/dataset_6baece8e-1a6d-4448-b2f1-cf1a46a68558.dat\n  0:00:00.488     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/7/c/dataset_17c90d48-f03d-479c-8e87-153da3d8c5ae.dat\n  0:00:00.936     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.944    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.168    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.168    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.293    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.323    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.344    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.346    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.349    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.351    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.360    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.360    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.360    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/b/a/dataset_6baece8e-1a6d-4448-b2f1-cf1a46a68558.dat\n  0:00:01.390    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/7/c/dataset_17c90d48-f03d-479c-8e87-153da3d8c5ae.dat\n  0:00:01.417    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.417    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.417    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.425    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.425    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.438    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.438    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.438    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.439    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/6/b/a/dataset_6baece8e-1a6d-4448-b2f1-cf1a46a68558.dat and /galaxy/server/database/objects/1/7/c/dataset_17c90d48-f03d-479c-8e87-153da3d8c5ae.dat\n  0:00:01.456    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.462    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.466    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.490    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.490    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.490    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/249/working/corrected/corrected.yaml\n  0:00:01.494    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/249/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/249/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/249/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.061    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.064     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.160   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.164     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.255   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.309     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.309     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.309     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.310     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.310     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.310     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.310     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.428     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.430    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.430    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.482    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.482    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.513    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.514    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.514    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.515    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.515    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.515    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.007     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.014    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.244    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.244    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.366    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.392    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.413    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.413    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.415    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.416    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:05.865    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:05.866    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:05.866    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:05.866    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:05.866    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:05.866    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:05.866    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:05.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:05.866    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:05.866    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:05.866    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:05.866    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:05.866    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:05.873    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:05.873    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:05.874    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:05.875    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.876    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/249/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:05.876    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/249/working//K33/before_rr.fasta\n  0:00:05.881    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/249/working//K33/assembly_graph.fastg\n  0:00:05.885    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/249/working//K33/simplified_contigs.fasta\n  0:00:05.889    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/249/working//K33/intermediate_contigs.fasta\n  0:00:05.899    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:05.899    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:05.899    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:05.899    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:05.899    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:05.899    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:05.922    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.011    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.268    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.269    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:06.276    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.331   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.333   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.337   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.338   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.339   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.339   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.347   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.352   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.366    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.366    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.366    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.366    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.367    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.367    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.367    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.367    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.367    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.367    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.367    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.367    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.368    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.368    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.368    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.368    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.368    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.368    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.368    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.368    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.368    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.369    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.369    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.369    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.369    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.369    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.369    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.369    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.369    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.369    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.370    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.370    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.370    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.370    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.370    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.370    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.370    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.370    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/249/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.372    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/249/working//K33/before_rr.fasta\n  0:00:06.376    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/249/working//K33/assembly_graph.fastg\n  0:00:06.381    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/249/working//K33/final_contigs.paths\n  0:00:06.389    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/249/working//K33/scaffolds.paths\n  0:00:06.403    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.406    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/249/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/249/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/249/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/249/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/249/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/249/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/249/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/249/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "9 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "9.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:12:38", "plugin": "core", "name": "end_epoch", "raw_value": "1662829958.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:12:29", "plugin": "core", "name": "start_epoch", "raw_value": "1662829949.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 6, "time_seconds": 105.08772850036621, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "2514ee687e35261d"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "f751be7af50157ae"}}, "job": {"model_class": "Job", "id": "b65a822828158315", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:13:49.684149", "create_time": "2022-09-10T17:12:15.824787", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-rbdjw", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/5/0/6/dataset_506785f0-d4e5-4c2f-bf3d-2b1f29836819.dat --pe1-2 fastq:/galaxy/server/database/objects/f/b/c/dataset_fbc035ff-047b-46cf-a6b1-89f9d6135682.dat && python '/galaxy/server/database/jobs_directory/000/252/configs/tmp6ytnc69r' < contigs.fasta > '/galaxy/server/database/objects/c/0/5/dataset_c05448c0-da32-4418-a1b4-aa64f1f9b786.dat' && python '/galaxy/server/database/jobs_directory/000/252/configs/tmp6ytnc69r' < scaffolds.fasta > '/galaxy/server/database/objects/2/9/5/dataset_295e1152-8839-4885-b7f7-7de97393f580.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 320, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 321, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "2514ee687e35261d", "src": "hda", "uuid": "506785f0-d4e5-4c2f-bf3d-2b1f29836819"}, "libraries_0|files_0|rev_reads": {"id": "f751be7af50157ae", "src": "hda", "uuid": "fbc035ff-047b-46cf-a6b1-89f9d6135682"}}, "outputs": {"out_log": {"id": "94fda98050057749", "src": "hda", "uuid": "113e977f-7f5b-45cf-a594-af571a282804"}, "out_scaffolds": {"id": "8dcfd927c0f9387e", "src": "hda", "uuid": "79aa6f4f-ce8e-4f47-b168-77e5b622edf3"}, "out_contigs": {"id": "7778e7ff4c67bfd7", "src": "hda", "uuid": "9e8c716a-cbe6-463e-ad5d-dd32e886d64b"}, "out_scaffold_stats": {"id": "ee6b1ee36d8bbbf0", "src": "hda", "uuid": "295e1152-8839-4885-b7f7-7de97393f580"}, "out_contig_stats": {"id": "cbb826eb23af114a", "src": "hda", "uuid": "c05448c0-da32-4418-a1b4-aa64f1f9b786"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/252/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/5/0/6/dataset_506785f0-d4e5-4c2f-bf3d-2b1f29836819.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/f/b/c/dataset_fbc035ff-047b-46cf-a6b1-89f9d6135682.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/252/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/5/0/6/dataset_506785f0-d4e5-4c2f-bf3d-2b1f29836819.dat']\n      right reads: ['/galaxy/server/database/objects/f/b/c/dataset_fbc035ff-047b-46cf-a6b1-89f9d6135682.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/252/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/252/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/252/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/252/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.003     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.003     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.004     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.004     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/0/6/dataset_506785f0-d4e5-4c2f-bf3d-2b1f29836819.dat\n  0:00:00.512     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/f/b/c/dataset_fbc035ff-047b-46cf-a6b1-89f9d6135682.dat\n  0:00:01.027     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.033    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.253    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.253    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.382    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.428    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.450    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.451    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.454    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.455    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.463    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.463    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.463    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/0/6/dataset_506785f0-d4e5-4c2f-bf3d-2b1f29836819.dat\n  0:00:01.488    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/f/b/c/dataset_fbc035ff-047b-46cf-a6b1-89f9d6135682.dat\n  0:00:01.511    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.511    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.511    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.516    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.516    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.525    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.525    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.525    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.525    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/5/0/6/dataset_506785f0-d4e5-4c2f-bf3d-2b1f29836819.dat and /galaxy/server/database/objects/f/b/c/dataset_fbc035ff-047b-46cf-a6b1-89f9d6135682.dat\n  0:00:01.542    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.546    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.549    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.574    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.574    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.574    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/252/working/corrected/corrected.yaml\n  0:00:01.579    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/252/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/252/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/252/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.072    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.077     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.181   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.188     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.291   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.358     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.358     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.358     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.359     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.359     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.359     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.359     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.505     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.507    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.507    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.577    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.577    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.617    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.618    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.618    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.618    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.619    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.619    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.181     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.189    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.410    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.411    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.534    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.564    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.583    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.583    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.586    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.587    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:06.192    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.193    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.194    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.194    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.194    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.194    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.194    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.194    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.194    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.194    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.194    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.194    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.201    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.201    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.201    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.203    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.203    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/252/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.203    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/252/working//K33/before_rr.fasta\n  0:00:06.207    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/252/working//K33/assembly_graph.fastg\n  0:00:06.211    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/252/working//K33/simplified_contigs.fasta\n  0:00:06.215    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/252/working//K33/intermediate_contigs.fasta\n  0:00:06.222    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.222    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.222    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.222    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.222    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.222    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:06.248    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.334    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.588    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.588    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:06.596    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.658   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.661   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.664   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.667   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.667   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.667   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.677   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.682   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.700    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.700    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.700    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.700    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.700    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.700    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.700    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.700    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.700    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.700    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.700    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.700    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.701    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.701    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.701    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.701    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.701    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.701    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.701    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.701    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.701    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.702    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.702    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/252/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.702    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/252/working//K33/before_rr.fasta\n  0:00:06.707    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/252/working//K33/assembly_graph.fastg\n  0:00:06.711    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/252/working//K33/final_contigs.paths\n  0:00:06.726    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/252/working//K33/scaffolds.paths\n  0:00:06.741    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.743    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/252/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/252/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/252/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/252/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/252/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/252/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/252/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/252/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/252/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/5/0/6/dataset_506785f0-d4e5-4c2f-bf3d-2b1f29836819.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/f/b/c/dataset_fbc035ff-047b-46cf-a6b1-89f9d6135682.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/252/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/5/0/6/dataset_506785f0-d4e5-4c2f-bf3d-2b1f29836819.dat']\n      right reads: ['/galaxy/server/database/objects/f/b/c/dataset_fbc035ff-047b-46cf-a6b1-89f9d6135682.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/252/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/252/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/252/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/252/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.003     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.003     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.004     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.004     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/0/6/dataset_506785f0-d4e5-4c2f-bf3d-2b1f29836819.dat\n  0:00:00.512     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/f/b/c/dataset_fbc035ff-047b-46cf-a6b1-89f9d6135682.dat\n  0:00:01.027     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.033    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.253    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.253    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.382    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.428    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.450    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.451    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.454    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.455    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.463    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.463    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.463    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/0/6/dataset_506785f0-d4e5-4c2f-bf3d-2b1f29836819.dat\n  0:00:01.488    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/f/b/c/dataset_fbc035ff-047b-46cf-a6b1-89f9d6135682.dat\n  0:00:01.511    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.511    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.511    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.516    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.516    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.516    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.525    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.525    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.525    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.525    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/5/0/6/dataset_506785f0-d4e5-4c2f-bf3d-2b1f29836819.dat and /galaxy/server/database/objects/f/b/c/dataset_fbc035ff-047b-46cf-a6b1-89f9d6135682.dat\n  0:00:01.542    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.546    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.549    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.574    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.574    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.574    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/252/working/corrected/corrected.yaml\n  0:00:01.579    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/252/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/252/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/252/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.072    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.077     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.181   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.188     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.291   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.358     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.358     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.358     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.359     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.359     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.359     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.359     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.505     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.507    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.507    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.577    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.577    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.617    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.618    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.618    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.618    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.619    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.619    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.181     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.189    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.410    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.411    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.534    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.564    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.583    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.583    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.586    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.587    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:06.192    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.193    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.194    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.194    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.194    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.194    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.194    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.194    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.194    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.194    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.194    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.194    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.194    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.201    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.201    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.201    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.203    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.203    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/252/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.203    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/252/working//K33/before_rr.fasta\n  0:00:06.207    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/252/working//K33/assembly_graph.fastg\n  0:00:06.211    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/252/working//K33/simplified_contigs.fasta\n  0:00:06.215    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/252/working//K33/intermediate_contigs.fasta\n  0:00:06.222    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.222    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.222    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.222    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.222    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.222    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:06.248    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.334    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.588    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.588    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:06.596    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.658   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.661   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.664   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.667   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.667   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.667   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.677   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.682   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.700    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.700    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.700    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.700    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.700    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.700    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.700    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.700    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.700    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.700    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.700    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.700    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.700    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.701    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.701    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.701    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.701    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.701    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.701    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.701    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.701    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.701    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.701    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.701    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.702    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.702    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/252/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.702    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/252/working//K33/before_rr.fasta\n  0:00:06.707    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/252/working//K33/assembly_graph.fastg\n  0:00:06.711    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/252/working//K33/final_contigs.paths\n  0:00:06.726    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/252/working//K33/scaffolds.paths\n  0:00:06.741    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.743    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/252/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/252/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/252/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/252/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/252/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/252/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/252/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/252/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "9 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "9.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:13:40", "plugin": "core", "name": "end_epoch", "raw_value": "1662830020.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:13:31", "plugin": "core", "name": "start_epoch", "raw_value": "1662830011.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 7, "time_seconds": 111.24163508415222, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "5404e9d3696a51d9"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "9e8e88328fe07370"}}, "job": {"model_class": "Job", "id": "5417a5814ba5c221", "state": "ok", "exit_code": 0, "update_time": "2022-09-10T17:14:14.114311", "create_time": "2022-09-10T17:12:35.415367", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "34a7f99d1dcf5aa6", "external_id": "gxy-4x5jh", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/e/3/2/dataset_e32dd340-a569-4b28-ac21-c0f4e25bfc10.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/f/8/f/dataset_f8fbfcc0-3daf-46b1-b672-ebd822a2e02f.dat && python '/galaxy/server/database/jobs_directory/000/255/configs/tmpfofw3p1e' < contigs.fasta > '/galaxy/server/database/objects/8/a/d/dataset_8ad82813-9e0b-4ecf-8ced-fa8bd179872f.dat' && python '/galaxy/server/database/jobs_directory/000/255/configs/tmpfofw3p1e' < scaffolds.fasta > '/galaxy/server/database/objects/3/6/6/dataset_3665f2df-2e76-4b90-8edf-4eb34f826e9d.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 327, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 328, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "5404e9d3696a51d9", "src": "hda", "uuid": "e32dd340-a569-4b28-ac21-c0f4e25bfc10"}, "libraries_0|files_0|rev_reads": {"id": "9e8e88328fe07370", "src": "hda", "uuid": "f8fbfcc0-3daf-46b1-b672-ebd822a2e02f"}}, "outputs": {"out_log": {"id": "5517dff124e983f4", "src": "hda", "uuid": "dca35a32-e0d4-43a0-9eac-3ca5f85cf7b0"}, "out_scaffolds": {"id": "abad6315d3f9a8ce", "src": "hda", "uuid": "5347396a-72b5-435d-b2ed-f1bb98b86c19"}, "out_contigs": {"id": "891e2527c28fbeed", "src": "hda", "uuid": "82691a88-b132-4e76-b034-21cabaa8c16a"}, "out_scaffold_stats": {"id": "6ee726dd8045c56d", "src": "hda", "uuid": "3665f2df-2e76-4b90-8edf-4eb34f826e9d"}, "out_contig_stats": {"id": "8f6899e5d5a1067a", "src": "hda", "uuid": "8ad82813-9e0b-4ecf-8ced-fa8bd179872f"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/255/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/e/3/2/dataset_e32dd340-a569-4b28-ac21-c0f4e25bfc10.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/f/8/f/dataset_f8fbfcc0-3daf-46b1-b672-ebd822a2e02f.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/255/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/e/3/2/dataset_e32dd340-a569-4b28-ac21-c0f4e25bfc10.dat']\n      right reads: ['/galaxy/server/database/objects/f/8/f/dataset_f8fbfcc0-3daf-46b1-b672-ebd822a2e02f.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/255/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/255/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/255/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/255/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/e/3/2/dataset_e32dd340-a569-4b28-ac21-c0f4e25bfc10.dat\n  0:00:00.500     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/f/8/f/dataset_f8fbfcc0-3daf-46b1-b672-ebd822a2e02f.dat\n  0:00:00.986     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.992    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.187    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.188    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.310    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.338    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.364    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.366    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.368    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.370    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.377    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.378    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.378    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/e/3/2/dataset_e32dd340-a569-4b28-ac21-c0f4e25bfc10.dat\n  0:00:01.406    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/f/8/f/dataset_f8fbfcc0-3daf-46b1-b672-ebd822a2e02f.dat\n  0:00:01.434    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.434    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.434    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.438    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.440    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.440    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.453    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.453    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.453    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.453    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/e/3/2/dataset_e32dd340-a569-4b28-ac21-c0f4e25bfc10.dat and /galaxy/server/database/objects/f/8/f/dataset_f8fbfcc0-3daf-46b1-b672-ebd822a2e02f.dat\n  0:00:01.471    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.477    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.479    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.503    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.503    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.503    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/255/working/corrected/corrected.yaml\n  0:00:01.508    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/255/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/255/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/255/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.065    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.069     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.163   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.167     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.261   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.314     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.315     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.315     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.315     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.316     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.316     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.316     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.435     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.437    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.437    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.487    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.487    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.513    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.514    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.514    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.514    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.515    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.515    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:00.996     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.003    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.222    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.222    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.345    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.373    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.393    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.393    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.395    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.397    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n 0:00:05.747    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:05.748    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:05.748    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:05.748    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:05.748    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:05.748    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:05.748    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:05.748    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:05.748    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:05.748    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:05.748    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:05.748    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:05.757    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:05.757    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:05.757    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:05.759    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.759    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/255/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:05.759    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/255/working//K33/before_rr.fasta\n  0:00:05.764    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/255/working//K33/assembly_graph.fastg\n  0:00:05.768    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/255/working//K33/simplified_contigs.fasta\n  0:00:05.771    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/255/working//K33/intermediate_contigs.fasta\n  0:00:05.777    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:05.777    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:05.777    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:05.777    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:05.777    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:05.777    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:05.801    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.888    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.142    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.142    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:06.150    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.207   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.210   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.214   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.216   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.216   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.216   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.224   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.230   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.251    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.251    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.252    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.252    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.252    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.252    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.252    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.252    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.252    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.252    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.252    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.253    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.253    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.253    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.253    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.253    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.253    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.253    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.253    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.253    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.253    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.253    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.253    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.253    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.253    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.253    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.253    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.253    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.253    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.253    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.253    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.253    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.253    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.254    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.254    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.254    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.254    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.254    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.254    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.254    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.254    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.254    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.254    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.254    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.254    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.254    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.254    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.254    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.254    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/255/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.254    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/255/working//K33/before_rr.fasta\n  0:00:06.259    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/255/working//K33/assembly_graph.fastg\n  0:00:06.262    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/255/working//K33/final_contigs.paths\n  0:00:06.270    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/255/working//K33/scaffolds.paths\n  0:00:06.282    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.284    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/255/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/255/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/255/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/255/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/255/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/255/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/255/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/255/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/255/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/e/3/2/dataset_e32dd340-a569-4b28-ac21-c0f4e25bfc10.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/f/8/f/dataset_f8fbfcc0-3daf-46b1-b672-ebd822a2e02f.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/255/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/e/3/2/dataset_e32dd340-a569-4b28-ac21-c0f4e25bfc10.dat']\n      right reads: ['/galaxy/server/database/objects/f/8/f/dataset_f8fbfcc0-3daf-46b1-b672-ebd822a2e02f.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/255/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/255/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/255/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/255/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/e/3/2/dataset_e32dd340-a569-4b28-ac21-c0f4e25bfc10.dat\n  0:00:00.500     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/f/8/f/dataset_f8fbfcc0-3daf-46b1-b672-ebd822a2e02f.dat\n  0:00:00.986     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.992    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.187    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.188    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.310    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.338    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.364    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.366    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.368    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.370    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.377    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.378    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.378    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/e/3/2/dataset_e32dd340-a569-4b28-ac21-c0f4e25bfc10.dat\n  0:00:01.406    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/f/8/f/dataset_f8fbfcc0-3daf-46b1-b672-ebd822a2e02f.dat\n  0:00:01.434    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.434    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.434    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.438    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.439    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.440    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.440    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.453    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.453    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.453    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.453    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/e/3/2/dataset_e32dd340-a569-4b28-ac21-c0f4e25bfc10.dat and /galaxy/server/database/objects/f/8/f/dataset_f8fbfcc0-3daf-46b1-b672-ebd822a2e02f.dat\n  0:00:01.471    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.477    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.479    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.503    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.503    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.503    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/255/working/corrected/corrected.yaml\n  0:00:01.508    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/255/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/255/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/255/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.065    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.069     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.163   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.167     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.261   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.314     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.315     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.315     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.315     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.316     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.316     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.316     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.435     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.437    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.437    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.487    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.487    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.513    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.514    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.514    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.514    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.515    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.515    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:00.996     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.003    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.222    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.222    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.345    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.373    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.393    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.393    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.395    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.397    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n 0:00:05.747    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:05.748    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:05.748    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:05.748    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:05.748    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:05.748    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:05.748    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:05.748    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:05.748    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:05.748    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:05.748    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:05.748    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:05.748    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:05.757    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:05.757    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:05.757    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:05.759    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.759    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/255/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:05.759    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/255/working//K33/before_rr.fasta\n  0:00:05.764    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/255/working//K33/assembly_graph.fastg\n  0:00:05.768    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/255/working//K33/simplified_contigs.fasta\n  0:00:05.771    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/255/working//K33/intermediate_contigs.fasta\n  0:00:05.777    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:05.777    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:05.777    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:05.777    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:05.777    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:05.777    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:05.801    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.888    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.142    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.142    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:06.150    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.207   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.210   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.214   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.216   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.216   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.216   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.224   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.230   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.251    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.251    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.252    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.252    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.252    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.252    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.252    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.252    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.252    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.252    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.252    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.253    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.253    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.253    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.253    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.253    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.253    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.253    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.253    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.253    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.253    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.253    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:06.253    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.253    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.253    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.253    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.253    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.253    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.253    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.253    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.253    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.253    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.253    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.253    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.254    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.254    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.254    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.254    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.254    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.254    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.254    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.254    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.254    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.254    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.254    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.254    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.254    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.254    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.254    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.254    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/255/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.254    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/255/working//K33/before_rr.fasta\n  0:00:06.259    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/255/working//K33/assembly_graph.fastg\n  0:00:06.262    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/255/working//K33/final_contigs.paths\n  0:00:06.270    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/255/working//K33/scaffolds.paths\n  0:00:06.282    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.284    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/255/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/255/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/255/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/255/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/255/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/255/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/255/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/255/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "8 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "8.0000000"}, {"title": "Job End Time", "value": "2022-09-10 17:14:04", "plugin": "core", "name": "end_epoch", "raw_value": "1662830044.0000000"}, {"title": "Job Start Time", "value": "2022-09-10 17:13:56", "plugin": "core", "name": "start_epoch", "raw_value": "1662830036.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}]}