{"version": "0.1", "suitename": "Ephemeris tool tests targeting http://35.185.60.235:8000/galaxy/", "results": {"total": 103, "errors": 25, "failures": 0, "skips": 0}, "tests": [{"id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon/1.4.13-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon", "tool_version": "1.4.13", "test_index": 0, "time_seconds": 133.08398938179016, "inputs": {"reads": {"src": "hda", "id": "a321c2aa9b6463e8"}, "overlaps": {"src": "hda", "id": "c4e14d516487994c"}, "corrected_reads": {"src": "hda", "id": "2125e7897a9aebe5"}, "u": true, "f": true, "w": "800", "e": "0.2"}, "job": {"model_class": "Job", "id": "08fcef0395e1da68", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:20:02.532655", "create_time": "2023-04-22T17:18:15.363021", "galaxy_version": "21.09", "command_version": "v1.4.13", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon/1.4.13", "history_id": "a27c58f49c315e0d", "external_id": "gxy-gplpp", "command_line": "ln -s '/galaxy/server/database/objects/a/9/e/dataset_a9ec2243-2dd9-4b9d-af2c-a99e53ed2574.dat' reads.fasta && ln -s '/galaxy/server/database/objects/f/d/c/dataset_fdc74b9a-bf8e-425e-9e33-64633ce05d72.dat' overlaps.sam && ln -s '/galaxy/server/database/objects/7/f/3/dataset_7f3f954a-4dab-47c1-b183-61fccc0aa246.dat' corrected_reads.fasta &&  racon reads.fasta overlaps.sam corrected_reads.fasta -t ${GALAXY_SLOTS:-4} -u -f -w 800 -q 10.0 -e 0.2 -m 5 -x -4 -g -8 > racon_polished_consensus.fa", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "g": "\"-8\"", "x": "\"-4\"", "m": "\"5\"", "e": "\"0.2\"", "q": "\"10.0\"", "w": "\"800\"", "f": "\"true\"", "u": "\"true\""}, "inputs": {"reads": {"id": "a321c2aa9b6463e8", "src": "hda", "uuid": "a9ec2243-2dd9-4b9d-af2c-a99e53ed2574"}, "overlaps": {"id": "c4e14d516487994c", "src": "hda", "uuid": "fdc74b9a-bf8e-425e-9e33-64633ce05d72"}, "corrected_reads": {"id": "2125e7897a9aebe5", "src": "hda", "uuid": "7f3f954a-4dab-47c1-b183-61fccc0aa246"}}, "outputs": {"consensus": {"id": "05bd564ebc8f72f9", "src": "hda", "uuid": "10351bb6-2f88-47b3-a6f5-27b7d7c19d38"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[racon::Polisher::initialize] loaded target sequences 0.001102 s\n[racon::Polisher::initialize] loaded sequences 0.014923 s\n[racon::Polisher::initialize] loaded overlaps 0.012387 s\n[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.010690 s\r[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.011189 s\r[racon::Polisher::initialize] aligning overlaps [===>                ] 0.011709 s\r[racon::Polisher::initialize] aligning overlaps [====>               ] 0.012294 s\r[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.012654 s\r[racon::Polisher::initialize] aligning overlaps [======>             ] 0.013108 s\r[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.013745 s\r[racon::Polisher::initialize] aligning overlaps [========>           ] 0.014176 s\r[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.014679 s\r[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.015191 s\r[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.015767 s\r[racon::Polisher::initialize] aligning overlaps [============>       ] 0.016387 s\r[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.017035 s\r[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.017498 s\r[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.018091 s\r[racon::Polisher::initialize] aligning overlaps [================>   ] 0.018777 s\r[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.019101 s\r[racon::Polisher::initialize] aligning overlaps [==================> ] 0.019661 s\r[racon::Polisher::initialize] aligning overlaps [===================>] 0.020330 s\r[racon::Polisher::initialize] aligning overlaps [====================] 0.020936 s\n[racon::Polisher::initialize] transformed data into windows 0.000291 s\n[racon::Polisher::polish] generating consensus [=>                  ] 0.165109 s\r[racon::Polisher::polish] generating consensus [==>                 ] 0.322535 s\r[racon::Polisher::polish] generating consensus [===>                ] 0.451796 s\r[racon::Polisher::polish] generating consensus [====>               ] 0.532445 s\r[racon::Polisher::polish] generating consensus [=====>              ] 0.605798 s\r[racon::Polisher::polish] generating consensus [======>             ] 0.688811 s\r[racon::Polisher::polish] generating consensus [=======>            ] 0.787024 s\r[racon::Polisher::polish] generating consensus [========>           ] 0.908333 s\r[racon::Polisher::polish] generating consensus [=========>          ] 1.110635 s\r[racon::Polisher::polish] generating consensus [==========>         ] 1.353933 s\r[racon::Polisher::polish] generating consensus [===========>        ] 1.703886 s\r[racon::Polisher::polish] generating consensus [============>       ] 1.994146 s\r[racon::Polisher::polish] generating consensus [=============>      ] 2.259609 s\r[racon::Polisher::polish] generating consensus [==============>     ] 2.486952 s\r[racon::Polisher::polish] generating consensus [===============>    ] 2.625090 s\r[racon::Polisher::polish] generating consensus [================>   ] 2.821084 s\r[racon::Polisher::polish] generating consensus [=================>  ] 2.898034 s\r[racon::Polisher::polish] generating consensus [==================> ] 3.114685 s\r[racon::Polisher::polish] generating consensus [===================>] 3.341163 s\r[racon::Polisher::polish] generating consensus [====================] 3.492982 s\n[racon::Polisher::] total = 3.543444 s\n", "job_stdout": "", "job_stderr": "", "stderr": "[racon::Polisher::initialize] loaded target sequences 0.001102 s\n[racon::Polisher::initialize] loaded sequences 0.014923 s\n[racon::Polisher::initialize] loaded overlaps 0.012387 s\n[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.010690 s\r[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.011189 s\r[racon::Polisher::initialize] aligning overlaps [===>                ] 0.011709 s\r[racon::Polisher::initialize] aligning overlaps [====>               ] 0.012294 s\r[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.012654 s\r[racon::Polisher::initialize] aligning overlaps [======>             ] 0.013108 s\r[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.013745 s\r[racon::Polisher::initialize] aligning overlaps [========>           ] 0.014176 s\r[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.014679 s\r[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.015191 s\r[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.015767 s\r[racon::Polisher::initialize] aligning overlaps [============>       ] 0.016387 s\r[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.017035 s\r[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.017498 s\r[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.018091 s\r[racon::Polisher::initialize] aligning overlaps [================>   ] 0.018777 s\r[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.019101 s\r[racon::Polisher::initialize] aligning overlaps [==================> ] 0.019661 s\r[racon::Polisher::initialize] aligning overlaps [===================>] 0.020330 s\r[racon::Polisher::initialize] aligning overlaps [====================] 0.020936 s\n[racon::Polisher::initialize] transformed data into windows 0.000291 s\n[racon::Polisher::polish] generating consensus [=>                  ] 0.165109 s\r[racon::Polisher::polish] generating consensus [==>                 ] 0.322535 s\r[racon::Polisher::polish] generating consensus [===>                ] 0.451796 s\r[racon::Polisher::polish] generating consensus [====>               ] 0.532445 s\r[racon::Polisher::polish] generating consensus [=====>              ] 0.605798 s\r[racon::Polisher::polish] generating consensus [======>             ] 0.688811 s\r[racon::Polisher::polish] generating consensus [=======>            ] 0.787024 s\r[racon::Polisher::polish] generating consensus [========>           ] 0.908333 s\r[racon::Polisher::polish] generating consensus [=========>          ] 1.110635 s\r[racon::Polisher::polish] generating consensus [==========>         ] 1.353933 s\r[racon::Polisher::polish] generating consensus [===========>        ] 1.703886 s\r[racon::Polisher::polish] generating consensus [============>       ] 1.994146 s\r[racon::Polisher::polish] generating consensus [=============>      ] 2.259609 s\r[racon::Polisher::polish] generating consensus [==============>     ] 2.486952 s\r[racon::Polisher::polish] generating consensus [===============>    ] 2.625090 s\r[racon::Polisher::polish] generating consensus [================>   ] 2.821084 s\r[racon::Polisher::polish] generating consensus [=================>  ] 2.898034 s\r[racon::Polisher::polish] generating consensus [==================> ] 3.114685 s\r[racon::Polisher::polish] generating consensus [===================>] 3.341163 s\r[racon::Polisher::polish] generating consensus [====================] 3.492982 s\n[racon::Polisher::] total = 3.543444 s\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:19:50", "plugin": "core", "name": "end_epoch", "raw_value": "1682183990.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:19:47", "plugin": "core", "name": "start_epoch", "raw_value": "1682183987.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon/1.4.13-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon", "tool_version": "1.4.13", "test_index": 1, "time_seconds": 143.08527874946594, "inputs": {"reads": {"src": "hda", "id": "8c8ff06078de0996"}, "overlaps": {"src": "hda", "id": "b2865f361be00de5"}, "corrected_reads": {"src": "hda", "id": "78fc435a9b039f6a"}}, "job": {"model_class": "Job", "id": "e243b13cc32add12", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:20:42.421237", "create_time": "2023-04-22T17:18:48.135056", "galaxy_version": "21.09", "command_version": "v1.4.13", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon/1.4.13", "history_id": "a27c58f49c315e0d", "external_id": "gxy-wrc9w", "command_line": "ln -s '/galaxy/server/database/objects/d/d/7/dataset_dd7f6df0-d682-4bc8-9e5d-dc6e9ec2c290.dat' reads.fasta && ln -s '/galaxy/server/database/objects/6/e/c/dataset_6ec738a5-2df1-41ee-83e1-3d73462d4fcd.dat' overlaps.paf && ln -s '/galaxy/server/database/objects/5/f/1/dataset_5f1eccad-602c-43c6-ae57-f5131283ae0a.dat' corrected_reads.fasta &&  racon reads.fasta overlaps.paf corrected_reads.fasta -t ${GALAXY_SLOTS:-4}   -w 500 -q 10.0 -e 0.3 -m 5 -x -4 -g -8 > racon_polished_consensus.fa", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "g": "\"-8\"", "x": "\"-4\"", "m": "\"5\"", "e": "\"0.3\"", "q": "\"10.0\"", "w": "\"500\"", "f": "\"false\"", "u": "\"false\""}, "inputs": {"reads": {"id": "8c8ff06078de0996", "src": "hda", "uuid": "dd7f6df0-d682-4bc8-9e5d-dc6e9ec2c290"}, "overlaps": {"id": "b2865f361be00de5", "src": "hda", "uuid": "6ec738a5-2df1-41ee-83e1-3d73462d4fcd"}, "corrected_reads": {"id": "78fc435a9b039f6a", "src": "hda", "uuid": "5f1eccad-602c-43c6-ae57-f5131283ae0a"}}, "outputs": {"consensus": {"id": "b4319583aa0b1a29", "src": "hda", "uuid": "a1e9bdf5-bade-4cd6-adb4-7534a3c69da1"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[racon::Polisher::initialize] loaded target sequences 0.000979 s\n[racon::Polisher::initialize] loaded sequences 0.012586 s\n[racon::Polisher::initialize] loaded overlaps 0.000714 s\n[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.069263 s\r[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.110070 s\r[racon::Polisher::initialize] aligning overlaps [===>                ] 0.152029 s\r[racon::Polisher::initialize] aligning overlaps [====>               ] 0.177464 s\r[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.223586 s\r[racon::Polisher::initialize] aligning overlaps [======>             ] 0.248829 s\r[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.287735 s\r[racon::Polisher::initialize] aligning overlaps [========>           ] 0.323949 s\r[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.370727 s\r[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.421969 s\r[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.450894 s\r[racon::Polisher::initialize] aligning overlaps [============>       ] 0.502708 s\r[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.556364 s\r[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.600344 s\r[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.647791 s\r[racon::Polisher::initialize] aligning overlaps [================>   ] 0.711033 s\r[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.759301 s\r[racon::Polisher::initialize] aligning overlaps [==================> ] 0.791986 s\r[racon::Polisher::initialize] aligning overlaps [===================>] 0.834950 s\r[racon::Polisher::initialize] aligning overlaps [====================] 0.959092 s\n[racon::Polisher::initialize] transformed data into windows 0.000355 s\n[racon::Polisher::polish] generating consensus [=>                  ] 0.083261 s\r[racon::Polisher::polish] generating consensus [==>                 ] 0.175137 s\r[racon::Polisher::polish] generating consensus [===>                ] 0.250315 s\r[racon::Polisher::polish] generating consensus [====>               ] 0.307840 s\r[racon::Polisher::polish] generating consensus [=====>              ] 0.349888 s\r[racon::Polisher::polish] generating consensus [======>             ] 0.384120 s\r[racon::Polisher::polish] generating consensus [=======>            ] 0.423456 s\r[racon::Polisher::polish] generating consensus [========>           ] 0.464309 s\r[racon::Polisher::polish] generating consensus [=========>          ] 0.507852 s\r[racon::Polisher::polish] generating consensus [==========>         ] 0.572593 s\r[racon::Polisher::polish] generating consensus [===========>        ] 0.673251 s\r[racon::Polisher::polish] generating consensus [============>       ] 0.789065 s\r[racon::Polisher::polish] generating consensus [=============>      ] 0.946256 s\r[racon::Polisher::polish] generating consensus [==============>     ] 1.114711 s\r[racon::Polisher::polish] generating consensus [===============>    ] 1.255583 s\r[racon::Polisher::polish] generating consensus [================>   ] 1.365067 s\r[racon::Polisher::polish] generating consensus [=================>  ] 1.472362 s\r[racon::Polisher::polish] generating consensus [==================> ] 1.545762 s\r[racon::Polisher::polish] generating consensus [===================>] 1.642583 s\r[racon::Polisher::polish] generating consensus [====================] 2.184582 s\n[racon::Polisher::] total = 3.159358 s\n", "job_stdout": "", "job_stderr": "", "stderr": "[racon::Polisher::initialize] loaded target sequences 0.000979 s\n[racon::Polisher::initialize] loaded sequences 0.012586 s\n[racon::Polisher::initialize] loaded overlaps 0.000714 s\n[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.069263 s\r[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.110070 s\r[racon::Polisher::initialize] aligning overlaps [===>                ] 0.152029 s\r[racon::Polisher::initialize] aligning overlaps [====>               ] 0.177464 s\r[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.223586 s\r[racon::Polisher::initialize] aligning overlaps [======>             ] 0.248829 s\r[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.287735 s\r[racon::Polisher::initialize] aligning overlaps [========>           ] 0.323949 s\r[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.370727 s\r[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.421969 s\r[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.450894 s\r[racon::Polisher::initialize] aligning overlaps [============>       ] 0.502708 s\r[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.556364 s\r[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.600344 s\r[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.647791 s\r[racon::Polisher::initialize] aligning overlaps [================>   ] 0.711033 s\r[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.759301 s\r[racon::Polisher::initialize] aligning overlaps [==================> ] 0.791986 s\r[racon::Polisher::initialize] aligning overlaps [===================>] 0.834950 s\r[racon::Polisher::initialize] aligning overlaps [====================] 0.959092 s\n[racon::Polisher::initialize] transformed data into windows 0.000355 s\n[racon::Polisher::polish] generating consensus [=>                  ] 0.083261 s\r[racon::Polisher::polish] generating consensus [==>                 ] 0.175137 s\r[racon::Polisher::polish] generating consensus [===>                ] 0.250315 s\r[racon::Polisher::polish] generating consensus [====>               ] 0.307840 s\r[racon::Polisher::polish] generating consensus [=====>              ] 0.349888 s\r[racon::Polisher::polish] generating consensus [======>             ] 0.384120 s\r[racon::Polisher::polish] generating consensus [=======>            ] 0.423456 s\r[racon::Polisher::polish] generating consensus [========>           ] 0.464309 s\r[racon::Polisher::polish] generating consensus [=========>          ] 0.507852 s\r[racon::Polisher::polish] generating consensus [==========>         ] 0.572593 s\r[racon::Polisher::polish] generating consensus [===========>        ] 0.673251 s\r[racon::Polisher::polish] generating consensus [============>       ] 0.789065 s\r[racon::Polisher::polish] generating consensus [=============>      ] 0.946256 s\r[racon::Polisher::polish] generating consensus [==============>     ] 1.114711 s\r[racon::Polisher::polish] generating consensus [===============>    ] 1.255583 s\r[racon::Polisher::polish] generating consensus [================>   ] 1.365067 s\r[racon::Polisher::polish] generating consensus [=================>  ] 1.472362 s\r[racon::Polisher::polish] generating consensus [==================> ] 1.545762 s\r[racon::Polisher::polish] generating consensus [===================>] 1.642583 s\r[racon::Polisher::polish] generating consensus [====================] 2.184582 s\n[racon::Polisher::] total = 3.159358 s\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:20:31", "plugin": "core", "name": "end_epoch", "raw_value": "1682184031.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:20:28", "plugin": "core", "name": "start_epoch", "raw_value": "1682184028.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 0, "time_seconds": 157.97676181793213, "inputs": {"library|input_1": {"src": "hda", "id": "3a2ac433ec33c6d2"}, "library|input_2": {"src": "hda", "id": "13c70ef65c241027"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "bd549b7fabdbda7e"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "3754f290c50ed275", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:50:30.330678", "create_time": "2023-04-22T16:48:19.042643", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-ghnz4", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/f/4/b/dataset_f4bb1ca4-0f1e-45a2-9448-d722516fa813.dat' genome && ln -s -f '/galaxy/server/database/objects/f/4/b/dataset_f4bb1ca4-0f1e-45a2-9448-d722516fa813.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/f/3/0/dataset_f30137b0-18e3-466d-9e6e-73058eef78b0.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/8/8/8/dataset_888b73bf-e90f-47ec-bc9c-8bf5f48500c0.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/0/5/9/dataset_0597958e-5613-4731-bb16-5d570b82530a.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 146, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 144, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 145, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"own_file": {"id": "bd549b7fabdbda7e", "src": "hda", "uuid": "f4bb1ca4-0f1e-45a2-9448-d722516fa813"}, "input_2": {"id": "13c70ef65c241027", "src": "hda", "uuid": "888b73bf-e90f-47ec-bc9c-8bf5f48500c0"}, "input_1": {"id": "3a2ac433ec33c6d2", "src": "hda", "uuid": "f30137b0-18e3-466d-9e6e-73058eef78b0"}}, "outputs": {"output": {"id": "1f8c4fb79b8c3108", "src": "hda", "uuid": "0597958e-5613-4731-bb16-5d570b82530a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/f/4/b/dataset_f4bb1ca4-0f1e-45a2-9448-d722516fa813.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 1: 100%\n  bucket 4: 70%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\nGetting block 7 of 30\n  bucket 5: 60%\n  Reserving size (777) for bucket 7\n  bucket 6: 40%\n  Calculating Z arrays for bucket 7\n  bucket 5: 70%\n  bucket 6: 50%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 7: 10%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 7: 20%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  bucket 6: 80%\n  bucket 7: 30%\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 7: 40%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\n  bucket 7: 90%\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\n  bucket 7: 100%\nReturning block of 739 for bucket 5\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Entering block accumulator loop for bucket 9:\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 30\n  bucket 11: 40%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 20%\n  bucket 11: 100%\n  bucket 12: 30%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  bucket 14: 70%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 16: 20%\n  bucket 15: 40%\n  bucket 16: 30%\n  bucket 15: 50%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 16: 50%\n  bucket 15: 70%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  bucket 17: 30%\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 50%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 19: 70%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Entering block accumulator loop for bucket 23:\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 23: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  bucket 29: 20%\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 30: 30%\n  bucket 29: 50%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 30: 70%\n  bucket 29: 90%\n  bucket 30: 80%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 1: 70%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 1: 80%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 1: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nReturning block of 777 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  bucket 7: 30%\n  Calculating Z arrays for bucket 8\n  bucket 7: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 50%\n  bucket 8: 10%\n  bucket 7: 60%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\nGetting block 11 of 30\n  Calculating Z arrays for bucket 10\nGetting block 12 of 30\n  Reserving size (777) for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 10: 30%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 10: 50%\n  bucket 12: 60%\n  bucket 11: 40%\n  bucket 12: 70%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 12: 80%\n  bucket 10: 70%\n  bucket 12: 90%\n  bucket 11: 60%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  bucket 10: 80%\n  Sorting block time: 00:00:00\n  bucket 11: 70%\n  bucket 10: 90%\nReturning block of 372 for bucket 12\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 10%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 15: 20%\n  bucket 15: 30%\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 16: 30%\n  bucket 17: 40%\n  bucket 16: 40%\n  bucket 17: 50%\n  bucket 16: 50%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 16: 70%\n  bucket 17: 90%\n  bucket 16: 80%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 30%\n  bucket 25: 10%\n  bucket 24: 40%\n  bucket 25: 20%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 30%\n  bucket 24: 70%\n  bucket 25: 40%\n  bucket 24: 80%\n  bucket 25: 50%\n  bucket 24: 90%\n  bucket 25: 60%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\nGetting block 27 of 30\n  Calculating Z arrays for bucket 26\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/f/4/b/dataset_f4bb1ca4-0f1e-45a2-9448-d722516fa813.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 1: 100%\n  bucket 4: 70%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\nGetting block 7 of 30\n  bucket 5: 60%\n  Reserving size (777) for bucket 7\n  bucket 6: 40%\n  Calculating Z arrays for bucket 7\n  bucket 5: 70%\n  bucket 6: 50%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 7: 10%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 7: 20%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  bucket 6: 80%\n  bucket 7: 30%\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 7: 40%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\n  bucket 7: 90%\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\n  bucket 7: 100%\nReturning block of 739 for bucket 5\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Entering block accumulator loop for bucket 9:\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 30\n  bucket 11: 40%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 20%\n  bucket 11: 100%\n  bucket 12: 30%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  bucket 14: 70%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 16: 20%\n  bucket 15: 40%\n  bucket 16: 30%\n  bucket 15: 50%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 16: 50%\n  bucket 15: 70%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  bucket 17: 30%\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 50%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 19: 70%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Entering block accumulator loop for bucket 23:\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 23: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  bucket 29: 20%\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 30: 30%\n  bucket 29: 50%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 30: 70%\n  bucket 29: 90%\n  bucket 30: 80%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 1: 70%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 1: 80%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 1: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nReturning block of 777 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  bucket 7: 30%\n  Calculating Z arrays for bucket 8\n  bucket 7: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 50%\n  bucket 8: 10%\n  bucket 7: 60%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\nGetting block 11 of 30\n  Calculating Z arrays for bucket 10\nGetting block 12 of 30\n  Reserving size (777) for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 10: 30%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 10: 50%\n  bucket 12: 60%\n  bucket 11: 40%\n  bucket 12: 70%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 12: 80%\n  bucket 10: 70%\n  bucket 12: 90%\n  bucket 11: 60%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  bucket 10: 80%\n  Sorting block time: 00:00:00\n  bucket 11: 70%\n  bucket 10: 90%\nReturning block of 372 for bucket 12\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 10%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 15: 20%\n  bucket 15: 30%\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 16: 30%\n  bucket 17: 40%\n  bucket 16: 40%\n  bucket 17: 50%\n  bucket 16: 50%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 16: 70%\n  bucket 17: 90%\n  bucket 16: 80%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 30%\n  bucket 25: 10%\n  bucket 24: 40%\n  bucket 25: 20%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 30%\n  bucket 24: 70%\n  bucket 25: 40%\n  bucket 24: 80%\n  bucket 25: 50%\n  bucket 24: 90%\n  bucket 25: 60%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\nGetting block 27 of 30\n  Calculating Z arrays for bucket 26\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:50:18", "plugin": "core", "name": "end_epoch", "raw_value": "1682182218.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:50:17", "plugin": "core", "name": "start_epoch", "raw_value": "1682182217.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_h1o6yp3_.sam v. /tmp/history_bam_converted_to_sam_mt5jbi2r.sam )\n--- local_file\n+++ history_data\n@@ -1,46 +1,46 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/110/tmp -O bam -o /galaxy/server/database/objects/0/5/9/dataset_0597958e-5613-4731-bb16-5d570b82530a.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1106:27607:15990\t141\t*\t0\t0\t*\t*\t0\t0\tCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTTGAGAACTCGGGGGTTGCCCTGTCATTCACAAACAAACACATAGCACTCAAG\tBCCCCFFFFFFFGGGGGGGGGGHGGHHHGHHHHGHHFHHHHHHGHHHHHHHHGGHHHHGGGGFHHHHHHGHHHHHHHHFGHHHHHCHGHGHHGGGGGGGHGFFGG@CEDGHHFHHCFGBDDGGG?AFGFGGGGAEAFDFFFFFFFECFAFFFFFFFFFFFFFFFFFFFBFFEFFFFFFFFFFDAD;=DADFF-.A.BB0000;.00;:..-;----.000.;000;00009...;A.A..0000000//00\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t77\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGA\tBABBBFFDABBBGGGGGGGGGGHGHHHHGAGHGGGGGHHHHHHHHGHHHHHGGGGGGFFHHHHHHHHHFHHHHHGGGGCHFHH3FEHHGCGGGDGHHHGFGGHHGGGGHHHHHHG/DGGGHHHHGGGGGCCHGG?CGG1GHHGHHHHBGHHHFHHGHHHHGGADAD00ECEGHEFHHFFAEFFFFFGGFBFBFFFGFFG.;B/99;BCFGGGGEFFFFFFEDA./:ADEB?FBFFFF;FFEBFBFFB./9.\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t141\t*\t0\t0\t*\t*\t0\t0\tAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTAT\t?ABBBFFFFFFFGGGGGGGGGGGGGHHHHHGGHHHHHHHHHHHGHHHHHHHGGHHHHGHHFHHHGGGGHHHHHHHHHHGHHHHHGHHHFHGGHGGFHHHHHFGFGFHHHHHHHHHHHHFHHHFFHHHHGGGGGGGFFHHGGHHHHHHHFHHHHHGGFDHGHGGGGBFFFFFBAD@>;9.FFFFFFD-99ADFFD-.9FADF--9..;AAFEFFEAA-;.///BB:BBF/BBB//B//99/;BBB/9////F\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:18714:24788\t77\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGA\tBBBCCFFFDEDEGGGGGGGGGGHHHHHHGGHHGGHGGHHHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHCFGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHGHHHHHHHHHHHGHHHHGGEGEGCCEGGHHHHHHG:CAFFGGGGGGBFEFGGGGHGAFFGGFGGGGGGGEFFFFFFFFFEF/EDDFFFFFFFFFBFFFFFBBFFBBF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:18714:24788\t141\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTAGGTCGCAGGAACTGTCCTTGT\tBCCCCCFFFFFFGGGGGGGEGGHHHHGGFFHHHHHHHHHHGGGGGHHHHGHHHHHHHHHHHHHFHHHHHHHHGHHHHHHGHHHHGGCGHHHHHHHHHHHHHHHGHHHHHGDGHGGHHHHHHHHGHHHHHHHHHHHGHHHHHHEHHHGHFGGGGHHHHEHFHHGHFHHF.>GGHHHGHGHGGHCFFCDFDFFFFFFAAF.FFFFFEFAFCFFA..@.AFFFC9--9;.;A///00--;A-.;.000000090\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:21355:8333\t77\t*\t0\t0\t*\t*\t0\t0\tATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATG\tABCBBFFFFFAFGGGGGGGGGGHHHHHHHHFHHHHHGGGGGHHHHHHFHHHGHHHHHHHGGGGGHHHHFFGHGHGGGGGGGHGGEGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHGHHHFHHHHHHHHGHFFHHHHGGHGEGHHGHGFHHFHGHCEFHEGHGHHHGHHHGGGGGGCFFFFBFGGFGGGGFBG?FDGGGEGFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFF.AA/9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:21355:8333\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCGGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAABCCFCCCCCFGGGGGGGGGGHHHGHHHFHHHHHHGHGHHHHHHGHHHHGGGGHHHHHHHHHFFHHFHGHHHHHHGGHGGHHHGHHHHGGHFHHHHHHHFHHGHHGEFFHFHHGGGGGGHHHFHHHHGHHHHE?FGHHHHGFGHGHHGGGDGGGGGFFFCFFFFFFFFFFFFA;DBBDFFFAFFFF;DBAFEDFFFFFEA?-9...9;9;BFFFF//BFBFFFFBFBFFFFFB/BFFF9B/EDEF-BFF.\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:22864:15712\t77\t*\t0\t0\t*\t*\t0\t0\tAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATG\tBBBBBFBBFFFFGGGGCEGGGGHGHHDGFHHHHHHHHHHHHHCHHGHFGBGDFGE?GHHGHFBHHFHHHHHHHHHGHFGFGHGHHGGC@DCFGHHGGGGGGGHHHHHHGGGGGFGGGGFFGGGGFADGFEFFFFFFFFFFF9;FFFF/BFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFEAECDFFFFFFFFFBFFFFFFFFFFFFFFEFBFBFFF/FFFDF-;-9;E@>-9DFFF/FFBF;-.:;.9A//\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:22864:15712\t141\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTCTGTCTCTTATACACATCTGACGCTGCCGCCGAGGGCTCTAGTTGTGGTCTG\tAABCCFFFFFFFGGGGGGGGGGGGGHHHHHHHHHHGHHHGGGGFHGHHHHGHFGFFFFGGHGGGGGCHFHFAFEDHHGGFGGGHHEGEGGHHEGGCHGHHHHGGGGGGHGF0EECGGGGFECCFFGFBGHHHHHHGGHHGHFCFEHFBEFGGADDDC=CC0CCFHG:CEHHHGHBGH:GFFGFF0CAAA/BF09BBBBBBB9CFFB0C00;000;:CFFB;:...D?>:@=:9-@...//;////..;/;/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t77\t*\t0\t0\t*\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACAT\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGFGFGHHFFFHGGEGHFHHGHFHGFFHHHFGHHHFHACECEHHHBGFHGFHHHFHHF4GFHFHFHEHGGE/EG:A-CFGGFGADGGGGFGGGGDAAAADFA.-AFFECFDAAFFFFEFFFFBFF;D;BFFFB/;BFFFFFFFFFFFFFFBFFBF/;//;BFFFF?FFFFFFEDAFFFFFBF//:BFBACF--9/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAAAGTGTGGGCTATTTAGGTTTTT\tCCCCBFFFFFFFGGGGGGGGGGFHHHHHHHHHHHHHHGHHHGEHGGHHGHHHHHGHHEHHGGGGEHGHHHGEHHGHHDGHHHHGGGGGFGEFGGEGHHGCEEEGHHEFGGDHGGGGAGFHHHHGGF/?//GHFFDGGGGGHAD??DC1DHHBGHHHHGHF<<//ACFHHCDCDE?CGEBEGFFFGF?.?DGGGGEFEFFB00CFFFB.:AFFB;/BB9BBFFBBFFFAD.;///9.A./A:FB;BF//B..\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:24830:14440\t77\t*\t0\t0\t*\t*\t0\t0\tAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACC\tABBBA@FFFFBBGGGGGGGGGGHGHHGHHGHHHGGHHHHHGHGHHGDHHHHHHAGGGGFHHGHHHHHHGHHHHHHHHHHHEGAFGFHFHHHHGEGHHHHHHHHHHHHHHHHHGGHHHGEFEGGHHGHHHHHGGHGFHH/?GHHHHGFGHGFHCGGBBDAFFFEFFFFFFFFFFFFFF=CDDADDFFFFEF=BFFFEFFFBFFFFEEBF./:FFFFFFFFFFFFFFFFFFFEFFFFFFFFFFF/BFBEFFC-\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:24830:14440\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTAGTTAGGTTTTT\tCBCCCFFFFFFFGDGGGGGGGGHHHHHHHFGHHHHHHGHHHGGHGGHHHHHHGHHHFHHHGGGGGHHHHHGHHHHHHHHHHHHGGGGGHGHHFGGHHHGGGCGGGHHGGG?GGFGGGHHFHGH?FG/CDHHFAAEGGG/DHFC?-.AFGFH0CHHFH0DHHG/CDEBFHG.CA.:0C:;.FGFEFFG:E.B909BFF/;CFGBB9BBA.:CFGFFFFFFFF/;//AF?.ADEAB.9.A/;.:BFFF/9FF.\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:26478:23602\t77\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACCTCTC\t1AAAAF1B13BBBEGGGFGGGGGGHHDB1BGFHHHFGFGGG0F00BGBGFGGF1GBGB1BGCGAEE/FGFHGHFHHHHHBFF1B0FGGF//F//FGFGFFF/1@B1DFHHHGGEFEDHFDFAFF0B//</ECCC>1FDD1GFFHHDF?1BD>GF/GCAC0C@?@-;99BBB->@--;-B//99B--9-BF=A--A-:A----9AA9AFBFBBB?E@BBFFFFFFFBFFFFFBFFFBBFFF//B/////-;9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:26478:23602\t141\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGCGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTAGCCTGTCTCTTATACACATCTG\tAAA?AFFFFFF>FGGGGGGGGGGGFHHEFGHHHGGGGGGHHHCGGEFHFGGGFHHHHHGGGEGGHHFHEEGEG/EEEE/?/EHFHH3GGH4EGHHCB01CGHGHGD//<@CGGBFFDGHHHH0FEHHGEGFHCD11>0=GGHGCCFGHGBGGD0GGHC0C.@?ACEEC/.EDEB?BFFCFB9CFF090BBCBFBF0CCB0B00A.9E.B/9BA=-..B9FBF//;BBBBFFB:./9/9/9;B//9BF/;B/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:12233:13498\t77\t*\t0\t0\t*\t*\t0\t0\tTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCCTGTCTCTTATACAC\tBCCBAFFBCCCCGGGGGGGGGGHHHHGGGGGHHHHHHGHGHBGFHHHHHGGGGGHHGGBFGHHGGGGGGGHHHGGGGHHGGGFHHHHHHGGGGGGHGHHGGGGGGGGGGGGGGHHHHFHHHGHGHHHHHHGHGHHGGFGGGDFFGGHHHGHGH/<GHHFGBGFHFBGHHHGHHGEFHFHFGBF0BFGGGFGGGGGEFFF;A?EEG?CFFFFF0:BEFFFFFBFFFFFF0FFEFF?EFFFF0BFFFFBBB00\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:12233:13498\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACTGTCTCTTATACAC\tABBBCFFFFFFFGGGGGGGGGGHHHGHHHHHHBGHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHGHHHHHGGHHGHHHHHHGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHGHGHHHHHHGHGHGGHGGGGAGGFGGGGGGGGFFFFFFFFFFDFFFFDFFFFFFFFF>.AEDEFFFFF?E-DAB9FFFFFFFEF:FBFB009:0FFFF9BFFBFFFFBB0.9A=-/0BFF0BBFFBFF:90:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:14328:14751\t77\t*\t0\t0\t*\t*\t0\t0\tATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACA\tBCCCBFFFFFFFGGGGGGGGGGHHHHHHHGHGHHHHHGGGGGFHHHFFDGHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHGHGGGGGGGGGGGCFGHHHHHHHHHHHHHHHHHGHHHHGGGDGGFGGFGGHHHHHH>FHHHFHGHGHHGHHHGHHBA<CGFHHHHHHHHHHGFHHGDDEGCEGGGGEEFBFGGGGFGGGB0CFF:FFFFFBBFFFFBFEFA.BFFFEFFFBF/BF/FFEFFBFFF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:14328:14751\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATCTGTCTCTTATACA\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDHHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGHGGHGGHHHHHGHHHHHHHHHHHHHHHHFHGHHHHHGGGGGHHHHHGHGHHHHHHG?FHHHFHGHGHGHHGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAFFE.ADEFFFFFFFADFFFFF///BBFF/FFFFFBFAFFFFBB///;9:BBFFFBF9B9//:/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:16350:22621\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAAAACFFFFFFFGGGFGGGGGGHHHHHHGBGGGFGGGHFGGGGGHHHHHGGHHHHFHGGGGGGHHGFHHHHHGEFHHFFHHGFCEFHHHGFF?GHHEE@ECFHHEGGGGBFFEGGGHFDHHGFG/BFEHHFCDGGGCDEGGGCGFFFHHHFEGHFHHHHGHHDGHHHGGHDED0CE;CFFFFBFF/;CBFFFGG0/FFF0B0:BB?.;BFF0FGFBFFFFFEFE;ADED.;BE.99FAFFFFFFF/;EFF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:16350:22621\t141\t*\t0\t0\t*\t*\t0\t0\tCATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATAT\tCCCCCFFFFFFFGGGGGCGGGGHHHHHHHHGHHHHGHGHHHHGGGGHHHHHHHHHHHIHHHGHHHHHHGGHGGHHHHGHGHGHHHHHHHHHHHGHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHGHGHHHGHHGGGGGHHGGGDADDGFFGGGGFFFFFFFFFDFFFDFFFFFFFFFFFAFAEFEDFFFFFFEE-AAFFFFFBFFFFF0FFFBFF;AFFFFFFFFFFFFFFFFFFFFFAB9BFFFFFBFFF\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\t3ABBBFFFFF@FGGGGGGGCGGGHHHHHHHHGHHACGDAGFEEHGGHHGHHHHHHHHHHHGGGGGGHHHHGFHFGHGFDDGFFFGGFGHHFF?FEGHHGGGGGGHHHGFFDHHFGG?HEFGHHGGGDDCGFFC?ECCFGDEFGGGGGGFHHHHHHHEFHFCGHHGEGGGGD.:.A;CECAFFFFBFF/;EFFBFFBFB;;BFFFFBBAA./BFFEBB//BFFFFFFFDFFFEEFEFFFBFBFBBFFFFF./\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t141\t*\t0\t0\t*\t*\t0\t0\tCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCT\tBBBBBFFFFFFFGGGGGGGGGGHHHHGGHHHHHHHGGGEGGHHFGDHGHHHHHHGGHHH2GGHHHGHHGGGGFGFBFHHHGGGGHGHGHHHHHHHHHHGHGHHGHHGGHGGHHHHGGFHGGGHFHGHHHHHGGHHHGHGFCGFFDGGG/FCFHBGHHHHHHHGHCHHHHGGGHGHGHGCFF;>@DFFBFFFFFFDFFFFFFFF;;.DDAA;FFF;BB;C@..9::BBFBBA;-:.::FBB///;/////:/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:23314:26089\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTG\tBBBBBFFF?FFAGFBFGGEGGGGHGHHFHHHGHHGFGGFHHHHHHHHFHHFHHGHHHGGGGGHHHHFFEHHHGGGGGGHFHGEEGF3FEFGHHHHHFFDEEEEHHHGEEGGGGGHFGGDADGFFFFFHHFGHHHFGBHGHHGBCEHDEDDGADCFFHHHGG/:GCCCGHFGHFFGG0CGFGF.FB/9;BFBB0FFBFG0A-..;C:E/.A9.FFFFFFFF9BFFFFFFBFBBB./:BFFF/F;AA?F////\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:23314:26089\t141\t*\t0\t0\t*\t*\t0\t0\tCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCC\tBBAAAFFFFFFFGGGGGGGGGGHHGDHHHHHFHHHHGGGGGFHFFGFFHEGHHHHHHHHFGHFHHHHDEHHHHHHGHFHHGGGGHHGFHHHHHHHHHHHHHHHHHHF?EEFCHFGFHHEFFFHGFHHGHFHFHHHFFHAG??GHACGGDGHGGBFHHHHHHHGHFGHGHGEGHGCFFF@CD-BDDFFFFFFFFDDFFBBFFD-B-A.DFFA.AFEFF-;-..:..BFFFFFA-../9FFF//B/BBBBFF/\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 1, "time_seconds": 170.98386812210083, "inputs": {"library|input_1": {"src": "hdca", "id": "6018f51153f15ac0"}, "library|unaligned_file": true, "library|paired_options|paired_options_selector": "no", "library|type": "paired_collection", "reference_genome|own_file": {"src": "hda", "id": "7bd8dba9aa3956da"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "28e4c94f312ad183", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:50:50.440211", "create_time": "2023-04-22T16:48:44.546552", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-khl56", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/c/d/a/dataset_cda75ac8-e759-4294-8320-7584b20899cc.dat' genome && ln -s -f '/galaxy/server/database/objects/c/d/a/dataset_cda75ac8-e759-4294-8320-7584b20899cc.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/a/3/7/dataset_a377c16b-1d9c-4649-8810-eb9141256cc1.dat' input_f.fastq &&  ln -s '/galaxy/server/database/objects/7/a/d/dataset_7adc20cd-6de3-4a48-95f6-2509f54c3a1e.dat' input_r.fastq &&    bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq' --un-conc '/galaxy/server/database/objects/7/e/0/dataset_7e0d9409-82cf-4263-a8d0-89839a54d2fb.dat'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/5/9/d/dataset_59d2e525-738a-4fe3-add7-eb1e5c648ead.dat'  && mv '/galaxy/server/database/objects/7/e/0/dataset_7e0d9409-82cf-4263-a8d0-89839a54d2fb.1.dat' '/galaxy/server/database/objects/7/e/0/dataset_7e0d9409-82cf-4263-a8d0-89839a54d2fb.dat' && mv '/galaxy/server/database/objects/7/e/0/dataset_7e0d9409-82cf-4263-a8d0-89839a54d2fb.2.dat' '/galaxy/server/database/objects/8/0/0/dataset_800ad526-4577-45da-b7da-a58e00d9ed7c.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 153, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 2, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 2, \"src\": \"hdca\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_collection\", \"unaligned_file\": \"true\"}"}, "inputs": {"input_11": {"id": "cc4fa18b618186f5", "src": "hda", "uuid": "a377c16b-1d9c-4649-8810-eb9141256cc1"}, "input_12": {"id": "4f524c1f71b02310", "src": "hda", "uuid": "7adc20cd-6de3-4a48-95f6-2509f54c3a1e"}, "own_file": {"id": "7bd8dba9aa3956da", "src": "hda", "uuid": "cda75ac8-e759-4294-8320-7584b20899cc"}}, "outputs": {"output_unaligned_reads_l": {"id": "0c45ebbd54c5735b", "src": "hda", "uuid": "7e0d9409-82cf-4263-a8d0-89839a54d2fb"}, "output_unaligned_reads_r": {"id": "b3ff25dbfa9f6964", "src": "hda", "uuid": "800ad526-4577-45da-b7da-a58e00d9ed7c"}, "output": {"id": "79c54f55206f0db6", "src": "hda", "uuid": "59d2e525-738a-4fe3-add7-eb1e5c648ead"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/d/a/dataset_cda75ac8-e759-4294-8320-7584b20899cc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 1: 100%\n  bucket 2: 90%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 3: 100%\n  bucket 4: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nReturning block of 598 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 15: 60%\n  bucket 16: 80%\n  bucket 15: 70%\n  bucket 16: 90%\n  bucket 15: 80%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\nGetting block 18 of 30\n  bucket 17: 80%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 90%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  bucket 19: 20%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  bucket 20: 80%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 22: 80%\n  bucket 23: 80%\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  bucket 23: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 27: 40%\n  bucket 26: 80%\n  bucket 27: 50%\n  bucket 26: 90%\n  bucket 27: 60%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 2: 100%\n  bucket 1: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\nGetting block 6 of 30\n  bucket 5: 80%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 90%\n  bucket 6: 10%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 11 of 30\nReturning block of 681 for bucket 10\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\nGetting block 12 of 30\n  bucket 11: 80%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 90%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\nGetting block 16 of 30\n  bucket 15: 90%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  bucket 26: 60%\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 70%\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 26: 80%\n  bucket 27: 30%\n  bucket 26: 90%\n  bucket 27: 40%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  Sorting block time: 00:00:00\n  bucket 27: 90%\nReturning block of 648 for bucket 26\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  bucket 29: 10%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 30: 10%\n  bucket 29: 30%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/d/a/dataset_cda75ac8-e759-4294-8320-7584b20899cc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 1: 100%\n  bucket 2: 90%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 3: 100%\n  bucket 4: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nReturning block of 598 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 15: 60%\n  bucket 16: 80%\n  bucket 15: 70%\n  bucket 16: 90%\n  bucket 15: 80%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\nGetting block 18 of 30\n  bucket 17: 80%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 90%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  bucket 19: 20%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  bucket 20: 80%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 22: 80%\n  bucket 23: 80%\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  bucket 23: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 27: 40%\n  bucket 26: 80%\n  bucket 27: 50%\n  bucket 26: 90%\n  bucket 27: 60%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 2: 100%\n  bucket 1: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\nGetting block 6 of 30\n  bucket 5: 80%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 90%\n  bucket 6: 10%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 11 of 30\nReturning block of 681 for bucket 10\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\nGetting block 12 of 30\n  bucket 11: 80%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 90%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\nGetting block 16 of 30\n  bucket 15: 90%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  bucket 26: 60%\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 70%\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 26: 80%\n  bucket 27: 30%\n  bucket 26: 90%\n  bucket 27: 40%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  Sorting block time: 00:00:00\n  bucket 27: 90%\nReturning block of 648 for bucket 26\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  bucket 29: 10%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 30: 10%\n  bucket 29: 30%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:50:34", "plugin": "core", "name": "end_epoch", "raw_value": "1682182234.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:50:33", "plugin": "core", "name": "start_epoch", "raw_value": "1682182233.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_7tg_w_qa.sam v. /tmp/history_bam_converted_to_sam_un6beo9x.sam )\n--- local_file\n+++ history_data\n@@ -1,30 +1,31 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --passthrough -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/117/tmp -O bam -o /galaxy/server/database/objects/5/9/d/dataset_59d2e525-738a-4fe3-add7-eb1e5c648ead.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1106:27607:15990\t141\t*\t0\t0\t*\t*\t0\t0\tCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTTGAGAACTCGGGGGTTGCCCTGTCATTCACAAACAAACACATAGCACTCAAG\tBCCCCFFFFFFFGGGGGGGGGGHGGHHHGHHHHGHHFHHHHHHGHHHHHHHHGGHHHHGGGGFHHHHHHGHHHHHHHHFGHHHHHCHGHGHHGGGGGGGHGFFGG@CEDGHHFHHCFGBDDGGG?AFGFGGGGAEAFDFFFFFFFECFAFFFFFFFFFFFFFFFFFFFBFFEFFFFFFFFFFDAD;=DADFF-.A.BB0000;.00;:..-;----.000.;000;00009...;A.A..0000000//00\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t77\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGA\tBABBBFFDABBBGGGGGGGGGGHGHHHHGAGHGGGGGHHHHHHHHGHHHHHGGGGGGFFHHHHHHHHHFHHHHHGGGGCHFHH3FEHHGCGGGDGHHHGFGGHHGGGGHHHHHHG/DGGGHHHHGGGGGCCHGG?CGG1GHHGHHHHBGHHHFHHGHHHHGGADAD00ECEGHEFHHFFAEFFFFFGGFBFBFFFGFFG.;B/99;BCFGGGGEFFFFFFEDA./:ADEB?FBFFFF;FFEBFBFFB./9.\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t141\t*\t0\t0\t*\t*\t0\t0\tAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTAT\t?ABBBFFFFFFFGGGGGGGGGGGGGHHHHHGGHHHHHHHHHHHGHHHHHHHGGHHHHGHHFHHHGGGGHHHHHHHHHHGHHHHHGHHHFHGGHGGFHHHHHFGFGFHHHHHHHHHHHHFHHHFFHHHHGGGGGGGFFHHGGHHHHHHHFHHHHHGGFDHGHGGGGBFFFFFBAD@>;9.FFFFFFD-99ADFFD-.9FADF--9..;AAFEFFEAA-;.///BB:BBF/BBB//B//99/;BBB/9////F\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:18714:24788\t77\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGA\tBBBCCFFFDEDEGGGGGGGGGGHHHHHHGGHHGGHGGHHHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHCFGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHGHHHHHHHHHHHGHHHHGGEGEGCCEGGHHHHHHG:CAFFGGGGGGBFEFGGGGHGAFFGGFGGGGGGGEFFFFFFFFFEF/EDDFFFFFFFFFBFFFFFBBFFBBF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:18714:24788\t141\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTAGGTCGCAGGAACTGTCCTTGT\tBCCCCCFFFFFFGGGGGGGEGGHHHHGGFFHHHHHHHHHHGGGGGHHHHGHHHHHHHHHHHHHFHHHHHHHHGHHHHHHGHHHHGGCGHHHHHHHHHHHHHHHGHHHHHGDGHGGHHHHHHHHGHHHHHHHHHHHGHHHHHHEHHHGHFGGGGHHHHEHFHHGHFHHF.>GGHHHGHGHGGHCFFCDFDFFFFFFAAF.FFFFFEFAFCFFA..@.AFFFC9--9;.;A///00--;A-.;.000000090\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:21355:8333\t77\t*\t0\t0\t*\t*\t0\t0\tATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATG\tABCBBFFFFFAFGGGGGGGGGGHHHHHHHHFHHHHHGGGGGHHHHHHFHHHGHHHHHHHGGGGGHHHHFFGHGHGGGGGGGHGGEGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHGHHHFHHHHHHHHGHFFHHHHGGHGEGHHGHGFHHFHGHCEFHEGHGHHHGHHHGGGGGGCFFFFBFGGFGGGGFBG?FDGGGEGFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFF.AA/9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:21355:8333\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCGGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAABCCFCCCCCFGGGGGGGGGGHHHGHHHFHHHHHHGHGHHHHHHGHHHHGGGGHHHHHHHHHFFHHFHGHHHHHHGGHGGHHHGHHHHGGHFHHHHHHHFHHGHHGEFFHFHHGGGGGGHHHFHHHHGHHHHE?FGHHHHGFGHGHHGGGDGGGGGFFFCFFFFFFFFFFFFA;DBBDFFFAFFFF;DBAFEDFFFFFEA?-9...9;9;BFFFF//BFBFFFFBFBFFFFFB/BFFF9B/EDEF-BFF.\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:22864:15712\t77\t*\t0\t0\t*\t*\t0\t0\tAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATG\tBBBBBFBBFFFFGGGGCEGGGGHGHHDGFHHHHHHHHHHHHHCHHGHFGBGDFGE?GHHGHFBHHFHHHHHHHHHGHFGFGHGHHGGC@DCFGHHGGGGGGGHHHHHHGGGGGFGGGGFFGGGGFADGFEFFFFFFFFFFF9;FFFF/BFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFEAECDFFFFFFFFFBFFFFFFFFFFFFFFEFBFBFFF/FFFDF-;-9;E@>-9DFFF/FFBF;-.:;.9A//\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:22864:15712\t141\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTCTGTCTCTTATACACATCTGACGCTGCCGCCGAGGGCTCTAGTTGTGGTCTG\tAABCCFFFFFFFGGGGGGGGGGGGGHHHHHHHHHHGHHHGGGGFHGHHHHGHFGFFFFGGHGGGGGCHFHFAFEDHHGGFGGGHHEGEGGHHEGGCHGHHHHGGGGGGHGF0EECGGGGFECCFFGFBGHHHHHHGGHHGHFCFEHFBEFGGADDDC=CC0CCFHG:CEHHHGHBGH:GFFGFF0CAAA/BF09BBBBBBB9CFFB0C00;000;:CFFB;:...D?>:@=:9-@...//;////..;/;/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t77\t*\t0\t0\t*\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACAT\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGFGFGHHFFFHGGEGHFHHGHFHGFFHHHFGHHHFHACECEHHHBGFHGFHHHFHHF4GFHFHFHEHGGE/EG:A-CFGGFGADGGGGFGGGGDAAAADFA.-AFFECFDAAFFFFEFFFFBFF;D;BFFFB/;BFFFFFFFFFFFFFFBFFBF/;//;BFFFF?FFFFFFEDAFFFFFBF//:BFBACF--9/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAAAGTGTGGGCTATTTAGGTTTTT\tCCCCBFFFFFFFGGGGGGGGGGFHHHHHHHHHHHHHHGHHHGEHGGHHGHHHHHGHHEHHGGGGEHGHHHGEHHGHHDGHHHHGGGGGFGEFGGEGHHGCEEEGHHEFGGDHGGGGAGFHHHHGGF/?//GHFFDGGGGGHAD??DC1DHHBGHHHHGHF<<//ACFHHCDCDE?CGEBEGFFFGF?.?DGGGGEFEFFB00CFFFB.:AFFB;/BB9BBFFBBFFFAD.;///9.A./A:FB;BF//B..\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:24830:14440\t77\t*\t0\t0\t*\t*\t0\t0\tAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACC\tABBBA@FFFFBBGGGGGGGGGGHGHHGHHGHHHGGHHHHHGHGHHGDHHHHHHAGGGGFHHGHHHHHHGHHHHHHHHHHHEGAFGFHFHHHHGEGHHHHHHHHHHHHHHHHHGGHHHGEFEGGHHGHHHHHGGHGFHH/?GHHHHGFGHGFHCGGBBDAFFFEFFFFFFFFFFFFFF=CDDADDFFFFEF=BFFFEFFFBFFFFEEBF./:FFFFFFFFFFFFFFFFFFFEFFFFFFFFFFF/BFBEFFC-\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:24830:14440\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTAGTTAGGTTTTT\tCBCCCFFFFFFFGDGGGGGGGGHHHHHHHFGHHHHHHGHHHGGHGGHHHHHHGHHHFHHHGGGGGHHHHHGHHHHHHHHHHHHGGGGGHGHHFGGHHHGGGCGGGHHGGG?GGFGGGHHFHGH?FG/CDHHFAAEGGG/DHFC?-.AFGFH0CHHFH0DHHG/CDEBFHG.CA.:0C:;.FGFEFFG:E.B909BFF/;CFGBB9BBA.:CFGFFFFFFFF/;//AF?.ADEAB.9.A/;.:BFFF/9FF.\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:26478:23602\t77\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACCTCTC\t1AAAAF1B13BBBEGGGFGGGGGGHHDB1BGFHHHFGFGGG0F00BGBGFGGF1GBGB1BGCGAEE/FGFHGHFHHHHHBFF1B0FGGF//F//FGFGFFF/1@B1DFHHHGGEFEDHFDFAFF0B//</ECCC>1FDD1GFFHHDF?1BD>GF/GCAC0C@?@-;99BBB->@--;-B//99B--9-BF=A--A-:A----9AA9AFBFBBB?E@BBFFFFFFFBFFFFFBFFFBBFFF//B/////-;9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1107:26478:23602\t141\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGCGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTAGCCTGTCTCTTATACACATCTG\tAAA?AFFFFFF>FGGGGGGGGGGGFHHEFGHHHGGGGGGHHHCGGEFHFGGGFHHHHHGGGEGGHHFHEEGEG/EEEE/?/EHFHH3GGH4EGHHCB01CGHGHGD//<@CGGBFFDGHHHH0FEHHGEGFHCD11>0=GGHGCCFGHGBGGD0GGHC0C.@?ACEEC/.EDEB?BFFCFB9CFF090BBCBFBF0CCB0B00A.9E.B/9BA=-..B9FBF//;BBBBFFB:./9/9/9;B//9BF/;B/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:12233:13498\t77\t*\t0\t0\t*\t*\t0\t0\tTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCCTGTCTCTTATACAC\tBCCBAFFBCCCCGGGGGGGGGGHHHHGGGGGHHHHHHGHGHBGFHHHHHGGGGGHHGGBFGHHGGGGGGGHHHGGGGHHGGGFHHHHHHGGGGGGHGHHGGGGGGGGGGGGGGHHHHFHHHGHGHHHHHHGHGHHGGFGGGDFFGGHHHGHGH/<GHHFGBGFHFBGHHHGHHGEFHFHFGBF0BFGGGFGGGGGEFFF;A?EEG?CFFFFF0:BEFFFFFBFFFFFF0FFEFF?EFFFF0BFFFFBBB00\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:12233:13498\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACTGTCTCTTATACAC\tABBBCFFFFFFFGGGGGGGGGGHHHGHHHHHHBGHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHGHHHHHGGHHGHHHHHHGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHGHGHHHHHHGHGHGGHGGGGAGGFGGGGGGGGFFFFFFFFFFDFFFFDFFFFFFFFF>.AEDEFFFFF?E-DAB9FFFFFFFEF:FBFB009:0FFFF9BFFBFFFFBB0.9A=-/0BFF0BBFFBFF:90:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:14328:14751\t77\t*\t0\t0\t*\t*\t0\t0\tATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACA\tBCCCBFFFFFFFGGGGGGGGGGHHHHHHHGHGHHHHHGGGGGFHHHFFDGHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHGHGGGGGGGGGGGCFGHHHHHHHHHHHHHHHHHGHHHHGGGDGGFGGFGGHHHHHH>FHHHFHGHGHHGHHHGHHBA<CGFHHHHHHHHHHGFHHGDDEGCEGGGGEEFBFGGGGFGGGB0CFF:FFFFFBBFFFFBFEFA.BFFFEFFFBF/BF/FFEFFBFFF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:14328:14751\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATCTGTCTCTTATACA\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDHHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGHGGHGGHHHHHGHHHHHHHHHHHHHHHHFHGHHHHHGGGGGHHHHHGHGHHHHHHG?FHHHFHGHGHGHHGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAFFE.ADEFFFFFFFADFFFFF///BBFF/FFFFFBFAFFFFBB///;9:BBFFFBF9B9//:/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:16350:22621\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAAAACFFFFFFFGGGFGGGGGGHHHHHHGBGGGFGGGHFGGGGGHHHHHGGHHHHFHGGGGGGHHGFHHHHHGEFHHFFHHGFCEFHHHGFF?GHHEE@ECFHHEGGGGBFFEGGGHFDHHGFG/BFEHHFCDGGGCDEGGGCGFFFHHHFEGHFHHHHGHHDGHHHGGHDED0CE;CFFFFBFF/;CBFFFGG0/FFF0B0:BB?.;BFF0FGFBFFFFFEFE;ADED.;BE.99FAFFFFFFF/;EFF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:16350:22621\t141\t*\t0\t0\t*\t*\t0\t0\tCATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATAT\tCCCCCFFFFFFFGGGGGCGGGGHHHHHHHHGHHHHGHGHHHHGGGGHHHHHHHHHHHIHHHGHHHHHHGGHGGHHHHGHGHGHHHHHHHHHHHGHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHGHGHHHGHHGGGGGHHGGGDADDGFFGGGGFFFFFFFFFDFFFDFFFFFFFFFFFAFAEFEDFFFFFFEE-AAFFFFFBFFFFF0FFFBFF;AFFFFFFFFFFFFFFFFFFFFFAB9BFFFFFBFFF\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\t3ABBBFFFFF@FGGGGGGGCGGGHHHHHHHHGHHACGDAGFEEHGGHHGHHHHHHHHHHHGGGGGGHHHHGFHFGHGFDDGFFFGGFGHHFF?FEGHHGGGGGGHHHGFFDHHFGG?HEFGHHGGGDDCGFFC?ECCFGDEFGGGGGGFHHHHHHHEFHFCGHHGEGGGGD.:.A;CECAFFFFBFF/;EFFBFFBFB;;BFFFFBBAA./BFFEBB//BFFFFFFFDFFFEEFEFFFBFBFBBFFFFF./\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t141\t*\t0\t0\t*\t*\t0\t0\tCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCT\tBBBBBFFFFFFFGGGGGGGGGGHHHHGGHHHHHHHGGGEGGHHFGDHGHHHHHHGGHHH2GGHHHGHHGGGGFGFBFHHHGGGGHGHGHHHHHHHHHHGHGHHGHHGGHGGHHHHGGFHGGGHFHGHHHHHGGHHHGHGFCGFFDGGG/FCFHBGHHHHHHHGHCHHHHGGGHGHGHGCFF;>@DFFBFFFFFFDFFFFFFFF;;.DDAA;FFF;BB;C@..9::BBFBBA;-:.::FBB///;/////:/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:23314:26089\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTG\tBBBBBFFF?FFAGFBFGGEGGGGHGHHFHHHGHHGFGGFHHHHHHHHFHHFHHGHHHGGGGGHHHHFFEHHHGGGGGGHFHGEEGF3FEFGHHHHHFFDEEEEHHHGEEGGGGGHFGGDADGFFFFFHHFGHHHFGBHGHHGBCEHDEDDGADCFFHHHGG/:GCCCGHFGHFFGG0CGFGF.FB/9;BFBB0FFBFG0A-..;C:E/.A9.FFFFFFFF9BFFFFFFBFBBB./:BFFF/F;AA?F////\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1108:23314:26089\t141\t*\t0\t0\t*\t*\t0\t0\tCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCC\tBBAAAFFFFFFFGGGGGGGGGGHHGDHHHHHFHHHHGGGGGFHFFGFFHEGHHHHHHHHFGHFHHHHDEHHHHHHGHFHHGGGGHHGFHHHHHHHHHHHHHHHHHHF?EEFCHFGFHHEFFFHGFHHGHFHFHHHFFHAG??GHACGGDGHGGBFHHHHHHHGHFGHGHGEGHGCFFF@CD-BDDFFFFFFFFDDFFBBFFD-B-A.DFFA.AFEFF-;-..:..BFFFFFA-../9FFF//B/BBBBFF/\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 2, "time_seconds": 150.91411781311035, "inputs": {"library|input_1": {"src": "hda", "id": "cc4fa18b618186f5"}, "library|input_2": {"src": "hda", "id": "4f524c1f71b02310"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "7bd8dba9aa3956da"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "6fcd81857172a41f", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:50:58.173493", "create_time": "2023-04-22T16:49:02.196747", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-l5ct6", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/c/d/a/dataset_cda75ac8-e759-4294-8320-7584b20899cc.dat' genome && ln -s -f '/galaxy/server/database/objects/c/d/a/dataset_cda75ac8-e759-4294-8320-7584b20899cc.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/a/3/7/dataset_a377c16b-1d9c-4649-8810-eb9141256cc1.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/7/a/d/dataset_7adc20cd-6de3-4a48-95f6-2509f54c3a1e.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/c/e/f/dataset_cefa4516-f9f7-4a96-aecb-04d8d7ce97b6.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 153, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 151, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 152, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "cc4fa18b618186f5", "src": "hda", "uuid": "a377c16b-1d9c-4649-8810-eb9141256cc1"}, "input_2": {"id": "4f524c1f71b02310", "src": "hda", "uuid": "7adc20cd-6de3-4a48-95f6-2509f54c3a1e"}, "own_file": {"id": "7bd8dba9aa3956da", "src": "hda", "uuid": "cda75ac8-e759-4294-8320-7584b20899cc"}}, "outputs": {"output": {"id": "e857d74781f2144a", "src": "hda", "uuid": "cefa4516-f9f7-4a96-aecb-04d8d7ce97b6"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/d/a/dataset_cda75ac8-e759-4294-8320-7584b20899cc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 3: 60%\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  bucket 5: 30%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 7:\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 50%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 8: 20%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 8: 30%\n  bucket 5: 100%\n  bucket 6: 60%\n  bucket 7: 60%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 6: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  bucket 8: 70%\n  Sorting block of length 705 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 80%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nReturning block of 706 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 90%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 30\n  bucket 11: 30%\n  Reserving size (777) for bucket 12\n  Sorting block time: 00:00:00\n  bucket 11: 40%\n  Calculating Z arrays for bucket 12\nReturning block of 248 for bucket 10\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 11: 70%\n  bucket 12: 20%\n  bucket 11: 80%\n  bucket 12: 30%\n  bucket 11: 90%\n  bucket 12: 40%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 30\n  Entering block accumulator loop for bucket 14:\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Calculating Z arrays for bucket 16\n  bucket 14: 10%\n  Entering block accumulator loop for bucket 16:\n  bucket 14: 20%\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 14: 30%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 14: 40%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 14: 60%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 14: 70%\n  bucket 15: 60%\n  bucket 14: 80%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 14: 90%\n  bucket 16: 70%\n  bucket 14: 100%\n  bucket 15: 80%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  bucket 16: 90%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nReturning block of 544 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 30\n  Entering block accumulator loop for bucket 18:\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 18: 10%\n  bucket 19: 20%\n  bucket 18: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 18: 30%\n  bucket 19: 50%\n  bucket 18: 40%\n  bucket 19: 60%\n  bucket 18: 50%\n  bucket 19: 70%\n  bucket 18: 60%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\n  bucket 18: 100%\nReturning block of 732 for bucket 19\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\nGetting block 21 of 30\n  Calculating Z arrays for bucket 20\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 20: 10%\n  bucket 21: 20%\n  bucket 20: 20%\n  bucket 21: 30%\n  bucket 20: 30%\n  bucket 21: 40%\n  bucket 20: 40%\n  bucket 21: 50%\n  bucket 20: 50%\n  bucket 21: 60%\n  bucket 20: 60%\n  bucket 21: 70%\n  bucket 20: 70%\n  bucket 21: 80%\n  bucket 20: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  bucket 20: 90%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 23: 20%\n  bucket 22: 60%\n  bucket 23: 30%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 22: 90%\n  bucket 23: 50%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nReturning block of 416 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 3: 80%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 1: 90%\n  bucket 4: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 6: 10%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 7: 10%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 7: 30%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 7: 40%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 7: 70%\n  bucket 5: 90%\n  bucket 6: 100%\n  bucket 7: 80%\n  bucket 5: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 7: 90%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 8 of 30\nReturning block of 777 for bucket 5\n  bucket 7: 100%\n  Reserving size (777) for bucket 8\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\nGetting block 11 of 30\n  bucket 9: 50%\n  Calculating Z arrays for bucket 10\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 9: 60%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  bucket 10: 10%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 100%\n  bucket 10: 30%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 11: 30%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 70%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 10%\n  bucket 14: 90%\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 100%\n  bucket 15: 20%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 13: 10%\n  bucket 15: 30%\nReturning block of 709 for bucket 14\n  bucket 13: 20%\n  bucket 15: 40%\n  bucket 13: 30%\n  bucket 15: 50%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 15: 60%\n  bucket 13: 60%\n  bucket 15: 70%\n  bucket 13: 70%\n  bucket 15: 80%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 15: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  bucket 17: 10%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  bucket 21: 60%\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 70%\n  bucket 22: 10%\n  bucket 21: 80%\n  bucket 22: 20%\n  bucket 21: 90%\n  bucket 22: 30%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  bucket 24: 100%\n  Calculating Z arrays for bucket 25\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/d/a/dataset_cda75ac8-e759-4294-8320-7584b20899cc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 3: 60%\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  bucket 5: 30%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 7:\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 50%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 8: 20%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 8: 30%\n  bucket 5: 100%\n  bucket 6: 60%\n  bucket 7: 60%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 6: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  bucket 8: 70%\n  Sorting block of length 705 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 80%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nReturning block of 706 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 90%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 30\n  bucket 11: 30%\n  Reserving size (777) for bucket 12\n  Sorting block time: 00:00:00\n  bucket 11: 40%\n  Calculating Z arrays for bucket 12\nReturning block of 248 for bucket 10\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 11: 70%\n  bucket 12: 20%\n  bucket 11: 80%\n  bucket 12: 30%\n  bucket 11: 90%\n  bucket 12: 40%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 30\n  Entering block accumulator loop for bucket 14:\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Calculating Z arrays for bucket 16\n  bucket 14: 10%\n  Entering block accumulator loop for bucket 16:\n  bucket 14: 20%\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 14: 30%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 14: 40%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 14: 60%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 14: 70%\n  bucket 15: 60%\n  bucket 14: 80%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 14: 90%\n  bucket 16: 70%\n  bucket 14: 100%\n  bucket 15: 80%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  bucket 16: 90%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nReturning block of 544 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 30\n  Entering block accumulator loop for bucket 18:\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 18: 10%\n  bucket 19: 20%\n  bucket 18: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 18: 30%\n  bucket 19: 50%\n  bucket 18: 40%\n  bucket 19: 60%\n  bucket 18: 50%\n  bucket 19: 70%\n  bucket 18: 60%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\n  bucket 18: 100%\nReturning block of 732 for bucket 19\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\nGetting block 21 of 30\n  Calculating Z arrays for bucket 20\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 20: 10%\n  bucket 21: 20%\n  bucket 20: 20%\n  bucket 21: 30%\n  bucket 20: 30%\n  bucket 21: 40%\n  bucket 20: 40%\n  bucket 21: 50%\n  bucket 20: 50%\n  bucket 21: 60%\n  bucket 20: 60%\n  bucket 21: 70%\n  bucket 20: 70%\n  bucket 21: 80%\n  bucket 20: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  bucket 20: 90%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 23: 20%\n  bucket 22: 60%\n  bucket 23: 30%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 22: 90%\n  bucket 23: 50%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nReturning block of 416 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 3: 80%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 1: 90%\n  bucket 4: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 6: 10%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 7: 10%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 7: 30%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 7: 40%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 7: 70%\n  bucket 5: 90%\n  bucket 6: 100%\n  bucket 7: 80%\n  bucket 5: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 7: 90%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 8 of 30\nReturning block of 777 for bucket 5\n  bucket 7: 100%\n  Reserving size (777) for bucket 8\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\nGetting block 11 of 30\n  bucket 9: 50%\n  Calculating Z arrays for bucket 10\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 9: 60%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  bucket 10: 10%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 100%\n  bucket 10: 30%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 11: 30%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 70%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 10%\n  bucket 14: 90%\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 100%\n  bucket 15: 20%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 13: 10%\n  bucket 15: 30%\nReturning block of 709 for bucket 14\n  bucket 13: 20%\n  bucket 15: 40%\n  bucket 13: 30%\n  bucket 15: 50%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 15: 60%\n  bucket 13: 60%\n  bucket 15: 70%\n  bucket 13: 70%\n  bucket 15: 80%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 15: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  bucket 17: 10%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  bucket 21: 60%\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 70%\n  bucket 22: 10%\n  bucket 21: 80%\n  bucket 22: 20%\n  bucket 21: 90%\n  bucket 22: 30%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  bucket 24: 100%\n  Calculating Z arrays for bucket 25\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:50:42", "plugin": "core", "name": "end_epoch", "raw_value": "1682182242.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:50:41", "plugin": "core", "name": "start_epoch", "raw_value": "1682182241.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_8lx9qr4g.sam v. /tmp/history_bam_converted_to_sam_d5n6gmdj.sam )\n--- local_file\n+++ history_data\n@@ -1,74 +1,75 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/118/tmp -O bam -o /galaxy/server/database/objects/c/e/f/dataset_cefa4516-f9f7-4a96-aecb-04d8d7ce97b6.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\tRG:Z:rg1\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHCHHGDGGGGHGGHHHHHHHHGHGHHHGGGGGHFHHHHFHHHFFHHHHHFGCGGEHFHHFGGHFHGGGGGGHHFEEEAFEFFDFHGHHHHGGGGGGGHH0DGGGGCGHCC-<CCBGHHHGEFFFFHH.C/<AEGHHEG.EEA0GE0:FB0CFGF:A?FFBF??FG0B;FGGGGFGE?BBF;BFBFFFF/F/B?DDF.;.;:ADD.BA/BBFFB:BFE/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\t1>>1AAFFFFFBGGFE1EEEEGGHGHHH2FGHHHFGFGHGCFGGGEFHGGEGGHHHHGHEFBFEGHHHGHHBEHHHHGHGFHHHGGGGHHEGGGGHHHGFHGHHHH1FHHG?G/AGF1GBFGEFFHF2FDD0FG<GDHBFDGFFCGH//B//?0GFFGFGGHHHFHFB.=1FDFB?FGH.C/.-:::CH0;CAB@-.;0CGFFFGG--9.A@GB>--99@=---AAABA-BF/B?A@F-9BBFF//BB/9/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tABBB>FFFFFFFGGGGGGGGGGHHHHHGHHHHGHHGGHHGGHGGHHHGHHHHFHHGHHAFGGGHHHHHGHHHHFHFHHHHHECGGGHGHHHEFHFHGGGGGGGGFGFFGFFEFGEGHHHGHHGGDGGGHGFGGGGGGGGE@GCGGHHHGHHHHHGHHHHFHHGEGFFEGCE.ECCECEHCGGFFE/AABFFG0CFE0BFFF9CFGG.F/BBBFFGFGGGFFFFFFBFEDAEFFFFFBFFFFFFF0;FEBF:\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tAAABABBBBBBFGGGGGGGGGGHGHHGHGHHHHHHHHHGHHHGGHDGHHHGGGGHHHHHHHHHHHHHHHFHGHHHHGGHGGHHHFHHHHHCGHFFHHHHHHHHHHHHHGHGEFGAEEEEHHGHHGHGHHHHHHHGHHHHHHGHGHFFBC/BA?BGGGFFFFFFFFFFFFFFFC-@DDFFFFFFFEFAFFFFFFBFBFFFFFFFFFFFFFFFFBFF->@FFFFFFFFFFBFBFAD--.99;A?////:.9A.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tBBCCBFFCCCCCGGGGGGGGGGGGGGHHHHHHGGGGGGHHFHGGGGGFGHGGGGGGHHHHHHHHHHFHHHHFHGFFHHGF?ECEFFFFFFHHHHHH?FHHHHHHHHHGFHHHHHHGGGFGHHHHFHHHHHHHHHHGGGFGFGCGGGGHHHHHHHHHHHGGFFHGHHHHHFFHFCGFHCCGHGHCGGHG?DGGGGGFBBFGFBFBBBGGGB0000;CD?DFFAFF9=--;...://;////////.------\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tAABABFFFFFFFF4GGGGEBGEFGHGGHGHGHHHGGHFBGFGGGGGHHEFHGEHFHFHEHHHHHGCGGGHFHHCFGHE@1EEEFFGB?EEEEHBGGGCHHGHHBEE@>EAHHFAEBDGGGCEFF?CEGFFHHHHHFHHHFHGHCGCAHHF<..C.D=0CD.GFHHHG.CAGHC:CHB0GGGFFB0:CFA.A-;9.;000CBBFFBFGA.9AA;A;EDDE.ABBFFFF9;BEFFF/BF//9/B//9:B//..\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBBFBBBBBFGGGGGGGGGGHFHHHHHHHHHHHHHHGHHHHGHFHHHGEEGGHHHGHHHHHHHHHHHHEHGHHGGGHGGHGHHHHHGHHHHGHHHHHHHHHHHHHHGHHHHHGEGCGHHHHHGHHHHHHHHHHHHHHGHFFGHGHHGGGDACDFFFFABFFFFFFFFFFD-BC?DA9.DFFBEA==B=?F.;ABBFBFEF-DAF/BFF9/FFFBB/9BFFFFFFF/BFBBFFFFFFF/9FEA?--B/;.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tAABBBBFFFFFFGGGFGGGGGGHHHGGHGGHHHHHHHHHHHGHHGGGGGHHHHHHHHHHHHHHHHHHGGCGDHHHHFGGHHHGGGGGFGGHGGGGHHGGGGHHHHHHGGGGGGHHGGGGDGGFGHGGFCDCHHHHGHHHHGHHFAGFGGEHFGEG.C<EGCECEFCFFHBGHE:GHHGFF0FFFB0CFGGGGAGFFF0;;FFGGGFFGFFCDD.DEFBEDD?9FFFFFFFFFFFFFFF/B./FB///;BF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tBBBBAFFFFFFFGGGGGGGGGGFGHHHHHGHHHHHHHHHHHHCGHHHHHHHGHHHHHHDGHHGGAECHHGHHHHHHHGHHHGHGFHHHHGGHGGHHFHHHHHHFHHHHHHHHH2GHHHHGHGHHFHHGGFGGGHHGHHHHHFHHHHEFHHHHEFGFFHGEHCFGDFDFFFFFCFFFFFFFFFFFFFAFBFFDFFFFFFFFADCF?9?EFBFB9EF-A.;BFFFFFFFBFFFFFFFFFFFFBFFFFFFFFFF\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tAA?AAFFFFFFFGGGGGFBFGGGGGGH5GHFEDHHGGGGCGFBGH?AEEHFFEEGHGHHHHGGG?0EHGHHGGGGGC?GEE/EE?GHHHGBHFHHHHHHGHHGHHHGGGCG/A@<FGGHHHHHHHFF/GFDGHHHHHHGFFFGHGGHABGHFHHHHHFHEGDGHGDDEEHHBEDDEGFGHGBFFBFFEGGGEFGFGFB000;F0F;FGGEGGEFFF;-.9//B///B9FFFFF/BFFB/:.BB//;FBFFF\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tCDDDBFFFFFFFGGGGGGGGGGHHHHHGGHHHGHHHGHHGGGGEHHGGHHHHHHHHHHHHHHGHHGHHHHHGGHHHHHFHHHHGCDCGHHHHHHHHEHHHGHGHHHGFHGGHGGHHHHHHHHFHHHFHHHGHHHHHHHHHFGGHHHHGGGEGAFHHGHHGGHHHHGHFBGFHGHGHGHGGHGGF@DAFEFBECAB=A.0BFFFEDF=A9.@D.-AAFFFA-:-..:.9/0:;0..-..0000::BFB09::\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tABBBBFFFFFFFGGGFGGGGGGHHHGHHGGHBGHGAGFFCAFGHGFFGHHGFHHHHHGGGGGHGHHHHHHHHE3BFFHHHGG0EDF@GHFFGGGHGGGGGGGGGGGGGHHGGEEFHGFHHDDG@DGGGHHGDGGGGGHGG?CF?HHGHHHGHGHHHFFHGGGHHHHGGCD.;0<C;CGGGGEFF/.;0;FFFBF/0;0CFGFFB..9B/;0CBFFBBFFFFBAC?DED9;B9AD;.FFFB/B/;FBA/B//\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBCFCCCCCFGGGGGGGGGGHHHHHHHGHHHHHHHHGHHHHGHDGHHHGGGGHHHHHHHHHHHHHHHGHHHHHGGGEGGHHHHFHHHHHHHHHHHHHHHHHHHHHHGHHGHHGGGGGHHHHHHHHHHHGHHHFHHHHHHGHGHGHGGGGCGGFGGFFFFFFFFFFFFFBFFFFFFFFFFFFFFAFFFFEAEFFFFFFFFFFF9BFFBFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFADAB-/BF.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\t>A33>FFFFFF@FFFGGGGFGGD4EGGGGGHHGFFGHFGGHHHFEFHECFHHHEHGAGBCCGCCEGGHGHEGFBFHFHHHHGGGHFHGHEGGGFEGEGG??@DBGHGGC-@FFGHFHFHB-??DA-DD@9:BEBG@B?E?A.ABBFBFA??F.FF/BFFB/B9B/9;BF9FF9FFFFFFFFFFFFFF?BB?;9EE;-;DDB9//;B-B@;ABFFEFFFF/-.9A.;//9/BF./B/..9.9:...//////\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH<1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\tRG:Z:rg1\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 3, "time_seconds": 137.36488318443298, "inputs": {"library|input_1": {"src": "hda", "id": "cc4fa18b618186f5"}, "library|input_2": {"src": "hda", "id": "4f524c1f71b02310"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "7bd8dba9aa3956da"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "save_mapping_stats": true}, "job": {"model_class": "Job", "id": "ebecb98537b7ee54", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:50:54.207496", "create_time": "2023-04-22T16:49:13.932717", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-d2lrh", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/c/d/a/dataset_cda75ac8-e759-4294-8320-7584b20899cc.dat' genome && ln -s -f '/galaxy/server/database/objects/c/d/a/dataset_cda75ac8-e759-4294-8320-7584b20899cc.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/a/3/7/dataset_a377c16b-1d9c-4649-8810-eb9141256cc1.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/7/a/d/dataset_7adc20cd-6de3-4a48-95f6-2509f54c3a1e.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                2> '/galaxy/server/database/objects/4/f/4/dataset_4f40f7d6-ce7b-4ffd-b5d1-f5338677267e.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/0/d/3/dataset_0d31170c-26b8-45bf-bfe7-bc6c8775c2af.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"true\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 153, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 151, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 152, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "cc4fa18b618186f5", "src": "hda", "uuid": "a377c16b-1d9c-4649-8810-eb9141256cc1"}, "input_2": {"id": "4f524c1f71b02310", "src": "hda", "uuid": "7adc20cd-6de3-4a48-95f6-2509f54c3a1e"}, "own_file": {"id": "7bd8dba9aa3956da", "src": "hda", "uuid": "cda75ac8-e759-4294-8320-7584b20899cc"}}, "outputs": {"output": {"id": "ababecd43a495f80", "src": "hda", "uuid": "0d31170c-26b8-45bf-bfe7-bc6c8775c2af"}, "mapping_stats": {"id": "80a3cbb9430faa38", "src": "hda", "uuid": "4f40f7d6-ce7b-4ffd-b5d1-f5338677267e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/d/a/dataset_cda75ac8-e759-4294-8320-7584b20899cc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 1: 70%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 1: 100%\n  bucket 4: 70%\n  bucket 2: 80%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  bucket 3: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\nGetting block 7 of 30\n  bucket 5: 20%\n  Reserving size (777) for bucket 7\n  bucket 6: 30%\n  Calculating Z arrays for bucket 7\n  bucket 5: 30%\n  bucket 6: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 7: 10%\n  bucket 6: 60%\n  bucket 5: 50%\n  bucket 7: 20%\n  bucket 6: 70%\n  bucket 5: 60%\n  bucket 6: 80%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 90%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 7: 60%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 11: 40%\n  bucket 10: 50%\n  bucket 11: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 11: 60%\n  bucket 10: 70%\n  bucket 9: 50%\n  bucket 11: 70%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 11: 80%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  bucket 11: 90%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 9: 90%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 13: 50%\n  bucket 14: 30%\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 15: 10%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 15: 20%\n  bucket 13: 100%\n  bucket 14: 60%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 40%\n  Sorting block time: 00:00:00\n  bucket 14: 90%\nReturning block of 598 for bucket 13\n  bucket 15: 50%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  bucket 17: 20%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  bucket 21: 10%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 40%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  bucket 23: 100%\n  Calculating Z arrays for bucket 24\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Entering block accumulator loop for bucket 25:\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  bucket 28: 90%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 1: 100%\n  bucket 2: 50%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 3: 100%\n  bucket 2: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  bucket 5: 10%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 7: 90%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  bucket 12: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  bucket 13: 30%\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 30\n  Entering block accumulator loop for bucket 20:\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 21: 60%\n  bucket 20: 70%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Entering block accumulator loop for bucket 24:\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 24: 70%\n  bucket 26: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 50%\n  bucket 29: 70%\n  bucket 28: 60%\n  bucket 29: 80%\n  bucket 28: 70%\n  bucket 29: 90%\n  bucket 28: 80%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_stderr": "Building a SMALL index\n", "stderr": "\nBuilding a SMALL index\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/d/a/dataset_cda75ac8-e759-4294-8320-7584b20899cc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 1: 70%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 1: 100%\n  bucket 4: 70%\n  bucket 2: 80%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  bucket 3: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\nGetting block 7 of 30\n  bucket 5: 20%\n  Reserving size (777) for bucket 7\n  bucket 6: 30%\n  Calculating Z arrays for bucket 7\n  bucket 5: 30%\n  bucket 6: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 7: 10%\n  bucket 6: 60%\n  bucket 5: 50%\n  bucket 7: 20%\n  bucket 6: 70%\n  bucket 5: 60%\n  bucket 6: 80%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 90%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 7: 60%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 11: 40%\n  bucket 10: 50%\n  bucket 11: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 11: 60%\n  bucket 10: 70%\n  bucket 9: 50%\n  bucket 11: 70%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 11: 80%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  bucket 11: 90%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 9: 90%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 13: 50%\n  bucket 14: 30%\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 15: 10%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 15: 20%\n  bucket 13: 100%\n  bucket 14: 60%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 40%\n  Sorting block time: 00:00:00\n  bucket 14: 90%\nReturning block of 598 for bucket 13\n  bucket 15: 50%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  bucket 17: 20%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  bucket 21: 10%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 40%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  bucket 23: 100%\n  Calculating Z arrays for bucket 24\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Entering block accumulator loop for bucket 25:\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  bucket 28: 90%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 1: 100%\n  bucket 2: 50%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 3: 100%\n  bucket 2: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  bucket 5: 10%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 7: 90%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  bucket 12: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  bucket 13: 30%\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 30\n  Entering block accumulator loop for bucket 20:\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 21: 60%\n  bucket 20: 70%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Entering block accumulator loop for bucket 24:\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 24: 70%\n  bucket 26: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 50%\n  bucket 29: 70%\n  bucket 28: 60%\n  bucket 29: 80%\n  bucket 28: 70%\n  bucket 29: 90%\n  bucket 28: 80%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:50:38", "plugin": "core", "name": "end_epoch", "raw_value": "1682182238.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:50:37", "plugin": "core", "name": "start_epoch", "raw_value": "1682182237.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_fi6u9y0_.sam v. /tmp/history_bam_converted_to_sam_frhqac5f.sam )\n--- local_file\n+++ history_data\n@@ -1,77 +1,78 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/119/tmp -O bam -o /galaxy/server/database/objects/0/d/3/dataset_0d31170c-26b8-45bf-bfe7-bc6c8775c2af.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHCHHGDGGGGHGGHHHHHHHHGHGHHHGGGGGHFHHHHFHHHFFHHHHHFGCGGEHFHHFGGHFHGGGGGGHHFEEEAFEFFDFHGHHHHGGGGGGGHH0DGGGGCGHCC-<CCBGHHHGEFFFFHH.C/<AEGHHEG.EEA0GE0:FB0CFGF:A?FFBF??FG0B;FGGGGFGE?BBF;BFBFFFF/F/B?DDF.;.;:ADD.BA/BBFFB:BFE/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\t1>>1AAFFFFFBGGFE1EEEEGGHGHHH2FGHHHFGFGHGCFGGGEFHGGEGGHHHHGHEFBFEGHHHGHHBEHHHHGHGFHHHGGGGHHEGGGGHHHGFHGHHHH1FHHG?G/AGF1GBFGEFFHF2FDD0FG<GDHBFDGFFCGH//B//?0GFFGFGGHHHFHFB.=1FDFB?FGH.C/.-:::CH0;CAB@-.;0CGFFFGG--9.A@GB>--99@=---AAABA-BF/B?A@F-9BBFF//BB/9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tABBB>FFFFFFFGGGGGGGGGGHHHHHGHHHHGHHGGHHGGHGGHHHGHHHHFHHGHHAFGGGHHHHHGHHHHFHFHHHHHECGGGHGHHHEFHFHGGGGGGGGFGFFGFFEFGEGHHHGHHGGDGGGHGFGGGGGGGGE@GCGGHHHGHHHHHGHHHHFHHGEGFFEGCE.ECCECEHCGGFFE/AABFFG0CFE0BFFF9CFGG.F/BBBFFGFGGGFFFFFFBFEDAEFFFFFBFFFFFFF0;FEBF:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tAAABABBBBBBFGGGGGGGGGGHGHHGHGHHHHHHHHHGHHHGGHDGHHHGGGGHHHHHHHHHHHHHHHFHGHHHHGGHGGHHHFHHHHHCGHFFHHHHHHHHHHHHHGHGEFGAEEEEHHGHHGHGHHHHHHHGHHHHHHGHGHFFBC/BA?BGGGFFFFFFFFFFFFFFFC-@DDFFFFFFFEFAFFFFFFBFBFFFFFFFFFFFFFFFFBFF->@FFFFFFFFFFBFBFAD--.99;A?////:.9A.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tBBCCBFFCCCCCGGGGGGGGGGGGGGHHHHHHGGGGGGHHFHGGGGGFGHGGGGGGHHHHHHHHHHFHHHHFHGFFHHGF?ECEFFFFFFHHHHHH?FHHHHHHHHHGFHHHHHHGGGFGHHHHFHHHHHHHHHHGGGFGFGCGGGGHHHHHHHHHHHGGFFHGHHHHHFFHFCGFHCCGHGHCGGHG?DGGGGGFBBFGFBFBBBGGGB0000;CD?DFFAFF9=--;...://;////////.------\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tAABABFFFFFFFF4GGGGEBGEFGHGGHGHGHHHGGHFBGFGGGGGHHEFHGEHFHFHEHHHHHGCGGGHFHHCFGHE@1EEEFFGB?EEEEHBGGGCHHGHHBEE@>EAHHFAEBDGGGCEFF?CEGFFHHHHHFHHHFHGHCGCAHHF<..C.D=0CD.GFHHHG.CAGHC:CHB0GGGFFB0:CFA.A-;9.;000CBBFFBFGA.9AA;A;EDDE.ABBFFFF9;BEFFF/BF//9/B//9:B//..\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBBFBBBBBFGGGGGGGGGGHFHHHHHHHHHHHHHHGHHHHGHFHHHGEEGGHHHGHHHHHHHHHHHHEHGHHGGGHGGHGHHHHHGHHHHGHHHHHHHHHHHHHHGHHHHHGEGCGHHHHHGHHHHHHHHHHHHHHGHFFGHGHHGGGDACDFFFFABFFFFFFFFFFD-BC?DA9.DFFBEA==B=?F.;ABBFBFEF-DAF/BFF9/FFFBB/9BFFFFFFF/BFBBFFFFFFF/9FEA?--B/;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tAABBBBFFFFFFGGGFGGGGGGHHHGGHGGHHHHHHHHHHHGHHGGGGGHHHHHHHHHHHHHHHHHHGGCGDHHHHFGGHHHGGGGGFGGHGGGGHHGGGGHHHHHHGGGGGGHHGGGGDGGFGHGGFCDCHHHHGHHHHGHHFAGFGGEHFGEG.C<EGCECEFCFFHBGHE:GHHGFF0FFFB0CFGGGGAGFFF0;;FFGGGFFGFFCDD.DEFBEDD?9FFFFFFFFFFFFFFF/B./FB///;BF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tBBBBAFFFFFFFGGGGGGGGGGFGHHHHHGHHHHHHHHHHHHCGHHHHHHHGHHHHHHDGHHGGAECHHGHHHHHHHGHHHGHGFHHHHGGHGGHHFHHHHHHFHHHHHHHHH2GHHHHGHGHHFHHGGFGGGHHGHHHHHFHHHHEFHHHHEFGFFHGEHCFGDFDFFFFFCFFFFFFFFFFFFFAFBFFDFFFFFFFFADCF?9?EFBFB9EF-A.;BFFFFFFFBFFFFFFFFFFFFBFFFFFFFFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tAA?AAFFFFFFFGGGGGFBFGGGGGGH5GHFEDHHGGGGCGFBGH?AEEHFFEEGHGHHHHGGG?0EHGHHGGGGGC?GEE/EE?GHHHGBHFHHHHHHGHHGHHHGGGCG/A@<FGGHHHHHHHFF/GFDGHHHHHHGFFFGHGGHABGHFHHHHHFHEGDGHGDDEEHHBEDDEGFGHGBFFBFFEGGGEFGFGFB000;F0F;FGGEGGEFFF;-.9//B///B9FFFFF/BFFB/:.BB//;FBFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tCDDDBFFFFFFFGGGGGGGGGGHHHHHGGHHHGHHHGHHGGGGEHHGGHHHHHHHHHHHHHHGHHGHHHHHGGHHHHHFHHHHGCDCGHHHHHHHHEHHHGHGHHHGFHGGHGGHHHHHHHHFHHHFHHHGHHHHHHHHHFGGHHHHGGGEGAFHHGHHGGHHHHGHFBGFHGHGHGHGGHGGF@DAFEFBECAB=A.0BFFFEDF=A9.@D.-AAFFFA-:-..:.9/0:;0..-..0000::BFB09::\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tABBBBFFFFFFFGGGFGGGGGGHHHGHHGGHBGHGAGFFCAFGHGFFGHHGFHHHHHGGGGGHGHHHHHHHHE3BFFHHHGG0EDF@GHFFGGGHGGGGGGGGGGGGGHHGGEEFHGFHHDDG@DGGGHHGDGGGGGHGG?CF?HHGHHHGHGHHHFFHGGGHHHHGGCD.;0<C;CGGGGEFF/.;0;FFFBF/0;0CFGFFB..9B/;0CBFFBBFFFFBAC?DED9;B9AD;.FFFB/B/;FBA/B//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBCFCCCCCFGGGGGGGGGGHHHHHHHGHHHHHHHHGHHHHGHDGHHHGGGGHHHHHHHHHHHHHHHGHHHHHGGGEGGHHHHFHHHHHHHHHHHHHHHHHHHHHHGHHGHHGGGGGHHHHHHHHHHHGHHHFHHHHHHGHGHGHGGGGCGGFGGFFFFFFFFFFFFFBFFFFFFFFFFFFFFAFFFFEAEFFFFFFFFFFF9BFFBFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFADAB-/BF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\t>A33>FFFFFF@FFFGGGGFGGD4EGGGGGHHGFFGHFGGHHHFEFHECFHHHEHGAGBCCGCCEGGHGHEGFBFHFHHHHGGGHFHGHEGGGFEGEGG??@DBGHGGC-@FFGHFHFHB-??DA-DD@9:BEBG@B?E?A.ABBFBFA??F.FF/BFFB/B9B/9;BF9FF9FFFFFFFFFFFFFF?BB?;9EE;-;DDB9//;B-B@;ABFFEFFFF/-.9A.;//9/BF./B/..9.9:...//////\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH<1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 4, "time_seconds": 117.5562973022461, "inputs": {"library|input_1": {"src": "hda", "id": "97e6f16b7299e450"}, "library|unaligned_file": false, "library|type": "paired_interleaved", "reference_genome|own_file": {"src": "hda", "id": "76953ca2a8b5a67e"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "db781ef2215b4046", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:52:28.150928", "create_time": "2023-04-22T16:50:50.203881", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-vzff2", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/1/1/c/dataset_11cd85ef-854f-4d34-8803-703dff00d21e.dat' genome && ln -s -f '/galaxy/server/database/objects/1/1/c/dataset_11cd85ef-854f-4d34-8803-703dff00d21e.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/8/c/9/dataset_8c92e97c-8afc-4c2c-a7a8-70ad6eb02b66.dat' input_il.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   --interleaved 'input_il.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/b/4/6/dataset_b46bd612-b5f8-4878-8ec1-bad157861076.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 161, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 3, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 160, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_interleaved\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "97e6f16b7299e450", "src": "hda", "uuid": "8c92e97c-8afc-4c2c-a7a8-70ad6eb02b66"}, "own_file": {"id": "76953ca2a8b5a67e", "src": "hda", "uuid": "11cd85ef-854f-4d34-8803-703dff00d21e"}}, "outputs": {"output": {"id": "a74221a2a552a1bf", "src": "hda", "uuid": "b46bd612-b5f8-4878-8ec1-bad157861076"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/1/c/dataset_11cd85ef-854f-4d34-8803-703dff00d21e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  bucket 1: 10%\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 1: 100%\n  bucket 4: 50%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 50%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 60%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 70%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 80%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 5: 100%\n  bucket 6: 60%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 12: 40%\n  bucket 13: 40%\n  bucket 12: 50%\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\nGetting block 15 of 30\n  bucket 14: 30%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 40%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 50%\n  bucket 15: 10%\n  bucket 14: 60%\n  bucket 15: 20%\n  bucket 14: 70%\n  bucket 15: 30%\n  bucket 14: 80%\n  bucket 15: 40%\n  bucket 14: 90%\n  bucket 15: 50%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  bucket 16: 10%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 16: 70%\n  bucket 17: 80%\n  bucket 16: 80%\n  bucket 17: 90%\n  bucket 16: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 30\n  bucket 18: 10%\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 19: 20%\n  bucket 18: 40%\n  bucket 19: 30%\n  bucket 18: 50%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 18: 90%\n  bucket 19: 80%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 24: 50%\n  bucket 25: 70%\n  bucket 24: 60%\n  bucket 25: 80%\n  bucket 24: 70%\n  bucket 25: 90%\n  bucket 24: 80%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  bucket 26: 20%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 30%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 26: 90%\n  bucket 27: 60%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 30\n  Entering block accumulator loop for bucket 28:\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 4: 40%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 4: 50%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 4: 90%\n  bucket 2: 70%\n  bucket 3: 80%\n  bucket 4: 100%\n  bucket 1: 90%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Sorting block time: 00:00:00\nGetting block 7 of 30\nReturning block of 777 for bucket 5\n  Reserving size (777) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 6: 60%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 6: 70%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 30\n  bucket 11: 40%\n  Reserving size (777) for bucket 12\n  bucket 11: 50%\n  Calculating Z arrays for bucket 12\n  bucket 11: 60%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 70%\n  bucket 12: 10%\n  bucket 11: 80%\n  bucket 12: 20%\n  bucket 11: 90%\n  bucket 12: 30%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  Sorting block time: 00:00:00\n  bucket 12: 80%\nReturning block of 424 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 14:\nReturning block of 596 for bucket 13\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 15: 10%\n  bucket 16: 30%\n  bucket 15: 20%\n  bucket 16: 40%\n  bucket 15: 30%\n  bucket 16: 50%\n  bucket 15: 40%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 15: 50%\n  bucket 16: 80%\n  bucket 15: 60%\n  bucket 16: 90%\n  bucket 15: 70%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 50%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 18: 10%\n  bucket 17: 80%\n  bucket 18: 20%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 23: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 40%\n  bucket 24: 60%\n  bucket 23: 50%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 23: 60%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\nGetting block 30 of 30\n  bucket 29: 50%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 60%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 29: 80%\n  bucket 30: 40%\n  bucket 29: 90%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/1/c/dataset_11cd85ef-854f-4d34-8803-703dff00d21e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  bucket 1: 10%\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 1: 100%\n  bucket 4: 50%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 50%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 60%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 70%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 80%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 5: 100%\n  bucket 6: 60%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 12: 40%\n  bucket 13: 40%\n  bucket 12: 50%\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\nGetting block 15 of 30\n  bucket 14: 30%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 40%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 50%\n  bucket 15: 10%\n  bucket 14: 60%\n  bucket 15: 20%\n  bucket 14: 70%\n  bucket 15: 30%\n  bucket 14: 80%\n  bucket 15: 40%\n  bucket 14: 90%\n  bucket 15: 50%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  bucket 16: 10%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 16: 70%\n  bucket 17: 80%\n  bucket 16: 80%\n  bucket 17: 90%\n  bucket 16: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 30\n  bucket 18: 10%\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 19: 20%\n  bucket 18: 40%\n  bucket 19: 30%\n  bucket 18: 50%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 18: 90%\n  bucket 19: 80%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 24: 50%\n  bucket 25: 70%\n  bucket 24: 60%\n  bucket 25: 80%\n  bucket 24: 70%\n  bucket 25: 90%\n  bucket 24: 80%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  bucket 26: 20%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 30%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 26: 90%\n  bucket 27: 60%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 30\n  Entering block accumulator loop for bucket 28:\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 4: 40%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 4: 50%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 4: 90%\n  bucket 2: 70%\n  bucket 3: 80%\n  bucket 4: 100%\n  bucket 1: 90%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Sorting block time: 00:00:00\nGetting block 7 of 30\nReturning block of 777 for bucket 5\n  Reserving size (777) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 6: 60%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 6: 70%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 30\n  bucket 11: 40%\n  Reserving size (777) for bucket 12\n  bucket 11: 50%\n  Calculating Z arrays for bucket 12\n  bucket 11: 60%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 70%\n  bucket 12: 10%\n  bucket 11: 80%\n  bucket 12: 20%\n  bucket 11: 90%\n  bucket 12: 30%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  Sorting block time: 00:00:00\n  bucket 12: 80%\nReturning block of 424 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 14:\nReturning block of 596 for bucket 13\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 15: 10%\n  bucket 16: 30%\n  bucket 15: 20%\n  bucket 16: 40%\n  bucket 15: 30%\n  bucket 16: 50%\n  bucket 15: 40%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 15: 50%\n  bucket 16: 80%\n  bucket 15: 60%\n  bucket 16: 90%\n  bucket 15: 70%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 50%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 18: 10%\n  bucket 17: 80%\n  bucket 18: 20%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 23: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 40%\n  bucket 24: 60%\n  bucket 23: 50%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 23: 60%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\nGetting block 30 of 30\n  bucket 29: 50%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 60%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 29: 80%\n  bucket 30: 40%\n  bucket 29: 90%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:52:17", "plugin": "core", "name": "end_epoch", "raw_value": "1682182337.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:52:17", "plugin": "core", "name": "start_epoch", "raw_value": "1682182337.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_szx_28lh.sam v. /tmp/history_bam_converted_to_sam_vinmoj8z.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --interleaved input_il.fastq --rg-id rg1 --rg PL:CAPILLARY\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --rg-id rg1 --rg PL:CAPILLARY --interleaved input_il.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/122/tmp -O bam -o /galaxy/server/database/objects/b/4/6/dataset_b46bd612-b5f8-4878-8ec1-bad157861076.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t153\tchrM\t1\t3\t4M23I224M\t=\t1\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB099BFFFBFBBFEF?EFFFB090FFFFFFFFFFD;;.GFFGFGFA0FGFFEFEGGGFBCE;BGHHFFGHGEHFHHHHGFE@ECCDCGGGGGEHFFFGGGGGBHHGFGGGCGHHGGGGGGHGGGGGGHHHDGCFFBHGGGGGHHHHHFHFHGGGHHHHGHGGGGGHHHGGHGHHHHHHHGGHGGHHGGHHHHHHHEHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFCFFCCCCB\tAS:i:-99\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:23\tNM:i:29\tMD:Z:0G0A0T0C11A56A155\tYT:Z:UP\tRG:Z:rg1\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 5, "time_seconds": 159.613299369812, "inputs": {"library|input_1": {"src": "hda", "id": "94386a55c25f404c"}, "library|input_2": {"src": "hda", "id": "b3138ff2b8803a80"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "bffbe2a74d873d72"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "50b7666864fb3daf", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:53:30.112914", "create_time": "2023-04-22T16:51:17.992199", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-nst4w", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/0/b/4/dataset_0b46f1e1-d827-4bdb-843e-552e3c2c287d.dat' genome && ln -s -f '/galaxy/server/database/objects/0/b/4/dataset_0b46f1e1-d827-4bdb-843e-552e3c2c287d.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/3/9/e/dataset_39ee5328-fd87-474d-b1dd-6c88a0266740.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/6/c/5/dataset_6c56f19d-e694-41d7-9cc5-c52e1c585645.dat' input_r.fastq.gz &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.gz' -2 'input_r.fastq.gz'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/d/c/e/dataset_dce26133-7dc9-4799-9944-e5edbf7ca88e.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 171, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 163, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 164, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "94386a55c25f404c", "src": "hda", "uuid": "39ee5328-fd87-474d-b1dd-6c88a0266740"}, "input_2": {"id": "b3138ff2b8803a80", "src": "hda", "uuid": "6c56f19d-e694-41d7-9cc5-c52e1c585645"}, "own_file": {"id": "bffbe2a74d873d72", "src": "hda", "uuid": "0b46f1e1-d827-4bdb-843e-552e3c2c287d"}}, "outputs": {"output": {"id": "d3585dcc1069e172", "src": "hda", "uuid": "dce26133-7dc9-4799-9944-e5edbf7ca88e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/b/4/dataset_0b46f1e1-d827-4bdb-843e-552e3c2c287d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  bucket 16: 10%\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  bucket 16: 80%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 30\n  bucket 23: 20%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 4: 40%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 2: 70%\n  bucket 1: 100%\n  bucket 4: 90%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 2: 80%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  bucket 2: 90%\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  bucket 5: 10%\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 7: 60%\n  bucket 6: 80%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\nGetting block 11 of 30\n  bucket 10: 10%\n  Reserving size (777) for bucket 11\n  bucket 9: 60%\n  Calculating Z arrays for bucket 11\n  bucket 10: 20%\n  bucket 9: 70%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 50%\n  bucket 11: 30%\n  bucket 10: 60%\n  bucket 11: 40%\n  bucket 10: 70%\n  bucket 11: 50%\n  bucket 10: 80%\n  bucket 11: 60%\n  bucket 10: 90%\n  bucket 11: 70%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  bucket 11: 80%\nReturning block of 536 for bucket 9\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\nGetting block 22 of 30\n  bucket 21: 50%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 60%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 23: 90%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  bucket 25: 10%\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 25: 100%\n  bucket 26: 80%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Entering block accumulator loop for bucket 27:\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 60%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 70%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/b/4/dataset_0b46f1e1-d827-4bdb-843e-552e3c2c287d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  bucket 16: 10%\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  bucket 16: 80%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 30\n  bucket 23: 20%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 4: 40%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 2: 70%\n  bucket 1: 100%\n  bucket 4: 90%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 2: 80%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  bucket 2: 90%\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  bucket 5: 10%\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 7: 60%\n  bucket 6: 80%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\nGetting block 11 of 30\n  bucket 10: 10%\n  Reserving size (777) for bucket 11\n  bucket 9: 60%\n  Calculating Z arrays for bucket 11\n  bucket 10: 20%\n  bucket 9: 70%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 50%\n  bucket 11: 30%\n  bucket 10: 60%\n  bucket 11: 40%\n  bucket 10: 70%\n  bucket 11: 50%\n  bucket 10: 80%\n  bucket 11: 60%\n  bucket 10: 90%\n  bucket 11: 70%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  bucket 11: 80%\nReturning block of 536 for bucket 9\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\nGetting block 22 of 30\n  bucket 21: 50%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 60%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 23: 90%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  bucket 25: 10%\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 25: 100%\n  bucket 26: 80%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Entering block accumulator loop for bucket 27:\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 60%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 70%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:53:15", "plugin": "core", "name": "end_epoch", "raw_value": "1682182395.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:53:14", "plugin": "core", "name": "start_epoch", "raw_value": "1682182394.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_vc_mnk8n.sam v. /tmp/history_bam_converted_to_sam_vvqh8dd9.sam )\n--- local_file\n+++ history_data\n@@ -1,30 +1,31 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq.gz -2 input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/132/tmp -O bam -o /galaxy/server/database/objects/d/c/e/dataset_dce26133-7dc9-4799-9944-e5edbf7ca88e.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHCHHGDGGGGHGGHHHHHHHHGHGHHHGGGGGHFHHHHFHHHFFHHHHHFGCGGEHFHHFGGHFHGGGGGGHHFEEEAFEFFDFHGHHHHGGGGGGGHH0DGGGGCGHCC-<CCBGHHHGEFFFFHH.C/<AEGHHEG.EEA0GE0:FB0CFGF:A?FFBF??FG0B;FGGGGFGE?BBF;BFBFFFF/F/B?DDF.;.;:ADD.BA/BBFFB:BFE/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\t1>>1AAFFFFFBGGFE1EEEEGGHGHHH2FGHHHFGFGHGCFGGGEFHGGEGGHHHHGHEFBFEGHHHGHHBEHHHHGHGFHHHGGGGHHEGGGGHHHGFHGHHHH1FHHG?G/AGF1GBFGEFFHF2FDD0FG<GDHBFDGFFCGH//B//?0GFFGFGGHHHFHFB.=1FDFB?FGH.C/.-:::CH0;CAB@-.;0CGFFFGG--9.A@GB>--99@=---AAABA-BF/B?A@F-9BBFF//BB/9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tABBB>FFFFFFFGGGGGGGGGGHHHHHGHHHHGHHGGHHGGHGGHHHGHHHHFHHGHHAFGGGHHHHHGHHHHFHFHHHHHECGGGHGHHHEFHFHGGGGGGGGFGFFGFFEFGEGHHHGHHGGDGGGHGFGGGGGGGGE@GCGGHHHGHHHHHGHHHHFHHGEGFFEGCE.ECCECEHCGGFFE/AABFFG0CFE0BFFF9CFGG.F/BBBFFGFGGGFFFFFFBFEDAEFFFFFBFFFFFFF0;FEBF:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tAAABABBBBBBFGGGGGGGGGGHGHHGHGHHHHHHHHHGHHHGGHDGHHHGGGGHHHHHHHHHHHHHHHFHGHHHHGGHGGHHHFHHHHHCGHFFHHHHHHHHHHHHHGHGEFGAEEEEHHGHHGHGHHHHHHHGHHHHHHGHGHFFBC/BA?BGGGFFFFFFFFFFFFFFFC-@DDFFFFFFFEFAFFFFFFBFBFFFFFFFFFFFFFFFFBFF->@FFFFFFFFFFBFBFAD--.99;A?////:.9A.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tBBCCBFFCCCCCGGGGGGGGGGGGGGHHHHHHGGGGGGHHFHGGGGGFGHGGGGGGHHHHHHHHHHFHHHHFHGFFHHGF?ECEFFFFFFHHHHHH?FHHHHHHHHHGFHHHHHHGGGFGHHHHFHHHHHHHHHHGGGFGFGCGGGGHHHHHHHHHHHGGFFHGHHHHHFFHFCGFHCCGHGHCGGHG?DGGGGGFBBFGFBFBBBGGGB0000;CD?DFFAFF9=--;...://;////////.------\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tAABABFFFFFFFF4GGGGEBGEFGHGGHGHGHHHGGHFBGFGGGGGHHEFHGEHFHFHEHHHHHGCGGGHFHHCFGHE@1EEEFFGB?EEEEHBGGGCHHGHHBEE@>EAHHFAEBDGGGCEFF?CEGFFHHHHHFHHHFHGHCGCAHHF<..C.D=0CD.GFHHHG.CAGHC:CHB0GGGFFB0:CFA.A-;9.;000CBBFFBFGA.9AA;A;EDDE.ABBFFFF9;BEFFF/BF//9/B//9:B//..\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBBFBBBBBFGGGGGGGGGGHFHHHHHHHHHHHHHHGHHHHGHFHHHGEEGGHHHGHHHHHHHHHHHHEHGHHGGGHGGHGHHHHHGHHHHGHHHHHHHHHHHHHHGHHHHHGEGCGHHHHHGHHHHHHHHHHHHHHGHFFGHGHHGGGDACDFFFFABFFFFFFFFFFD-BC?DA9.DFFBEA==B=?F.;ABBFBFEF-DAF/BFF9/FFFBB/9BFFFFFFF/BFBBFFFFFFF/9FEA?--B/;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tAABBBBFFFFFFGGGFGGGGGGHHHGGHGGHHHHHHHHHHHGHHGGGGGHHHHHHHHHHHHHHHHHHGGCGDHHHHFGGHHHGGGGGFGGHGGGGHHGGGGHHHHHHGGGGGGHHGGGGDGGFGHGGFCDCHHHHGHHHHGHHFAGFGGEHFGEG.C<EGCECEFCFFHBGHE:GHHGFF0FFFB0CFGGGGAGFFF0;;FFGGGFFGFFCDD.DEFBEDD?9FFFFFFFFFFFFFFF/B./FB///;BF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tBBBBAFFFFFFFGGGGGGGGGGFGHHHHHGHHHHHHHHHHHHCGHHHHHHHGHHHHHHDGHHGGAECHHGHHHHHHHGHHHGHGFHHHHGGHGGHHFHHHHHHFHHHHHHHHH2GHHHHGHGHHFHHGGFGGGHHGHHHHHFHHHHEFHHHHEFGFFHGEHCFGDFDFFFFFCFFFFFFFFFFFFFAFBFFDFFFFFFFFADCF?9?EFBFB9EF-A.;BFFFFFFFBFFFFFFFFFFFFBFFFFFFFFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tAA?AAFFFFFFFGGGGGFBFGGGGGGH5GHFEDHHGGGGCGFBGH?AEEHFFEEGHGHHHHGGG?0EHGHHGGGGGC?GEE/EE?GHHHGBHFHHHHHHGHHGHHHGGGCG/A@<FGGHHHHHHHFF/GFDGHHHHHHGFFFGHGGHABGHFHHHHHFHEGDGHGDDEEHHBEDDEGFGHGBFFBFFEGGGEFGFGFB000;F0F;FGGEGGEFFF;-.9//B///B9FFFFF/BFFB/:.BB//;FBFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tCDDDBFFFFFFFGGGGGGGGGGHHHHHGGHHHGHHHGHHGGGGEHHGGHHHHHHHHHHHHHHGHHGHHHHHGGHHHHHFHHHHGCDCGHHHHHHHHEHHHGHGHHHGFHGGHGGHHHHHHHHFHHHFHHHGHHHHHHHHHFGGHHHHGGGEGAFHHGHHGGHHHHGHFBGFHGHGHGHGGHGGF@DAFEFBECAB=A.0BFFFEDF=A9.@D.-AAFFFA-:-..:.9/0:;0..-..0000::BFB09::\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tABBBBFFFFFFFGGGFGGGGGGHHHGHHGGHBGHGAGFFCAFGHGFFGHHGFHHHHHGGGGGHGHHHHHHHHE3BFFHHHGG0EDF@GHFFGGGHGGGGGGGGGGGGGHHGGEEFHGFHHDDG@DGGGHHGDGGGGGHGG?CF?HHGHHHGHGHHHFFHGGGHHHHGGCD.;0<C;CGGGGEFF/.;0;FFFBF/0;0CFGFFB..9B/;0CBFFBBFFFFBAC?DED9;B9AD;.FFFB/B/;FBA/B//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBCFCCCCCFGGGGGGGGGGHHHHHHHGHHHHHHHHGHHHHGHDGHHHGGGGHHHHHHHHHHHHHHHGHHHHHGGGEGGHHHHFHHHHHHHHHHHHHHHHHHHHHHGHHGHHGGGGGHHHHHHHHHHHGHHHFHHHHHHGHGHGHGGGGCGGFGGFFFFFFFFFFFFFBFFFFFFFFFFFFFFAFFFFEAEFFFFFFFFFFF9BFFBFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFADAB-/BF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\t>A33>FFFFFF@FFFGGGGFGGD4EGGGGGHHGFFGHFGGHHHFEFHECFHHHEHGAGBCCGCCEGGHGHEGFBFHFHHHHGGGHFHGHEGGGFEGEGG??@DBGHGGC-@FFGHFHFHB-??DA-DD@9:BEBG@B?E?A.ABBFBFA??F.FF/BFFB/B9B/9;BF9FF9FFFFFFFFFFFFFF?BB?;9EE;-;DDB9//;B-B@;ABFFEFFFF/-.9A.;//9/BF./B/..9.9:...//////\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH<1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 6, "time_seconds": 154.29545998573303, "inputs": {"library|input_1": {"src": "hda", "id": "26754e2cdad7a395"}, "library|input_2": {"src": "hda", "id": "33a740abf47d2462"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "bffbe2a74d873d72"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "e99008cad93e2b16", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:53:29.027968", "create_time": "2023-04-22T16:51:39.346067", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-r869l", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/0/b/4/dataset_0b46f1e1-d827-4bdb-843e-552e3c2c287d.dat' genome && ln -s -f '/galaxy/server/database/objects/0/b/4/dataset_0b46f1e1-d827-4bdb-843e-552e3c2c287d.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/d/8/1/dataset_d814e6c9-d7c4-47c4-b06a-13edf286eb78.dat' input_f.fastq.bz2 &&  ln -f -s '/galaxy/server/database/objects/d/1/e/dataset_d1eb76f0-38a8-4208-8c57-129f7f32bcaa.dat' input_r.fastq.bz2 &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.bz2' -2 'input_r.fastq.bz2'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/6/1/5/dataset_6153e7ef-2b36-492d-8a6e-99ddc7010ae3.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 171, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 166, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 167, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "26754e2cdad7a395", "src": "hda", "uuid": "d814e6c9-d7c4-47c4-b06a-13edf286eb78"}, "input_2": {"id": "33a740abf47d2462", "src": "hda", "uuid": "d1eb76f0-38a8-4208-8c57-129f7f32bcaa"}, "own_file": {"id": "bffbe2a74d873d72", "src": "hda", "uuid": "0b46f1e1-d827-4bdb-843e-552e3c2c287d"}}, "outputs": {"output": {"id": "327d10544d927c52", "src": "hda", "uuid": "6153e7ef-2b36-492d-8a6e-99ddc7010ae3"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/b/4/dataset_0b46f1e1-d827-4bdb-843e-552e3c2c287d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 2: 50%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 1: 60%\n  bucket 4: 60%\n  bucket 2: 60%\n  bucket 3: 80%\n  bucket 1: 70%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 1: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  bucket 5: 10%\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  bucket 9: 80%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\nGetting block 16 of 30\n  bucket 15: 80%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 90%\n  bucket 16: 10%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\nGetting block 19 of 30\n  Calculating Z arrays for bucket 18\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 18: 20%\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 19: 30%\n  bucket 18: 40%\n  bucket 19: 40%\n  bucket 18: 50%\n  bucket 19: 50%\n  bucket 18: 60%\n  bucket 19: 60%\n  bucket 18: 70%\n  bucket 19: 70%\n  bucket 18: 80%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 21\nReturning block of 269 for bucket 20\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 23: 30%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 23: 40%\n  bucket 22: 80%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 30\n  bucket 24: 30%\n  Reserving size (777) for bucket 25\n  bucket 24: 40%\n  Calculating Z arrays for bucket 25\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  bucket 24: 80%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 24: 90%\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  bucket 25: 10%\n  Calculating Z arrays for bucket 27\n  bucket 26: 30%\n  Entering block accumulator loop for bucket 27:\n  bucket 25: 20%\n  bucket 26: 40%\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 26: 50%\n  bucket 25: 30%\n  bucket 27: 10%\n  bucket 25: 40%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 25: 50%\n  bucket 26: 70%\n  bucket 27: 30%\n  bucket 26: 80%\n  bucket 25: 60%\n  bucket 27: 40%\n  bucket 26: 90%\n  bucket 27: 50%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 25: 70%\n  bucket 27: 60%\nReturning block of 644 for bucket 26\n  bucket 25: 80%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 25: 90%\n  bucket 27: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 30%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 20%\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 40%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 2: 80%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 2: 90%\n  bucket 1: 60%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 1: 70%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 1: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 1: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 1: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  bucket 5: 20%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 5: 50%\n  bucket 7: 20%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  bucket 7: 60%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 10%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 12: 40%\n  bucket 11: 90%\n  bucket 12: 50%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 15: 10%\n  bucket 14: 30%\n  bucket 15: 20%\n  bucket 14: 40%\n  bucket 15: 30%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 14: 60%\n  bucket 15: 50%\n  bucket 14: 70%\n  bucket 15: 60%\n  bucket 14: 80%\n  bucket 15: 70%\n  bucket 14: 90%\n  bucket 15: 80%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 20%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  bucket 17: 10%\n  bucket 16: 40%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 16: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  bucket 18: 70%\n  Calculating Z arrays for bucket 19\n  bucket 18: 80%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 30\n  Entering block accumulator loop for bucket 20:\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 21: 70%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 30\n  Entering block accumulator loop for bucket 22:\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 23: 30%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\nGetting block 25 of 30\n  Calculating Z arrays for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 30\n  bucket 26: 10%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 50%\n  bucket 26: 90%\n  bucket 27: 60%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\nGetting block 28 of 30\n  bucket 27: 90%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 100%\n  Entering block accumulator loop for bucket 28:\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 10%\n  bucket 28: 20%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/b/4/dataset_0b46f1e1-d827-4bdb-843e-552e3c2c287d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 2: 50%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 1: 60%\n  bucket 4: 60%\n  bucket 2: 60%\n  bucket 3: 80%\n  bucket 1: 70%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 1: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  bucket 5: 10%\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  bucket 9: 80%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\nGetting block 16 of 30\n  bucket 15: 80%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 90%\n  bucket 16: 10%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\nGetting block 19 of 30\n  Calculating Z arrays for bucket 18\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 18: 20%\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 19: 30%\n  bucket 18: 40%\n  bucket 19: 40%\n  bucket 18: 50%\n  bucket 19: 50%\n  bucket 18: 60%\n  bucket 19: 60%\n  bucket 18: 70%\n  bucket 19: 70%\n  bucket 18: 80%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 21\nReturning block of 269 for bucket 20\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 23: 30%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 23: 40%\n  bucket 22: 80%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 30\n  bucket 24: 30%\n  Reserving size (777) for bucket 25\n  bucket 24: 40%\n  Calculating Z arrays for bucket 25\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  bucket 24: 80%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 24: 90%\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  bucket 25: 10%\n  Calculating Z arrays for bucket 27\n  bucket 26: 30%\n  Entering block accumulator loop for bucket 27:\n  bucket 25: 20%\n  bucket 26: 40%\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 26: 50%\n  bucket 25: 30%\n  bucket 27: 10%\n  bucket 25: 40%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 25: 50%\n  bucket 26: 70%\n  bucket 27: 30%\n  bucket 26: 80%\n  bucket 25: 60%\n  bucket 27: 40%\n  bucket 26: 90%\n  bucket 27: 50%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 25: 70%\n  bucket 27: 60%\nReturning block of 644 for bucket 26\n  bucket 25: 80%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 25: 90%\n  bucket 27: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 30%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 20%\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 40%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 2: 80%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 2: 90%\n  bucket 1: 60%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 1: 70%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 1: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 1: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 1: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  bucket 5: 20%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 5: 50%\n  bucket 7: 20%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  bucket 7: 60%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 10%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 12: 40%\n  bucket 11: 90%\n  bucket 12: 50%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 15: 10%\n  bucket 14: 30%\n  bucket 15: 20%\n  bucket 14: 40%\n  bucket 15: 30%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 14: 60%\n  bucket 15: 50%\n  bucket 14: 70%\n  bucket 15: 60%\n  bucket 14: 80%\n  bucket 15: 70%\n  bucket 14: 90%\n  bucket 15: 80%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 20%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  bucket 17: 10%\n  bucket 16: 40%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 16: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  bucket 18: 70%\n  Calculating Z arrays for bucket 19\n  bucket 18: 80%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 30\n  Entering block accumulator loop for bucket 20:\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 21: 70%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 30\n  Entering block accumulator loop for bucket 22:\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 23: 30%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\nGetting block 25 of 30\n  Calculating Z arrays for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 30\n  bucket 26: 10%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 50%\n  bucket 26: 90%\n  bucket 27: 60%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\nGetting block 28 of 30\n  bucket 27: 90%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 100%\n  Entering block accumulator loop for bucket 28:\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 10%\n  bucket 28: 20%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:53:12", "plugin": "core", "name": "end_epoch", "raw_value": "1682182392.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:53:11", "plugin": "core", "name": "start_epoch", "raw_value": "1682182391.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_snu3kt15.sam v. /tmp/history_bam_converted_to_sam_q_krqy0m.sam )\n--- local_file\n+++ history_data\n@@ -1,77 +1,78 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 /tmp/gxy-r869l-nh77t_49mate1 -2 /tmp/gxy-r869l-nh77t_49mate2\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/133/tmp -O bam -o /galaxy/server/database/objects/6/1/5/dataset_6153e7ef-2b36-492d-8a6e-99ddc7010ae3.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHCHHGDGGGGHGGHHHHHHHHGHGHHHGGGGGHFHHHHFHHHFFHHHHHFGCGGEHFHHFGGHFHGGGGGGHHFEEEAFEFFDFHGHHHHGGGGGGGHH0DGGGGCGHCC-<CCBGHHHGEFFFFHH.C/<AEGHHEG.EEA0GE0:FB0CFGF:A?FFBF??FG0B;FGGGGFGE?BBF;BFBFFFF/F/B?DDF.;.;:ADD.BA/BBFFB:BFE/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\t1>>1AAFFFFFBGGFE1EEEEGGHGHHH2FGHHHFGFGHGCFGGGEFHGGEGGHHHHGHEFBFEGHHHGHHBEHHHHGHGFHHHGGGGHHEGGGGHHHGFHGHHHH1FHHG?G/AGF1GBFGEFFHF2FDD0FG<GDHBFDGFFCGH//B//?0GFFGFGGHHHFHFB.=1FDFB?FGH.C/.-:::CH0;CAB@-.;0CGFFFGG--9.A@GB>--99@=---AAABA-BF/B?A@F-9BBFF//BB/9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tABBB>FFFFFFFGGGGGGGGGGHHHHHGHHHHGHHGGHHGGHGGHHHGHHHHFHHGHHAFGGGHHHHHGHHHHFHFHHHHHECGGGHGHHHEFHFHGGGGGGGGFGFFGFFEFGEGHHHGHHGGDGGGHGFGGGGGGGGE@GCGGHHHGHHHHHGHHHHFHHGEGFFEGCE.ECCECEHCGGFFE/AABFFG0CFE0BFFF9CFGG.F/BBBFFGFGGGFFFFFFBFEDAEFFFFFBFFFFFFF0;FEBF:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tAAABABBBBBBFGGGGGGGGGGHGHHGHGHHHHHHHHHGHHHGGHDGHHHGGGGHHHHHHHHHHHHHHHFHGHHHHGGHGGHHHFHHHHHCGHFFHHHHHHHHHHHHHGHGEFGAEEEEHHGHHGHGHHHHHHHGHHHHHHGHGHFFBC/BA?BGGGFFFFFFFFFFFFFFFC-@DDFFFFFFFEFAFFFFFFBFBFFFFFFFFFFFFFFFFBFF->@FFFFFFFFFFBFBFAD--.99;A?////:.9A.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tBBCCBFFCCCCCGGGGGGGGGGGGGGHHHHHHGGGGGGHHFHGGGGGFGHGGGGGGHHHHHHHHHHFHHHHFHGFFHHGF?ECEFFFFFFHHHHHH?FHHHHHHHHHGFHHHHHHGGGFGHHHHFHHHHHHHHHHGGGFGFGCGGGGHHHHHHHHHHHGGFFHGHHHHHFFHFCGFHCCGHGHCGGHG?DGGGGGFBBFGFBFBBBGGGB0000;CD?DFFAFF9=--;...://;////////.------\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tAABABFFFFFFFF4GGGGEBGEFGHGGHGHGHHHGGHFBGFGGGGGHHEFHGEHFHFHEHHHHHGCGGGHFHHCFGHE@1EEEFFGB?EEEEHBGGGCHHGHHBEE@>EAHHFAEBDGGGCEFF?CEGFFHHHHHFHHHFHGHCGCAHHF<..C.D=0CD.GFHHHG.CAGHC:CHB0GGGFFB0:CFA.A-;9.;000CBBFFBFGA.9AA;A;EDDE.ABBFFFF9;BEFFF/BF//9/B//9:B//..\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBBFBBBBBFGGGGGGGGGGHFHHHHHHHHHHHHHHGHHHHGHFHHHGEEGGHHHGHHHHHHHHHHHHEHGHHGGGHGGHGHHHHHGHHHHGHHHHHHHHHHHHHHGHHHHHGEGCGHHHHHGHHHHHHHHHHHHHHGHFFGHGHHGGGDACDFFFFABFFFFFFFFFFD-BC?DA9.DFFBEA==B=?F.;ABBFBFEF-DAF/BFF9/FFFBB/9BFFFFFFF/BFBBFFFFFFF/9FEA?--B/;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tAABBBBFFFFFFGGGFGGGGGGHHHGGHGGHHHHHHHHHHHGHHGGGGGHHHHHHHHHHHHHHHHHHGGCGDHHHHFGGHHHGGGGGFGGHGGGGHHGGGGHHHHHHGGGGGGHHGGGGDGGFGHGGFCDCHHHHGHHHHGHHFAGFGGEHFGEG.C<EGCECEFCFFHBGHE:GHHGFF0FFFB0CFGGGGAGFFF0;;FFGGGFFGFFCDD.DEFBEDD?9FFFFFFFFFFFFFFF/B./FB///;BF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tBBBBAFFFFFFFGGGGGGGGGGFGHHHHHGHHHHHHHHHHHHCGHHHHHHHGHHHHHHDGHHGGAECHHGHHHHHHHGHHHGHGFHHHHGGHGGHHFHHHHHHFHHHHHHHHH2GHHHHGHGHHFHHGGFGGGHHGHHHHHFHHHHEFHHHHEFGFFHGEHCFGDFDFFFFFCFFFFFFFFFFFFFAFBFFDFFFFFFFFADCF?9?EFBFB9EF-A.;BFFFFFFFBFFFFFFFFFFFFBFFFFFFFFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tAA?AAFFFFFFFGGGGGFBFGGGGGGH5GHFEDHHGGGGCGFBGH?AEEHFFEEGHGHHHHGGG?0EHGHHGGGGGC?GEE/EE?GHHHGBHFHHHHHHGHHGHHHGGGCG/A@<FGGHHHHHHHFF/GFDGHHHHHHGFFFGHGGHABGHFHHHHHFHEGDGHGDDEEHHBEDDEGFGHGBFFBFFEGGGEFGFGFB000;F0F;FGGEGGEFFF;-.9//B///B9FFFFF/BFFB/:.BB//;FBFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tCDDDBFFFFFFFGGGGGGGGGGHHHHHGGHHHGHHHGHHGGGGEHHGGHHHHHHHHHHHHHHGHHGHHHHHGGHHHHHFHHHHGCDCGHHHHHHHHEHHHGHGHHHGFHGGHGGHHHHHHHHFHHHFHHHGHHHHHHHHHFGGHHHHGGGEGAFHHGHHGGHHHHGHFBGFHGHGHGHGGHGGF@DAFEFBECAB=A.0BFFFEDF=A9.@D.-AAFFFA-:-..:.9/0:;0..-..0000::BFB09::\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tABBBBFFFFFFFGGGFGGGGGGHHHGHHGGHBGHGAGFFCAFGHGFFGHHGFHHHHHGGGGGHGHHHHHHHHE3BFFHHHGG0EDF@GHFFGGGHGGGGGGGGGGGGGHHGGEEFHGFHHDDG@DGGGHHGDGGGGGHGG?CF?HHGHHHGHGHHHFFHGGGHHHHGGCD.;0<C;CGGGGEFF/.;0;FFFBF/0;0CFGFFB..9B/;0CBFFBBFFFFBAC?DED9;B9AD;.FFFB/B/;FBA/B//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBCFCCCCCFGGGGGGGGGGHHHHHHHGHHHHHHHHGHHHHGHDGHHHGGGGHHHHHHHHHHHHHHHGHHHHHGGGEGGHHHHFHHHHHHHHHHHHHHHHHHHHHHGHHGHHGGGGGHHHHHHHHHHHGHHHFHHHHHHGHGHGHGGGGCGGFGGFFFFFFFFFFFFFBFFFFFFFFFFFFFFAFFFFEAEFFFFFFFFFFF9BFFBFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFADAB-/BF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\t>A33>FFFFFF@FFFGGGGFGGD4EGGGGGHHGFFGHFGGHHHFEFHECFHHHEHGAGBCCGCCEGGHGHEGFBFHFHHHHGGGHFHGHEGGGFEGEGG??@DBGHGGC-@FFGHFHFHB-??DA-DD@9:BEBG@B?E?A.ABBFBFA??F.FF/BFFB/B9B/9;BF9FF9FFFFFFFFFFFFFF?BB?;9EE;-;DDB9//;B-B@;ABFFEFFFF/-.9A.;//9/BF./B/..9.9:...//////\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH<1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 7, "time_seconds": 152.8508710861206, "inputs": {"library|input_1": {"src": "hda", "id": "6f3c85e5b25850cb"}, "library|input_2": {"src": "hda", "id": "2f855dea86f8d95a"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "bffbe2a74d873d72"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "6df8d9e5589b583c", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:53:31.282689", "create_time": "2023-04-22T16:51:49.705787", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-rv8kj", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/0/b/4/dataset_0b46f1e1-d827-4bdb-843e-552e3c2c287d.dat' genome && ln -s -f '/galaxy/server/database/objects/0/b/4/dataset_0b46f1e1-d827-4bdb-843e-552e3c2c287d.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/7/6/b/dataset_76b3f25f-ae62-45e9-9b61-fd89946ff656.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/0/5/5/dataset_05543eb1-43f7-4103-a8a6-37e0c51d55f0.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/6/6/3/dataset_663df4c3-9b43-435c-afbe-27cefd50ea93.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 171, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 169, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 170, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "6f3c85e5b25850cb", "src": "hda", "uuid": "76b3f25f-ae62-45e9-9b61-fd89946ff656"}, "input_2": {"id": "2f855dea86f8d95a", "src": "hda", "uuid": "05543eb1-43f7-4103-a8a6-37e0c51d55f0"}, "own_file": {"id": "bffbe2a74d873d72", "src": "hda", "uuid": "0b46f1e1-d827-4bdb-843e-552e3c2c287d"}}, "outputs": {"output": {"id": "30c0164d277d884e", "src": "hda", "uuid": "663df4c3-9b43-435c-afbe-27cefd50ea93"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/b/4/dataset_0b46f1e1-d827-4bdb-843e-552e3c2c287d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 30%\n  bucket 6: 50%\n  bucket 5: 40%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 6: 90%\n  bucket 6: 100%\n  bucket 5: 70%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\nGetting block 15 of 30\n  bucket 14: 40%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 50%\n  bucket 15: 10%\n  bucket 14: 60%\n  bucket 15: 20%\n  bucket 14: 70%\n  bucket 15: 30%\n  bucket 14: 80%\n  bucket 15: 40%\n  bucket 14: 90%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 100%\n  bucket 15: 70%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  bucket 17: 60%\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 70%\n  bucket 18: 10%\n  bucket 17: 80%\n  bucket 18: 20%\n  bucket 17: 90%\n  bucket 18: 30%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 30\n  Entering block accumulator loop for bucket 21:\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 30\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 21: 20%\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 23: 30%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 23: 40%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 23: 50%\n  bucket 22: 80%\n  bucket 21: 100%\n  bucket 23: 60%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 23: 70%\n  Sorting block time: 00:00:00\n  bucket 22: 100%\n  bucket 23: 80%\nReturning block of 22 for bucket 21\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 23: 90%\nReturning block of 953 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  bucket 25: 20%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 25: 60%\n  bucket 26: 30%\n  bucket 25: 70%\n  bucket 26: 40%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 50%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 26: 60%\nReturning block of 416 for bucket 25\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  Sorting block time: 00:00:00\n  bucket 30: 10%\nReturning block of 241 for bucket 29\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 1: 100%\n  bucket 4: 80%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 6: 10%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 6: 50%\n  bucket 7: 80%\n  bucket 6: 60%\n  bucket 7: 90%\n  bucket 6: 70%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 30\n  bucket 9: 40%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 10%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 20%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 20%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 40%\n  bucket 14: 70%\n  bucket 13: 50%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 60%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 15: 60%\n  bucket 16: 80%\n  bucket 15: 70%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  bucket 24: 10%\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 26 of 30\nGetting block 27 of 30\n  Reserving size (777) for bucket 26\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 26\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 26: 10%\n  bucket 27: 20%\n  bucket 26: 20%\n  bucket 27: 30%\n  bucket 26: 30%\n  bucket 27: 40%\n  bucket 26: 40%\n  bucket 27: 50%\n  bucket 26: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 26: 60%\n  bucket 27: 80%\n  bucket 26: 70%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/b/4/dataset_0b46f1e1-d827-4bdb-843e-552e3c2c287d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 30%\n  bucket 6: 50%\n  bucket 5: 40%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 6: 90%\n  bucket 6: 100%\n  bucket 5: 70%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\nGetting block 15 of 30\n  bucket 14: 40%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 50%\n  bucket 15: 10%\n  bucket 14: 60%\n  bucket 15: 20%\n  bucket 14: 70%\n  bucket 15: 30%\n  bucket 14: 80%\n  bucket 15: 40%\n  bucket 14: 90%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 100%\n  bucket 15: 70%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  bucket 17: 60%\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 70%\n  bucket 18: 10%\n  bucket 17: 80%\n  bucket 18: 20%\n  bucket 17: 90%\n  bucket 18: 30%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 30\n  Entering block accumulator loop for bucket 21:\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 30\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 21: 20%\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 23: 30%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 23: 40%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 23: 50%\n  bucket 22: 80%\n  bucket 21: 100%\n  bucket 23: 60%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 23: 70%\n  Sorting block time: 00:00:00\n  bucket 22: 100%\n  bucket 23: 80%\nReturning block of 22 for bucket 21\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 23: 90%\nReturning block of 953 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  bucket 25: 20%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 25: 60%\n  bucket 26: 30%\n  bucket 25: 70%\n  bucket 26: 40%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 50%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 26: 60%\nReturning block of 416 for bucket 25\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  Sorting block time: 00:00:00\n  bucket 30: 10%\nReturning block of 241 for bucket 29\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 1: 100%\n  bucket 4: 80%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 6: 10%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 6: 50%\n  bucket 7: 80%\n  bucket 6: 60%\n  bucket 7: 90%\n  bucket 6: 70%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 30\n  bucket 9: 40%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 10%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 20%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 20%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 40%\n  bucket 14: 70%\n  bucket 13: 50%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 60%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 15: 60%\n  bucket 16: 80%\n  bucket 15: 70%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  bucket 24: 10%\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 26 of 30\nGetting block 27 of 30\n  Reserving size (777) for bucket 26\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 26\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 26: 10%\n  bucket 27: 20%\n  bucket 26: 20%\n  bucket 27: 30%\n  bucket 26: 30%\n  bucket 27: 40%\n  bucket 26: 40%\n  bucket 27: 50%\n  bucket 26: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 26: 60%\n  bucket 27: 80%\n  bucket 26: 70%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:53:17", "plugin": "core", "name": "end_epoch", "raw_value": "1682182397.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:53:17", "plugin": "core", "name": "start_epoch", "raw_value": "1682182397.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_mm97bd_e.sam v. /tmp/history_bam_converted_to_sam_oe_uxdeq.sam )\n--- local_file\n+++ history_data\n@@ -1,68 +1,69 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/mvandenb/miniconda3/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/134/tmp -O bam -o /galaxy/server/database/objects/6/6/3/dataset_663df4c3-9b43-435c-afbe-27cefd50ea93.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t24\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-47\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-47\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t-218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t6\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-146\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-140\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:7437:24508\t77\t*\t0\t0\t*\t*\t0\t0\tACACACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTGTCTCTTATACACATCTCCGAGCCCACGAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:7437:24508\t141\t*\t0\t0\t*\t*\t0\t0\tACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTCTGTCTCTTATACACATCTGACGCTGCCGAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:21679:18011\t77\t*\t0\t0\t*\t*\t0\t0\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGAGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATATGTCTTTGATTCCTGCCTCTTCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAACTGTCTCTTATACACATATCCACGCCCACGAGACTAAGGCGAAGTTCATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:21679:18011\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCTGTCTCTTATACACATCTGACGCTGCCGACGACCGAGCTAGTTGAGATC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 8, "time_seconds": 124.30837559700012, "inputs": {"library|input_1": {"src": "hda", "id": "14cda8cf1a64432b"}, "library|input_2": {"src": "hda", "id": "1601e3750181e0da"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "d5224191867b26be"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|reorder": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "461f7ffcc46d6d0f", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:54:32.266835", "create_time": "2023-04-22T16:52:52.834376", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-5zqhp", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/c/4/0/dataset_c409463f-8bd3-4274-9b7b-0dc210bb831d.dat' genome && ln -s -f '/galaxy/server/database/objects/c/4/0/dataset_c409463f-8bd3-4274-9b7b-0dc210bb831d.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/6/4/4/dataset_6444b398-b680-4c10-a693-abf334b6184c.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/3/5/7/dataset_357c454e-c1ba-48fa-965b-f914b3aa7f84.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                    --reorder   | samtools view -bS - -o '/galaxy/server/database/objects/6/6/d/dataset_66d3dc33-b110-4169-b82c-34345027644a.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"true\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"false\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 177, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 175, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 176, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "14cda8cf1a64432b", "src": "hda", "uuid": "6444b398-b680-4c10-a693-abf334b6184c"}, "input_2": {"id": "1601e3750181e0da", "src": "hda", "uuid": "357c454e-c1ba-48fa-965b-f914b3aa7f84"}, "own_file": {"id": "d5224191867b26be", "src": "hda", "uuid": "c409463f-8bd3-4274-9b7b-0dc210bb831d"}}, "outputs": {"output": {"id": "28ee935dca75c92f", "src": "hda", "uuid": "66d3dc33-b110-4169-b82c-34345027644a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/4/0/dataset_c409463f-8bd3-4274-9b7b-0dc210bb831d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  bucket 1: 10%\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 2: 100%\n  bucket 1: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\nGetting block 7 of 30\n  Reserving size (777) for bucket 6\n  bucket 5: 10%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 7: 50%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 7: 60%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 7: 70%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  bucket 7: 80%\n  bucket 6: 80%\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Entering block accumulator loop for bucket 9:\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 30\n  Entering block accumulator loop for bucket 11:\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 20%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\nGetting block 16 of 30\n  bucket 15: 10%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 16: 20%\n  bucket 15: 50%\n  bucket 16: 30%\n  bucket 15: 60%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 16: 70%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 1: 70%\n  bucket 3: 70%\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nGetting block 7 of 30\nReturning block of 180 for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\nGetting block 11 of 30\n  bucket 9: 40%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 30%\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 11: 10%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 11: 40%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\n  bucket 11: 90%\nReturning block of 536 for bucket 9\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\nGetting block 15 of 30\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 14: 80%\n  bucket 15: 90%\n  bucket 14: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  bucket 17: 10%\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\nGetting block 22 of 30\n  bucket 21: 30%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 40%\n  bucket 22: 10%\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  bucket 22: 70%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 60%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 70%\n  bucket 24: 10%\n  bucket 23: 80%\n  bucket 24: 20%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  bucket 25: 10%\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 20%\n  bucket 30: 30%\n  bucket 29: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 40%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 50%\n  bucket 30: 80%\n  bucket 29: 60%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/4/0/dataset_c409463f-8bd3-4274-9b7b-0dc210bb831d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  bucket 1: 10%\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 2: 100%\n  bucket 1: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\nGetting block 7 of 30\n  Reserving size (777) for bucket 6\n  bucket 5: 10%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 7: 50%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 7: 60%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 7: 70%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  bucket 7: 80%\n  bucket 6: 80%\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Entering block accumulator loop for bucket 9:\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 30\n  Entering block accumulator loop for bucket 11:\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 20%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\nGetting block 16 of 30\n  bucket 15: 10%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 16: 20%\n  bucket 15: 50%\n  bucket 16: 30%\n  bucket 15: 60%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 16: 70%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 1: 70%\n  bucket 3: 70%\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nGetting block 7 of 30\nReturning block of 180 for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\nGetting block 11 of 30\n  bucket 9: 40%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 30%\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 11: 10%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 11: 40%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\n  bucket 11: 90%\nReturning block of 536 for bucket 9\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\nGetting block 15 of 30\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 14: 80%\n  bucket 15: 90%\n  bucket 14: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  bucket 17: 10%\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\nGetting block 22 of 30\n  bucket 21: 30%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 40%\n  bucket 22: 10%\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  bucket 22: 70%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 60%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 70%\n  bucket 24: 10%\n  bucket 23: 80%\n  bucket 24: 20%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  bucket 25: 10%\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 20%\n  bucket 30: 30%\n  bucket 29: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 40%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 50%\n  bucket 30: 80%\n  bucket 29: 60%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:54:21", "plugin": "core", "name": "end_epoch", "raw_value": "1682182461.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:54:21", "plugin": "core", "name": "start_epoch", "raw_value": "1682182461.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-9", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 9, "time_seconds": 139.9543731212616, "inputs": {"library|input_1": {"src": "hda", "id": "055d4f0912902981"}, "library|input_2": {"src": "hda", "id": "3e14017b71a2bfa2"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "42c897d5e9967783"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|sam_opt": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "1f8c4fb79b8c3108", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:55:48.827892", "create_time": "2023-04-22T16:53:55.314944", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-dns8g", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/6/5/0/dataset_650ddf7c-9d97-4fd3-9d0c-11eae9eeea7e.dat' genome && ln -s -f '/galaxy/server/database/objects/6/5/0/dataset_650ddf7c-9d97-4fd3-9d0c-11eae9eeea7e.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/0/c/5/dataset_0c51d0bf-ab6e-4c96-a175-668e106f5801.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/6/7/b/dataset_67b54224-cb89-4d80-a57b-c08efe305ed8.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                       > '/galaxy/server/database/objects/5/e/d/dataset_5ed6cbed-21ba-4352-a087-3b8658c6031e.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"false\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"true\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 181, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 179, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 180, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "055d4f0912902981", "src": "hda", "uuid": "0c51d0bf-ab6e-4c96-a175-668e106f5801"}, "input_2": {"id": "3e14017b71a2bfa2", "src": "hda", "uuid": "67b54224-cb89-4d80-a57b-c08efe305ed8"}, "own_file": {"id": "42c897d5e9967783", "src": "hda", "uuid": "650ddf7c-9d97-4fd3-9d0c-11eae9eeea7e"}}, "outputs": {"output": {"id": "a1cbe239a379191f", "src": "hda", "uuid": "5ed6cbed-21ba-4352-a087-3b8658c6031e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/6/5/0/dataset_650ddf7c-9d97-4fd3-9d0c-11eae9eeea7e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 30\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 3: 100%\n  bucket 1: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  bucket 6: 10%\n  Calculating Z arrays for bucket 8\n  bucket 5: 20%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 5: 60%\n  bucket 7: 50%\n  bucket 6: 50%\n  bucket 8: 40%\n  bucket 5: 70%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 6: 80%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 6: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\nGetting block 16 of 30\n  bucket 15: 20%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 10%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 20%\n  bucket 17: 90%\n  bucket 18: 30%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 20: 100%\n  bucket 19: 70%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Entering block accumulator loop for bucket 23:\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 10%\n  bucket 25: 60%\n  bucket 26: 20%\n  bucket 25: 70%\n  bucket 26: 30%\n  bucket 25: 80%\n  bucket 26: 40%\n  bucket 25: 90%\n  bucket 26: 50%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 40%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 2: 100%\n  bucket 3: 90%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 70%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\nGetting block 16 of 30\n  Calculating Z arrays for bucket 15\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 16: 20%\n  bucket 15: 40%\n  bucket 16: 30%\n  bucket 15: 50%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nReturning block of 607 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 40%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 50%\n  bucket 22: 10%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 22: 50%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 25:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  bucket 26: 80%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 30\n  bucket 27: 30%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 28: 30%\n  bucket 27: 80%\n  bucket 28: 40%\n  bucket 27: 90%\n  bucket 28: 50%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 90%\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/6/5/0/dataset_650ddf7c-9d97-4fd3-9d0c-11eae9eeea7e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 30\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 3: 100%\n  bucket 1: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  bucket 6: 10%\n  Calculating Z arrays for bucket 8\n  bucket 5: 20%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 5: 60%\n  bucket 7: 50%\n  bucket 6: 50%\n  bucket 8: 40%\n  bucket 5: 70%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 6: 80%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 6: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\nGetting block 16 of 30\n  bucket 15: 20%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 10%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 20%\n  bucket 17: 90%\n  bucket 18: 30%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 20: 100%\n  bucket 19: 70%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Entering block accumulator loop for bucket 23:\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 10%\n  bucket 25: 60%\n  bucket 26: 20%\n  bucket 25: 70%\n  bucket 26: 30%\n  bucket 25: 80%\n  bucket 26: 40%\n  bucket 25: 90%\n  bucket 26: 50%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 40%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 2: 100%\n  bucket 3: 90%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 70%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\nGetting block 16 of 30\n  Calculating Z arrays for bucket 15\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 16: 20%\n  bucket 15: 40%\n  bucket 16: 30%\n  bucket 15: 50%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nReturning block of 607 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 40%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 50%\n  bucket 22: 10%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 22: 50%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 25:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  bucket 26: 80%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 30\n  bucket 27: 30%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 28: 30%\n  bucket 27: 80%\n  bucket 28: 40%\n  bucket 27: 90%\n  bucket 28: 50%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 90%\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:55:37", "plugin": "core", "name": "end_epoch", "raw_value": "1682182537.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:55:37", "plugin": "core", "name": "start_epoch", "raw_value": "1682182537.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 0, "time_seconds": 155.70226192474365, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "5dc9f7b51e7cfbac"}, "reference_source|reference_source_selector": "history", "input_type|fastq_input1": {"src": "hda", "id": "2da0fc184944ed77"}, "input_type|input_type_selector": "single", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "0d24e5a20d0d776c", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:56:05.806680", "create_time": "2023-04-22T16:54:16.222991", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-jg9m8", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/8/4/4/dataset_8449d98d-304f-403c-a9e4-3191ccda04a4.dat' 'localref.fa' && bwa index 'localref.fa' &&                 bwa aln -t \"${GALAXY_SLOTS:-1}\"     'localref.fa' '/galaxy/server/database/objects/3/7/a/dataset_37a6c965-1cac-4d87-a82a-c21d6e7181c7.dat' > first.sai &&  bwa samse    'localref.fa' first.sai '/galaxy/server/database/objects/3/7/a/dataset_37a6c965-1cac-4d87-a82a-c21d6e7181c7.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/f/c/f/dataset_fcf06ab5-f4d7-4728-a846-d2adab06e1b5.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "input_type": "{\"__current_case__\": 2, \"adv_se_options\": {\"__current_case__\": 1, \"adv_se_options_selector\": \"do_not_set\"}, \"fastq_input1\": {\"values\": [{\"id\": 183, \"src\": \"hda\"}]}, \"input_type_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 184, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "5dc9f7b51e7cfbac", "src": "hda", "uuid": "8449d98d-304f-403c-a9e4-3191ccda04a4"}, "fastq_input1": {"id": "2da0fc184944ed77", "src": "hda", "uuid": "37a6c965-1cac-4d87-a82a-c21d6e7181c7"}}, "outputs": {"bam_output": {"id": "4ce94512273f6db6", "src": "hda", "uuid": "fcf06ab5-f4d7-4728-a846-d2adab06e1b5"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.054 sec; CPU: 0.012 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.04 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/3/7/a/dataset_37a6c965-1cac-4d87-a82a-c21d6e7181c7.dat\n[main] Real time: 0.020 sec; CPU: 0.039 sec\n[bwa_aln_core] convert to sequence coordinate... 0.00 sec\n[bwa_aln_core] refine gapped alignments... 0.00 sec\n[bwa_aln_core] print alignments... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa samse localref.fa first.sai /galaxy/server/database/objects/3/7/a/dataset_37a6c965-1cac-4d87-a82a-c21d6e7181c7.dat\n[main] Real time: 0.009 sec; CPU: 0.004 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.054 sec; CPU: 0.012 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.04 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/3/7/a/dataset_37a6c965-1cac-4d87-a82a-c21d6e7181c7.dat\n[main] Real time: 0.020 sec; CPU: 0.039 sec\n[bwa_aln_core] convert to sequence coordinate... 0.00 sec\n[bwa_aln_core] refine gapped alignments... 0.00 sec\n[bwa_aln_core] print alignments... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa samse localref.fa first.sai /galaxy/server/database/objects/3/7/a/dataset_37a6c965-1cac-4d87-a82a-c21d6e7181c7.dat\n[main] Real time: 0.009 sec; CPU: 0.004 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:55:46", "plugin": "core", "name": "end_epoch", "raw_value": "1682182546.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:55:46", "plugin": "core", "name": "start_epoch", "raw_value": "1682182546.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 1, "time_seconds": 155.44011998176575, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "5dc9f7b51e7cfbac"}, "reference_source|reference_source_selector": "history", "input_type|fastq_input1": {"src": "hda", "id": "6b5b3699a367b372"}, "input_type|fastq_input2": {"src": "hda", "id": "5918c7572d108606"}, "input_type|input_type_selector": "paired", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "961b119303abb892", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:56:06.287633", "create_time": "2023-04-22T16:54:18.507179", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-hv8l2", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/8/4/4/dataset_8449d98d-304f-403c-a9e4-3191ccda04a4.dat' 'localref.fa' && bwa index 'localref.fa' &&                 bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/8/8/9/dataset_889b0c43-4b86-4b53-8ac8-17a6cd926c7a.dat' > first.sai &&  bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/e/3/8/dataset_e38719d2-9680-4dc1-8bb6-48aacefcfd6c.dat' > second.sai &&  bwa sampe   'localref.fa' first.sai second.sai '/galaxy/server/database/objects/8/8/9/dataset_889b0c43-4b86-4b53-8ac8-17a6cd926c7a.dat' '/galaxy/server/database/objects/e/3/8/dataset_e38719d2-9680-4dc1-8bb6-48aacefcfd6c.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/8/a/d/dataset_8ad62530-0ec8-4596-8154-f9f37da0a712.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "input_type": "{\"__current_case__\": 0, \"adv_pe_options\": {\"__current_case__\": 1, \"adv_pe_options_selector\": \"do_not_set\"}, \"fastq_input1\": {\"values\": [{\"id\": 185, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 186, \"src\": \"hda\"}]}, \"input_type_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 184, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "5dc9f7b51e7cfbac", "src": "hda", "uuid": "8449d98d-304f-403c-a9e4-3191ccda04a4"}, "fastq_input1": {"id": "6b5b3699a367b372", "src": "hda", "uuid": "889b0c43-4b86-4b53-8ac8-17a6cd926c7a"}, "fastq_input2": {"id": "5918c7572d108606", "src": "hda", "uuid": "e38719d2-9680-4dc1-8bb6-48aacefcfd6c"}}, "outputs": {"bam_output": {"id": "685bc9ce8613c88d", "src": "hda", "uuid": "8ad62530-0ec8-4596-8154-f9f37da0a712"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.053 sec; CPU: 0.011 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.04 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/8/8/9/dataset_889b0c43-4b86-4b53-8ac8-17a6cd926c7a.dat\n[main] Real time: 0.019 sec; CPU: 0.039 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.03 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/e/3/8/dataset_e38719d2-9680-4dc1-8bb6-48aacefcfd6c.dat\n[main] Real time: 0.017 sec; CPU: 0.032 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/8/8/9/dataset_889b0c43-4b86-4b53-8ac8-17a6cd926c7a.dat /galaxy/server/database/objects/e/3/8/dataset_e38719d2-9680-4dc1-8bb6-48aacefcfd6c.dat\n[main] Real time: 0.008 sec; CPU: 0.004 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.053 sec; CPU: 0.011 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.04 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/8/8/9/dataset_889b0c43-4b86-4b53-8ac8-17a6cd926c7a.dat\n[main] Real time: 0.019 sec; CPU: 0.039 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.03 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/e/3/8/dataset_e38719d2-9680-4dc1-8bb6-48aacefcfd6c.dat\n[main] Real time: 0.017 sec; CPU: 0.032 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/8/8/9/dataset_889b0c43-4b86-4b53-8ac8-17a6cd926c7a.dat /galaxy/server/database/objects/e/3/8/dataset_e38719d2-9680-4dc1-8bb6-48aacefcfd6c.dat\n[main] Real time: 0.008 sec; CPU: 0.004 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:55:47", "plugin": "core", "name": "end_epoch", "raw_value": "1682182547.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:55:47", "plugin": "core", "name": "start_epoch", "raw_value": "1682182547.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 2, "time_seconds": 128.88263630867004, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "5d1a3e323d0b4de4"}, "reference_source|reference_source_selector": "history", "input_type|fastq_input1": {"src": "hda", "id": "2ec112e0731135bf"}, "input_type|fastq_input2": {"src": "hda", "id": "37825063bc302f76"}, "input_type|input_type_selector": "paired", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "7bd8dba9aa3956da", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:56:41.072187", "create_time": "2023-04-22T16:54:56.825126", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-x4ttm", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/3/1/8/dataset_3180a09d-64bc-4651-a1de-4612715001ea.dat' 'localref.fa' && bwa index 'localref.fa' &&                 bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/f/e/8/dataset_fe86d995-6607-45ae-a2fd-56c0b192e7c2.dat' > first.sai &&  bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/b/6/1/dataset_b61c1d5d-10ed-4f5c-95e0-f1de1a01ff8d.dat' > second.sai &&  bwa sampe   'localref.fa' first.sai second.sai '/galaxy/server/database/objects/f/e/8/dataset_fe86d995-6607-45ae-a2fd-56c0b192e7c2.dat' '/galaxy/server/database/objects/b/6/1/dataset_b61c1d5d-10ed-4f5c-95e0-f1de1a01ff8d.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/1/c/0/dataset_1c04ff10-330a-412d-b0ba-a4c501047e4e.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "input_type": "{\"__current_case__\": 0, \"adv_pe_options\": {\"__current_case__\": 1, \"adv_pe_options_selector\": \"do_not_set\"}, \"fastq_input1\": {\"values\": [{\"id\": 191, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 192, \"src\": \"hda\"}]}, \"input_type_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 190, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "5d1a3e323d0b4de4", "src": "hda", "uuid": "3180a09d-64bc-4651-a1de-4612715001ea"}, "fastq_input1": {"id": "2ec112e0731135bf", "src": "hda", "uuid": "fe86d995-6607-45ae-a2fd-56c0b192e7c2"}, "fastq_input2": {"id": "37825063bc302f76", "src": "hda", "uuid": "b61c1d5d-10ed-4f5c-95e0-f1de1a01ff8d"}}, "outputs": {"bam_output": {"id": "9fcfe9d256c1d4cc", "src": "hda", "uuid": "1c04ff10-330a-412d-b0ba-a4c501047e4e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.059 sec; CPU: 0.011 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.04 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/f/e/8/dataset_fe86d995-6607-45ae-a2fd-56c0b192e7c2.dat\n[main] Real time: 0.019 sec; CPU: 0.039 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.03 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/b/6/1/dataset_b61c1d5d-10ed-4f5c-95e0-f1de1a01ff8d.dat\n[main] Real time: 0.022 sec; CPU: 0.036 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/f/e/8/dataset_fe86d995-6607-45ae-a2fd-56c0b192e7c2.dat /galaxy/server/database/objects/b/6/1/dataset_b61c1d5d-10ed-4f5c-95e0-f1de1a01ff8d.dat\n[main] Real time: 0.013 sec; CPU: 0.006 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.059 sec; CPU: 0.011 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.04 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/f/e/8/dataset_fe86d995-6607-45ae-a2fd-56c0b192e7c2.dat\n[main] Real time: 0.019 sec; CPU: 0.039 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.03 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/b/6/1/dataset_b61c1d5d-10ed-4f5c-95e0-f1de1a01ff8d.dat\n[main] Real time: 0.022 sec; CPU: 0.036 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/f/e/8/dataset_fe86d995-6607-45ae-a2fd-56c0b192e7c2.dat /galaxy/server/database/objects/b/6/1/dataset_b61c1d5d-10ed-4f5c-95e0-f1de1a01ff8d.dat\n[main] Real time: 0.013 sec; CPU: 0.006 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:56:22", "plugin": "core", "name": "end_epoch", "raw_value": "1682182582.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:56:22", "plugin": "core", "name": "start_epoch", "raw_value": "1682182582.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 3, "time_seconds": 139.28494596481323, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "44232fc18225c194"}, "reference_source|reference_source_selector": "history", "input_type|bam_input": {"src": "hda", "id": "1efe1d3853c00d27"}, "input_type|input_type_selector": "paired_bam", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "a74221a2a552a1bf", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:58:08.090035", "create_time": "2023-04-22T16:56:13.799875", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-48lhq", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/3/c/0/dataset_3c07aa0b-4099-44f2-aab3-bd3f1d7583fe.dat' 'localref.fa' && bwa index 'localref.fa' &&                 bwa aln -t \"${GALAXY_SLOTS:-1}\" -b -1   'localref.fa' '/galaxy/server/database/objects/2/7/0/dataset_270f3e66-b30a-4fbc-9f0b-dc147ecd6efd.dat' > first.sai &&  bwa aln -t \"${GALAXY_SLOTS:-1}\" -b -2   'localref.fa' '/galaxy/server/database/objects/2/7/0/dataset_270f3e66-b30a-4fbc-9f0b-dc147ecd6efd.dat' > second.sai &&  bwa sampe    'localref.fa' first.sai second.sai '/galaxy/server/database/objects/2/7/0/dataset_270f3e66-b30a-4fbc-9f0b-dc147ecd6efd.dat' '/galaxy/server/database/objects/2/7/0/dataset_270f3e66-b30a-4fbc-9f0b-dc147ecd6efd.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/2/f/f/dataset_2ff4ca7f-7b05-4d34-94b4-1fcc352632e2.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "input_type": "{\"__current_case__\": 3, \"adv_bam_pe_options\": {\"__current_case__\": 1, \"adv_pe_options_selector\": \"do_not_set\"}, \"bam_input\": {\"values\": [{\"id\": 195, \"src\": \"hda\"}]}, \"input_type_selector\": \"paired_bam\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 199, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "44232fc18225c194", "src": "hda", "uuid": "3c07aa0b-4099-44f2-aab3-bd3f1d7583fe"}, "bam_input": {"id": "1efe1d3853c00d27", "src": "hda", "uuid": "270f3e66-b30a-4fbc-9f0b-dc147ecd6efd"}}, "outputs": {"bam_output": {"id": "3db04245849629f8", "src": "hda", "uuid": "2ff4ca7f-7b05-4d34-94b4-1fcc352632e2"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.045 sec; CPU: 0.010 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.04 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 -b -1 localref.fa /galaxy/server/database/objects/2/7/0/dataset_270f3e66-b30a-4fbc-9f0b-dc147ecd6efd.dat\n[main] Real time: 0.022 sec; CPU: 0.040 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.03 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 -b -2 localref.fa /galaxy/server/database/objects/2/7/0/dataset_270f3e66-b30a-4fbc-9f0b-dc147ecd6efd.dat\n[main] Real time: 0.019 sec; CPU: 0.033 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/2/7/0/dataset_270f3e66-b30a-4fbc-9f0b-dc147ecd6efd.dat /galaxy/server/database/objects/2/7/0/dataset_270f3e66-b30a-4fbc-9f0b-dc147ecd6efd.dat\n[main] Real time: 0.013 sec; CPU: 0.008 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.045 sec; CPU: 0.010 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.04 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 -b -1 localref.fa /galaxy/server/database/objects/2/7/0/dataset_270f3e66-b30a-4fbc-9f0b-dc147ecd6efd.dat\n[main] Real time: 0.022 sec; CPU: 0.040 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.03 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 -b -2 localref.fa /galaxy/server/database/objects/2/7/0/dataset_270f3e66-b30a-4fbc-9f0b-dc147ecd6efd.dat\n[main] Real time: 0.019 sec; CPU: 0.033 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/2/7/0/dataset_270f3e66-b30a-4fbc-9f0b-dc147ecd6efd.dat /galaxy/server/database/objects/2/7/0/dataset_270f3e66-b30a-4fbc-9f0b-dc147ecd6efd.dat\n[main] Real time: 0.013 sec; CPU: 0.008 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:57:57", "plugin": "core", "name": "end_epoch", "raw_value": "1682182677.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:57:57", "plugin": "core", "name": "start_epoch", "raw_value": "1682182677.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 4, "time_seconds": 146.78877639770508, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "44232fc18225c194"}, "reference_source|reference_source_selector": "history", "input_type|fastq_input1": {"src": "hda", "id": "6d9fc06bbd11f5aa"}, "input_type|fastq_input2": {"src": "hda", "id": "97f34d0dfa9cebf5"}, "input_type|input_type_selector": "paired", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "94386a55c25f404c", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:58:32.309920", "create_time": "2023-04-22T16:56:35.124425", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-95q66", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/3/c/0/dataset_3c07aa0b-4099-44f2-aab3-bd3f1d7583fe.dat' 'localref.fa' && bwa index 'localref.fa' &&                            bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/6/9/e/dataset_69ee22eb-6188-429a-9da6-0965895aae8e.dat' > first.sai &&  bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/c/a/f/dataset_cafbec01-c87e-43c7-8b78-1755014a536b.dat' > second.sai &&  bwa sampe    -r '@RG\\tID:rg1\\tPL:CAPILLARY'  'localref.fa' first.sai second.sai '/galaxy/server/database/objects/6/9/e/dataset_69ee22eb-6188-429a-9da6-0965895aae8e.dat' '/galaxy/server/database/objects/c/a/f/dataset_cafbec01-c87e-43c7-8b78-1755014a536b.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/3/d/3/dataset_3d390e34-bbf6-4586-b474-cd22388113b3.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "input_type": "{\"__current_case__\": 0, \"adv_pe_options\": {\"__current_case__\": 1, \"adv_pe_options_selector\": \"do_not_set\"}, \"fastq_input1\": {\"values\": [{\"id\": 200, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 201, \"src\": \"hda\"}]}, \"input_type_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 199, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "44232fc18225c194", "src": "hda", "uuid": "3c07aa0b-4099-44f2-aab3-bd3f1d7583fe"}, "fastq_input1": {"id": "6d9fc06bbd11f5aa", "src": "hda", "uuid": "69ee22eb-6188-429a-9da6-0965895aae8e"}, "fastq_input2": {"id": "97f34d0dfa9cebf5", "src": "hda", "uuid": "cafbec01-c87e-43c7-8b78-1755014a536b"}}, "outputs": {"bam_output": {"id": "c13df7b83b3cb3d7", "src": "hda", "uuid": "3d390e34-bbf6-4586-b474-cd22388113b3"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.050 sec; CPU: 0.010 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.04 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/6/9/e/dataset_69ee22eb-6188-429a-9da6-0965895aae8e.dat\n[main] Real time: 0.020 sec; CPU: 0.039 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.03 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/c/a/f/dataset_cafbec01-c87e-43c7-8b78-1755014a536b.dat\n[main] Real time: 0.019 sec; CPU: 0.034 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe -r @RG\\tID:rg1\\tPL:CAPILLARY localref.fa first.sai second.sai /galaxy/server/database/objects/6/9/e/dataset_69ee22eb-6188-429a-9da6-0965895aae8e.dat /galaxy/server/database/objects/c/a/f/dataset_cafbec01-c87e-43c7-8b78-1755014a536b.dat\n[main] Real time: 0.013 sec; CPU: 0.005 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.050 sec; CPU: 0.010 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.04 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/6/9/e/dataset_69ee22eb-6188-429a-9da6-0965895aae8e.dat\n[main] Real time: 0.020 sec; CPU: 0.039 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.03 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/c/a/f/dataset_cafbec01-c87e-43c7-8b78-1755014a536b.dat\n[main] Real time: 0.019 sec; CPU: 0.034 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe -r @RG\\tID:rg1\\tPL:CAPILLARY localref.fa first.sai second.sai /galaxy/server/database/objects/6/9/e/dataset_69ee22eb-6188-429a-9da6-0965895aae8e.dat /galaxy/server/database/objects/c/a/f/dataset_cafbec01-c87e-43c7-8b78-1755014a536b.dat\n[main] Real time: 0.013 sec; CPU: 0.005 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:58:15", "plugin": "core", "name": "end_epoch", "raw_value": "1682182695.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:58:15", "plugin": "core", "name": "start_epoch", "raw_value": "1682182695.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem", "tool_version": "0.7.17.1", "test_index": 0, "time_seconds": 150.40978407859802, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "a314952ad65c0eb8"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "6d9fc06bbd11f5aa"}, "fastq_input|fastq_input2": {"src": "hda", "id": "97f34d0dfa9cebf5"}, "fastq_input|fastq_input_selector": "paired", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "26754e2cdad7a395", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:58:36.904038", "create_time": "2023-04-22T16:56:53.563291", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-ldqrm", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/7/e/8/dataset_7e8add11-51d9-4bca-9868-9a02e752e06d.dat' 'localref.fa' && bwa index 'localref.fa' &&    bwa mem -t \"${GALAXY_SLOTS:-1}\" -v 1                 'localref.fa' '/galaxy/server/database/objects/6/9/e/dataset_69ee22eb-6188-429a-9da6-0965895aae8e.dat' '/galaxy/server/database/objects/c/a/f/dataset_cafbec01-c87e-43c7-8b78-1755014a536b.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/0/a/e/dataset_0ae8dd4a-3ec2-4b78-9baf-2c583d0b728b.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "fastq_input": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 200, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 201, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\", \"iset_stats\": null}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 204, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "a314952ad65c0eb8", "src": "hda", "uuid": "7e8add11-51d9-4bca-9868-9a02e752e06d"}, "fastq_input1": {"id": "6d9fc06bbd11f5aa", "src": "hda", "uuid": "69ee22eb-6188-429a-9da6-0965895aae8e"}, "fastq_input2": {"id": "97f34d0dfa9cebf5", "src": "hda", "uuid": "cafbec01-c87e-43c7-8b78-1755014a536b"}}, "outputs": {"bam_output": {"id": "155c3eeaa7920cd6", "src": "hda", "uuid": "0ae8dd4a-3ec2-4b78-9baf-2c583d0b728b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.050 sec; CPU: 0.011 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/6/9/e/dataset_69ee22eb-6188-429a-9da6-0965895aae8e.dat /galaxy/server/database/objects/c/a/f/dataset_cafbec01-c87e-43c7-8b78-1755014a536b.dat\n[main] Real time: 0.017 sec; CPU: 0.028 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.050 sec; CPU: 0.011 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/6/9/e/dataset_69ee22eb-6188-429a-9da6-0965895aae8e.dat /galaxy/server/database/objects/c/a/f/dataset_cafbec01-c87e-43c7-8b78-1755014a536b.dat\n[main] Real time: 0.017 sec; CPU: 0.028 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:58:18", "plugin": "core", "name": "end_epoch", "raw_value": "1682182698.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:58:18", "plugin": "core", "name": "start_epoch", "raw_value": "1682182698.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem", "tool_version": "0.7.17.1", "test_index": 1, "time_seconds": 117.99462914466858, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "a314952ad65c0eb8"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "f85d18e870e282cb"}, "fastq_input|fastq_input_selector": "single", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "33a740abf47d2462", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:58:39.192182", "create_time": "2023-04-22T16:57:00.267072", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-xfd57", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/7/e/8/dataset_7e8add11-51d9-4bca-9868-9a02e752e06d.dat' 'localref.fa' && bwa index 'localref.fa' &&    bwa mem -t \"${GALAXY_SLOTS:-1}\" -v 1                'localref.fa' '/galaxy/server/database/objects/5/a/4/dataset_5a41a6c5-fc72-48a2-93f7-b1f6c90af6b0.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/e/d/6/dataset_ed63617f-ef75-4321-bf47-a1826066e15b.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "fastq_input": "{\"__current_case__\": 1, \"fastq_input1\": {\"values\": [{\"id\": 205, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 204, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "a314952ad65c0eb8", "src": "hda", "uuid": "7e8add11-51d9-4bca-9868-9a02e752e06d"}, "fastq_input1": {"id": "f85d18e870e282cb", "src": "hda", "uuid": "5a41a6c5-fc72-48a2-93f7-b1f6c90af6b0"}}, "outputs": {"bam_output": {"id": "221ec408702468e9", "src": "hda", "uuid": "ed63617f-ef75-4321-bf47-a1826066e15b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.063 sec; CPU: 0.012 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/5/a/4/dataset_5a41a6c5-fc72-48a2-93f7-b1f6c90af6b0.dat\n[main] Real time: 0.011 sec; CPU: 0.016 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.063 sec; CPU: 0.012 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/5/a/4/dataset_5a41a6c5-fc72-48a2-93f7-b1f6c90af6b0.dat\n[main] Real time: 0.011 sec; CPU: 0.016 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:58:22", "plugin": "core", "name": "end_epoch", "raw_value": "1682182702.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:58:21", "plugin": "core", "name": "start_epoch", "raw_value": "1682182701.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem", "tool_version": "0.7.17.1", "test_index": 2, "time_seconds": 166.2954339981079, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "f0cd8abc23d04ea4"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "e80845c2bc66c7dc"}, "fastq_input|fastq_input2": {"src": "hda", "id": "753c79146837c3dd"}, "fastq_input|fastq_input_selector": "paired", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "3e14017b71a2bfa2", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:00:54.288591", "create_time": "2023-04-22T16:58:45.569749", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-wvd6j", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/8/b/f/dataset_8bff24a8-d833-4b34-990a-af44c32e07e5.dat' 'localref.fa' && bwa index 'localref.fa' &&    bwa mem -t \"${GALAXY_SLOTS:-1}\" -v 1                 'localref.fa' '/galaxy/server/database/objects/0/6/0/dataset_060e38ef-0ed2-4d71-a024-1c06043f505e.dat' '/galaxy/server/database/objects/a/7/0/dataset_a70c7259-b02e-4b16-99c7-50c5f486a16b.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/6/c/1/dataset_6c149a41-3549-4ac7-995d-b1692d93ceac.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "fastq_input": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 209, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 213, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\", \"iset_stats\": null}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 211, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "f0cd8abc23d04ea4", "src": "hda", "uuid": "8bff24a8-d833-4b34-990a-af44c32e07e5"}, "fastq_input1": {"id": "e80845c2bc66c7dc", "src": "hda", "uuid": "060e38ef-0ed2-4d71-a024-1c06043f505e"}, "fastq_input2": {"id": "753c79146837c3dd", "src": "hda", "uuid": "a70c7259-b02e-4b16-99c7-50c5f486a16b"}}, "outputs": {"bam_output": {"id": "5ba63da73232e51c", "src": "hda", "uuid": "6c149a41-3549-4ac7-995d-b1692d93ceac"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.070 sec; CPU: 0.013 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/0/6/0/dataset_060e38ef-0ed2-4d71-a024-1c06043f505e.dat /galaxy/server/database/objects/a/7/0/dataset_a70c7259-b02e-4b16-99c7-50c5f486a16b.dat[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n\n[main] Real time: 0.021 sec; CPU: 0.030 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.070 sec; CPU: 0.013 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/0/6/0/dataset_060e38ef-0ed2-4d71-a024-1c06043f505e.dat /galaxy/server/database/objects/a/7/0/dataset_a70c7259-b02e-4b16-99c7-50c5f486a16b.dat[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n\n[main] Real time: 0.021 sec; CPU: 0.030 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:00:42", "plugin": "core", "name": "end_epoch", "raw_value": "1682182842.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:00:42", "plugin": "core", "name": "start_epoch", "raw_value": "1682182842.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem", "tool_version": "0.7.17.1", "test_index": 3, "time_seconds": 146.08950233459473, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "f0cd8abc23d04ea4"}, "reference_source|index_a": "is", "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "95f2598884fc3763"}, "fastq_input|fastq_input2": {"src": "hda", "id": "753c79146837c3dd"}, "fastq_input|fastq_input_selector": "paired", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|read_group_lb_conditional|LB": "AARDVARK-1", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "42c897d5e9967783", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:00:58.696740", "create_time": "2023-04-22T16:59:00.468706", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-mrqqn", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/8/b/f/dataset_8bff24a8-d833-4b34-990a-af44c32e07e5.dat' 'localref.fa' && bwa index -a is 'localref.fa' &&    bwa mem -t \"${GALAXY_SLOTS:-1}\" -v 1                            -R '@RG\\tID:rg1\\tPL:CAPILLARY\\tLB:AARDVARK-1'   'localref.fa' '/galaxy/server/database/objects/a/0/0/dataset_a00af343-83a5-4cad-a744-f5f79b3494d3.dat' '/galaxy/server/database/objects/a/7/0/dataset_a70c7259-b02e-4b16-99c7-50c5f486a16b.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/a/d/6/dataset_ad64d53f-1b2d-4450-b188-9f89b1fea0cf.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": \"AARDVARK-1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "fastq_input": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 212, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 213, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\", \"iset_stats\": null}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"is\", \"ref_file\": {\"values\": [{\"id\": 211, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "f0cd8abc23d04ea4", "src": "hda", "uuid": "8bff24a8-d833-4b34-990a-af44c32e07e5"}, "fastq_input1": {"id": "95f2598884fc3763", "src": "hda", "uuid": "a00af343-83a5-4cad-a744-f5f79b3494d3"}, "fastq_input2": {"id": "753c79146837c3dd", "src": "hda", "uuid": "a70c7259-b02e-4b16-99c7-50c5f486a16b"}}, "outputs": {"bam_output": {"id": "e5f7ee3bdb5a2087", "src": "hda", "uuid": "ad64d53f-1b2d-4450-b188-9f89b1fea0cf"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a is localref.fa\n[main] Real time: 0.053 sec; CPU: 0.012 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 -R @RG\\tID:rg1\\tPL:CAPILLARY\\tLB:AARDVARK-1 localref.fa /galaxy/server/database/objects/a/0/0/dataset_a00af343-83a5-4cad-a744-f5f79b3494d3.dat /galaxy/server/database/objects/a/7/0/dataset_a70c7259-b02e-4b16-99c7-50c5f486a16b.dat\n[main] Real time: 0.018 sec; CPU: 0.031 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a is localref.fa\n[main] Real time: 0.053 sec; CPU: 0.012 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 -R @RG\\tID:rg1\\tPL:CAPILLARY\\tLB:AARDVARK-1 localref.fa /galaxy/server/database/objects/a/0/0/dataset_a00af343-83a5-4cad-a744-f5f79b3494d3.dat /galaxy/server/database/objects/a/7/0/dataset_a70c7259-b02e-4b16-99c7-50c5f486a16b.dat\n[main] Real time: 0.018 sec; CPU: 0.031 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:00:46", "plugin": "core", "name": "end_epoch", "raw_value": "1682182846.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:00:46", "plugin": "core", "name": "start_epoch", "raw_value": "1682182846.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper", "tool_version": "1.3.2", "test_index": 0, "time_seconds": 152.65446758270264, "inputs": {"source|target": {"src": "hda", "id": "3f7a61ff1d6dea71"}, "source|ref_source": "history", "query": {"src": "hda", "id": "4fc9d5666f1fd370"}}, "job": {"model_class": "Job", "id": "70cdc5173ca69102", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:06:07.777223", "create_time": "2023-04-22T17:04:20.926125", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "history_id": "a27c58f49c315e0d", "external_id": "gxy-wlg26", "command_line": "lastz_D  '/galaxy/server/database/objects/e/c/8/dataset_ec831269-d5e2-4c3b-9818-fdd71b68fa8e.dat'    '/galaxy/server/database/objects/7/9/7/dataset_797bea04-900f-4307-8421-1fab879def5f.dat'   --inferonly '--infscores=/galaxy/server/database/objects/0/8/a/dataset_08a034c4-76de-4fff-bb82-a8b927a3fffe.dat'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "score_file": null, "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 245, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "3f7a61ff1d6dea71", "src": "hda", "uuid": "ec831269-d5e2-4c3b-9818-fdd71b68fa8e"}, "query": {"id": "4fc9d5666f1fd370", "src": "hda", "uuid": "797bea04-900f-4307-8421-1fab879def5f"}}, "outputs": {"output": {"id": "683118271fc82c6e", "src": "hda", "uuid": "08a034c4-76de-4fff-bb82-a8b927a3fffe"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:05:46", "plugin": "core", "name": "end_epoch", "raw_value": "1682183146.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:05:46", "plugin": "core", "name": "start_epoch", "raw_value": "1682183146.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper", "tool_version": "1.3.2", "test_index": 1, "time_seconds": 149.37363481521606, "inputs": {"source|target": {"src": "hda", "id": "3f7a61ff1d6dea71"}, "source|ref_source": "history", "query": {"src": "hda", "id": "4fc9d5666f1fd370"}, "score_file": {"src": "hda", "id": "c67c038157225951"}}, "job": {"model_class": "Job", "id": "f0cd8abc23d04ea4", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:06:13.576878", "create_time": "2023-04-22T17:04:31.436517", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "history_id": "a27c58f49c315e0d", "external_id": "gxy-mhcpq", "command_line": "lastz_D  '/galaxy/server/database/objects/e/c/8/dataset_ec831269-d5e2-4c3b-9818-fdd71b68fa8e.dat'    '/galaxy/server/database/objects/7/9/7/dataset_797bea04-900f-4307-8421-1fab879def5f.dat'   '--inferonly=/galaxy/server/database/objects/9/e/6/dataset_9e6cdcdd-a08d-42c5-a577-c94d8175d178.dat' '--infscores=/galaxy/server/database/objects/b/b/7/dataset_bb7b4452-d8b3-4c6d-9790-aaa3736129ff.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 245, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "3f7a61ff1d6dea71", "src": "hda", "uuid": "ec831269-d5e2-4c3b-9818-fdd71b68fa8e"}, "query": {"id": "4fc9d5666f1fd370", "src": "hda", "uuid": "797bea04-900f-4307-8421-1fab879def5f"}, "score_file": {"id": "c67c038157225951", "src": "hda", "uuid": "9e6cdcdd-a08d-42c5-a577-c94d8175d178"}}, "outputs": {"output": {"id": "99ff281783c8203f", "src": "hda", "uuid": "bb7b4452-d8b3-4c6d-9790-aaa3736129ff"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:05:50", "plugin": "core", "name": "end_epoch", "raw_value": "1682183150.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:05:50", "plugin": "core", "name": "start_epoch", "raw_value": "1682183150.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 0, "time_seconds": 19.004112243652344, "inputs": {"source|target_2bit": "phiX174", "source|ref_source": "cached", "query": {"src": "hda", "id": "b77debd9b5e94017"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "general_def"}, "execution_problem": "parameter 'target_2bit': an invalid option ('phiX174') was selected (valid options: echTel1,ce5,caeRem3,speTri2,cb3,Bombyx_mori_p50T_2.0,/cvmfs/data.galaxyproject.org/byhand/canFam2/seq/canFam2.2bit,panTro2,panTro1,13953,rn5,/cvmfs/data.galaxyproject.org/byhand/droVir1/droVir1.2bit,tarSyr1,rheMac3,bosTauMd3,eschColi_APEC_O1,micMur1,allMis1,monDom1,eschColi_EC4115,oryCun2,eschColi_CFT073,galGal4,ce7,vicPac2,278,dasNov1,venter1,12931,melUnd1,burkPseu_1106A,pseuAeru,turTru2,droYak2,/cvmfs/data.galaxyproject.org/byhand/dm3/seq/dm3.2bit,lMaj5,calJac3,eschColi_TW14359,fr2,mm10,/cvmfs/data.galaxyproject.org/byhand/equCab2/seq/equCab2.2bit,cavPor3,/cvmfs/data.galaxyproject.org/byhand/droAna2/droAna2.2bit,hg_g1k_v37,nomLeu1,259,droSim1,papHam1,equCab1,felCat5,dipOrd1,caePb2,oryza_sativa_japonica_nipponbare_IRGSP4.0,ci2,Zea_mays_B73_RefGen_v2,/cvmfs/data.galaxyproject.org/byhand/rheMac2/seq/rheMac2.2bit,dm2,/cvmfs/data.galaxyproject.org/byhand/strPur2/seq/strPur2.2bit,AgamP3,sacCer3,Xanthomonas_oryzae_PXO99A,ce4,/cvmfs/data.galaxyproject.org/byhand/ce6/seq/ce6.2bit,bosTau8,petMar1,/cvmfs/data.galaxyproject.org/byhand/mm9/seq/mm9.2bit,ce9,danRer10,caeJap2,AaegL1,bosTau6,gorGor3,otoGar1,/cvmfs/data.galaxyproject.org/byhand/bosTau4/seq/bosTau4.2bit,/cvmfs/data.galaxyproject.org/byhand/galGal3/seq/galGal3.2bit,caeRem1,ce10,baciSubt,/cvmfs/data.galaxyproject.org/byhand/droPer1/droPer1.2bit,16720,IscaW1,/cvmfs/data.galaxyproject.org/byhand/danRer5/seq/danRer5.2bit,fr1,/cvmfs/data.galaxyproject.org/byhand/droEre1/droEre1.2bit,Homo_sapiens_nuHg19_mtrCRS,/cvmfs/data.galaxyproject.org/byhand/hg19/seq/hg19.2bit,dasNov3,canFam1,/cvmfs/data.galaxyproject.org/byhand/calJac1/calJac1.2bit,rn6,ponAbe2,panTro3,/cvmfs/data.galaxyproject.org/byhand/susScr2/seq/susScr2.2bit,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/hg18.2bit,caeRem4,178,dp4,caePb1,/cvmfs/data.galaxyproject.org/byhand/droMoj1/droMoj1.2bit,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer7.2bit,triCas2,arabidopsis,oryLat1,Schizosaccharomyces_pombe_1.1,caePb3,caeRem2,rn3,dp3,aplCal1,/cvmfs/data.galaxyproject.org/byhand/felCat3/seq/felCat3.2bit,bosTau5,monDom5,/cvmfs/data.galaxyproject.org/byhand/droGri1/droGri1.2bit,gadMor1,/cvmfs/data.galaxyproject.org/byhand/rn4/seq/rn4.2bit,tupBel1,xenTro1,Arabidopsis_thaliana_TAIR10,Homo_sapiens_AK1,bosTau2,eschColi_O157H7,susScr1,Ptrichocarpa_156,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer6.2bit,apiMel4,ce2,/cvmfs/data.galaxyproject.org/byhand/sacCer2/seq/sacCer2,Hydra_JCVI,/cvmfs/data.galaxyproject.org/byhand/droEre2/droEre2.2bit,/cvmfs/data.galaxyproject.org/byhand/droMoj2/droMoj2.2bit,/cvmfs/data.galaxyproject.org/byhand/Sscrofa9.58/seq/Sscrofa9.58.2bit,16297,PhumU1,Amel_4.5,oviAri1,13954,caeJap4,panTro4,danRer4,/cvmfs/data.galaxyproject.org/byhand/droAna1/droAna1.2bit,bosTau3,apiMel1,vicPac1,hg38,bosTau7,musFur1,20079,nomLeu3,eriEur1,saiBol1,27835,dm6,/cvmfs/data.galaxyproject.org/byhand/droMoj3/droMoj3.2bit,/cvmfs/data.galaxyproject.org/byhand/droVir3/droVir3.2bit,ailMel1,Tcas_3.0,droWil1,monDom4,ce3,ente638,nomLeu2,/cvmfs/data.galaxyproject.org/byhand/phiX/seq/phiX.2bit,/cvmfs/data.galaxyproject.org/byhand/anoCar1/anoCar1.2bit,/cvmfs/data.galaxyproject.org/byhand/ornAna1/seq/ornAna1.2bit,oryCun1,Araly1,hg17,galGal2,/cvmfs/data.galaxyproject.org/byhand/xenTro2/seq/xenTro2.2bit,ce8,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/chr21.2bit,borEut13,Spur_v2.6,tetNig2,otoGar3,/cvmfs/data.galaxyproject.org/byhand/apiMel2/apiMel2.2bit,priPac1,hg19_rCRS_pUC18_phiX174,tetNig1,gasAcu1,panPan1,bordBron,CHM13_T2T_v2.0,caeJap1,/cvmfs/data.galaxyproject.org/byhand/droAna3/droAna3.2bit,/cvmfs/data.galaxyproject.org/byhand/droGri2/droGri2.2bit,cerSim1,/cvmfs/data.galaxyproject.org/byhand/apiMel3/seq/apiMel3.2bit,strPur3,papAnu2,/cvmfs/data.galaxyproject.org/byhand/droVir2/droVir2.2bit,loxAfr1,/cvmfs/data.galaxyproject.org/byhand/mm8/seq/mm8.2bit,sacCer1,anoCar2,/cvmfs/data.galaxyproject.org/byhand/droSec1/droSec1.2bit,loxAfr3,felCat8,caeJap3,myoLuc2,eschColi_K12,sorAra1,braFlo1,aptMan1,386,/cvmfs/data.galaxyproject.org/byhand/anoGam1/anoGam1.2bit,chrPic1,droYak1,CpipJ1,/cvmfs/data.galaxyproject.org/byhand/taeGut1/seq/taeGut1.2bit,felCat4,16351,oryLat2)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 1, "time_seconds": 154.47926330566406, "inputs": {"source|target": {"src": "hda", "id": "5e7841a0163cbff5"}, "source|ref_source": "history", "query": {"src": "hda", "id": "e9c55574bb21e836"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "general_def"}, "job": {"model_class": "Job", "id": "9fcfe9d256c1d4cc", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:03:33.399276", "create_time": "2023-04-22T17:01:27.394361", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "a27c58f49c315e0d", "external_id": "gxy-qww2s", "command_line": "lastz  '/galaxy/server/database/objects/c/8/9/dataset_c89dc6c2-0f9e-4c2d-9664-166c8233d475.dat'    '/galaxy/server/database/objects/3/9/6/dataset_396dea03-5f64-41dd-896b-e035602b0bd9.dat'     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=general- --action:target=multiple  > '/galaxy/server/database/objects/8/8/9/dataset_88938e69-7ff6-4974-81bf-3abdc3ffd6af.dat'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 1, \"format\": \"general_def\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 228, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "5e7841a0163cbff5", "src": "hda", "uuid": "c89dc6c2-0f9e-4c2d-9664-166c8233d475"}, "query": {"id": "e9c55574bb21e836", "src": "hda", "uuid": "396dea03-5f64-41dd-896b-e035602b0bd9"}}, "outputs": {"output": {"id": "a29d09de638cdad3", "src": "hda", "uuid": "88938e69-7ff6-4974-81bf-3abdc3ffd6af"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:03:14", "plugin": "core", "name": "end_epoch", "raw_value": "1682182994.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:03:14", "plugin": "core", "name": "start_epoch", "raw_value": "1682182994.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 2, "time_seconds": 139.50854444503784, "inputs": {"source|target": {"src": "hda", "id": "5e7841a0163cbff5"}, "source|ref_source": "history", "query": {"src": "hda", "id": "e9c55574bb21e836"}, "where_to_look|strand": "--strand=both", "scoring|score_file": {"src": "hda", "id": "534d6cd176f2ee86"}, "output_format|out|format": "general_def"}, "job": {"model_class": "Job", "id": "b83510bc2d8daf65", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:03:32.973466", "create_time": "2023-04-22T17:01:49.308400", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "a27c58f49c315e0d", "external_id": "gxy-mwfs4", "command_line": "lastz  '/galaxy/server/database/objects/c/8/9/dataset_c89dc6c2-0f9e-4c2d-9664-166c8233d475.dat'    '/galaxy/server/database/objects/3/9/6/dataset_396dea03-5f64-41dd-896b-e035602b0bd9.dat'     '--strand=both'     '--scores=/galaxy/server/database/objects/1/8/3/dataset_183ad4a1-1b34-4fc9-a19b-d4fe981d2988.dat'  '--ambiguous=iupac'               --traceback=160M    --format=general- --action:target=multiple  > '/galaxy/server/database/objects/e/0/d/dataset_e0d0aeea-dbea-43b1-89d1-f3d9e9f80cfa.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 1, \"format\": \"general_def\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": {\"values\": [{\"id\": 230, \"src\": \"hda\"}]}}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 228, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "5e7841a0163cbff5", "src": "hda", "uuid": "c89dc6c2-0f9e-4c2d-9664-166c8233d475"}, "query": {"id": "e9c55574bb21e836", "src": "hda", "uuid": "396dea03-5f64-41dd-896b-e035602b0bd9"}, "score_file": {"id": "534d6cd176f2ee86", "src": "hda", "uuid": "183ad4a1-1b34-4fc9-a19b-d4fe981d2988"}}, "outputs": {"output": {"id": "7dfb4b8dee779954", "src": "hda", "uuid": "e0d0aeea-dbea-43b1-89d1-f3d9e9f80cfa"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:03:18", "plugin": "core", "name": "end_epoch", "raw_value": "1682182998.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:03:17", "plugin": "core", "name": "start_epoch", "raw_value": "1682182997.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 3, "time_seconds": 135.92135334014893, "inputs": {"source|target": {"src": "hda", "id": "95785acf66ab60ba"}, "source|ref_source": "history", "query": {"src": "hda", "id": "59279452ee7bafe9"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "6a2d72eb71216b4f", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:03:35.104775", "create_time": "2023-04-22T17:02:01.286190", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "a27c58f49c315e0d", "external_id": "gxy-88lf4", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/8/a/6/dataset_8a6c2c99-bb3f-4a5e-8328-6a99ed740df4.dat')    <(gunzip -c '/galaxy/server/database/objects/5/c/2/dataset_5c24fa6e-0bb2-463a-affa-3be1d9a47e9b.dat')     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/1/6/d/dataset_16d16f51-40bf-42e8-815d-721e1e1ad48a.dat'", "traceback": null, "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 231, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "95785acf66ab60ba", "src": "hda", "uuid": "8a6c2c99-bb3f-4a5e-8328-6a99ed740df4"}, "query": {"id": "59279452ee7bafe9", "src": "hda", "uuid": "5c24fa6e-0bb2-463a-affa-3be1d9a47e9b"}}, "outputs": {"output": {"id": "95edaf4be3a79d1c", "src": "hda", "uuid": "16d16f51-40bf-42e8-815d-721e1e1ad48a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:03:20", "plugin": "core", "name": "end_epoch", "raw_value": "1682183000.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:03:20", "plugin": "core", "name": "start_epoch", "raw_value": "1682183000.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 4, "time_seconds": 130.76908206939697, "inputs": {"source|target": {"src": "hda", "id": "59279452ee7bafe9"}, "source|ref_source": "history", "query": {"src": "hda", "id": "edda1f87870b723b"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "bd07161e52aad27e", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:03:44.097351", "create_time": "2023-04-22T17:02:05.403323", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "a27c58f49c315e0d", "external_id": "gxy-r79nz", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/5/c/2/dataset_5c24fa6e-0bb2-463a-affa-3be1d9a47e9b.dat')    <(bunzip2 -c '/galaxy/server/database/objects/4/a/d/dataset_4ad8585d-f3e5-450d-a4ed-880d44eaa678.dat')     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/7/3/2/dataset_7321a4c0-eed6-41b0-93f0-e1ce82785f2e.dat'", "traceback": null, "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 234, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "59279452ee7bafe9", "src": "hda", "uuid": "5c24fa6e-0bb2-463a-affa-3be1d9a47e9b"}, "query": {"id": "edda1f87870b723b", "src": "hda", "uuid": "4ad8585d-f3e5-450d-a4ed-880d44eaa678"}}, "outputs": {"output": {"id": "a503dd4e05139bfd", "src": "hda", "uuid": "7321a4c0-eed6-41b0-93f0-e1ce82785f2e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:03:26", "plugin": "core", "name": "end_epoch", "raw_value": "1682183006.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:03:26", "plugin": "core", "name": "start_epoch", "raw_value": "1682183006.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 5, "time_seconds": 136.44068312644958, "inputs": {"source|target": {"src": "hda", "id": "a6dad5435fa20ffe"}, "source|ref_source": "history", "query": {"src": "hda", "id": "3944bc804319e8e6"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "b1f2222ccd8b0543", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:05:49.773627", "create_time": "2023-04-22T17:03:58.444341", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "a27c58f49c315e0d", "external_id": "gxy-wsvth", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/8/c/2/dataset_8c2b7864-68cc-4c6b-8125-e12291e9426a.dat')    <(gunzip -c '/galaxy/server/database/objects/3/7/8/dataset_378afa39-42a5-41d2-bf67-bbc3cbde4649.dat')     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/4/1/1/dataset_41192a96-d9bd-4405-a811-6d0e77926c49.dat'", "traceback": null, "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 241, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "a6dad5435fa20ffe", "src": "hda", "uuid": "8c2b7864-68cc-4c6b-8125-e12291e9426a"}, "query": {"id": "3944bc804319e8e6", "src": "hda", "uuid": "378afa39-42a5-41d2-bf67-bbc3cbde4649"}}, "outputs": {"output": {"id": "66022c2bfae6bbc3", "src": "hda", "uuid": "41192a96-d9bd-4405-a811-6d0e77926c49"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:05:39", "plugin": "core", "name": "end_epoch", "raw_value": "1682183139.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:05:39", "plugin": "core", "name": "start_epoch", "raw_value": "1682183139.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 6, "time_seconds": 144.00624656677246, "inputs": {"source|target": {"src": "hda", "id": "a6dad5435fa20ffe"}, "source|ref_source": "history", "query": {"src": "hda", "id": "1af992e352353e2f"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "e80845c2bc66c7dc", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:05:57.286478", "create_time": "2023-04-22T17:04:00.335038", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "a27c58f49c315e0d", "external_id": "gxy-pqpds", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/8/c/2/dataset_8c2b7864-68cc-4c6b-8125-e12291e9426a.dat')    '/galaxy/server/database/objects/d/c/6/dataset_dc661267-4978-422b-8699-cbff99d8397a.dat'     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/7/2/a/dataset_72a3eb7d-1a42-459a-9449-2b058806391e.dat'", "traceback": null, "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 241, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "a6dad5435fa20ffe", "src": "hda", "uuid": "8c2b7864-68cc-4c6b-8125-e12291e9426a"}, "query": {"id": "1af992e352353e2f", "src": "hda", "uuid": "dc661267-4978-422b-8699-cbff99d8397a"}}, "outputs": {"output": {"id": "cfae9a3da10bb2fc", "src": "hda", "uuid": "72a3eb7d-1a42-459a-9449-2b058806391e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:05:43", "plugin": "core", "name": "end_epoch", "raw_value": "1682183143.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:05:42", "plugin": "core", "name": "start_epoch", "raw_value": "1682183142.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth", "tool_version": "0.2.2", "test_index": 0, "time_seconds": 162.0665910243988, "inputs": {"referenceSource|reference": {"src": "hda", "id": "bc94609cb0a6b214"}, "single_or_paired|input_mate1": {"src": "hda", "id": "34c93d0f2cd8ec67"}, "single_or_paired|input_mate2": {"src": "hda", "id": "9ead4c202ad670a0"}, "single_or_paired|single_or_paired_opts": "paired"}, "job": {"model_class": "Job", "id": "b054849568689ea1", "state": "error", "exit_code": 1, "update_time": "2023-04-22T17:01:19.271437", "create_time": "2023-04-22T16:59:21.714830", "galaxy_version": "21.09", "command_version": "bwa-meth.py 0.2.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "history_id": "a27c58f49c315e0d", "external_id": "gxy-jn288", "command_line": "mkdir index_dir && ln -s '/galaxy/server/database/objects/1/c/7/dataset_1c789d18-ac8b-41a0-b99c-d0e627db1eec.dat' index_dir/genome.fa && bwameth.py index index_dir/genome.fa &&  ln -f -s '/galaxy/server/database/objects/d/6/a/dataset_d6a702b1-16ca-48a4-b789-edc559484955.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/d/6/0/dataset_d60208e0-bb2b-4ff1-9931-4da53c6bfc4e.dat' input_r.fastq.gz &&  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference 'index_dir/genome.fa'   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "readGroup": "\"\"", "single_or_paired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 218, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 219, \"src\": \"hda\"}]}, \"single_or_paired_opts\": \"paired\"}", "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 217, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference": {"id": "bc94609cb0a6b214", "src": "hda", "uuid": "1c789d18-ac8b-41a0-b99c-d0e627db1eec"}, "input_mate1": {"id": "34c93d0f2cd8ec67", "src": "hda", "uuid": "d6a702b1-16ca-48a4-b789-edc559484955"}, "input_mate2": {"id": "9ead4c202ad670a0", "src": "hda", "uuid": "d60208e0-bb2b-4ff1-9931-4da53c6bfc4e"}}, "outputs": {"output": {"id": "a610d0e82907b0e7", "src": "hda", "uuid": "e79fee57-6d92-41b8-89a3-487e18a0ce1f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "converting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nTraceback (most recent call last):\n  File \"/usr/local/bin/bwameth.py\", line 509, in <module>\n    main(sys.argv[1:])\n  File \"/usr/local/bin/bwameth.py\", line 470, in main\n    sys.exit(bwa_index(convert_fasta(args[1])))\n  File \"/usr/local/bin/bwameth.py\", line 179, in convert_fasta\n    for header, seq in fasta_iter(ref_fasta):\n  File \"/usr/local/bin/bwameth.py\", line 91, in fasta_iter\n    for header in faiter:\n  File \"/usr/local/bin/bwameth.py\", line 90, in <genexpr>\n    faiter = (x[1] for x in groupby(fh, lambda line: line[0] == \">\"))\n  File \"/usr/local/lib/python3.8/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x8b in position 1: invalid start byte\n", "job_stdout": "", "job_stderr": "", "stderr": "converting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nTraceback (most recent call last):\n  File \"/usr/local/bin/bwameth.py\", line 509, in <module>\n    main(sys.argv[1:])\n  File \"/usr/local/bin/bwameth.py\", line 470, in main\n    sys.exit(bwa_index(convert_fasta(args[1])))\n  File \"/usr/local/bin/bwameth.py\", line 179, in convert_fasta\n    for header, seq in fasta_iter(ref_fasta):\n  File \"/usr/local/bin/bwameth.py\", line 91, in fasta_iter\n    for header in faiter:\n  File \"/usr/local/bin/bwameth.py\", line 90, in <genexpr>\n    faiter = (x[1] for x in groupby(fh, lambda line: line[0] == \">\"))\n  File \"/usr/local/lib/python3.8/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x8b in position 1: invalid start byte\n", "stdout": "", "job_messages": [{"code_desc": "", "desc": "Fatal error: Exit code 1 ()", "error_level": 3, "exit_code": 1, "type": "exit_code"}, {"code_desc": "", "desc": "Fatal error: ", "error_level": 3, "match": "Error:", "stream": "stderr", "type": "regex"}], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:00:59", "plugin": "core", "name": "end_epoch", "raw_value": "1682182859.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:00:58", "plugin": "core", "name": "start_epoch", "raw_value": "1682182858.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2, exit_code: 1, stderr: converting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nTraceback (most recent call last):\n  File \"/usr/local/bin/bwameth.py\", line 509, in <module>\n    main(sys.argv[1:])\n  File \"/usr/local/bin/bwameth.py\", line 470, in main\n    sys.exit(bwa_index(convert_fasta(args[1])))\n  File \"/usr/local/bin/bwameth.py\", line 179, in convert_fasta\n    for header, seq in fasta_iter(ref_fasta):\n  File \"/usr/local/bin/bwameth.py\", line 91, in fasta_iter\n    for header in faiter:\n  File \"/usr/local/bin/bwameth.py\", line 90, in <genexpr>\n    faiter = (x[1] for x in groupby(fh, lambda line: line[0] == \">\"))\n  File \"/usr/local/lib/python3.8/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x8b in position 1: invalid start byte\n.", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2, exit_code: 1, stderr: converting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nTraceback (most recent call last):\n  File \"/usr/local/bin/bwameth.py\", line 509, in <module>\n    main(sys.argv[1:])\n  File \"/usr/local/bin/bwameth.py\", line 470, in main\n    sys.exit(bwa_index(convert_fasta(args[1])))\n  File \"/usr/local/bin/bwameth.py\", line 179, in convert_fasta\n    for header, seq in fasta_iter(ref_fasta):\n  File \"/usr/local/bin/bwameth.py\", line 91, in fasta_iter\n    for header in faiter:\n  File \"/usr/local/bin/bwameth.py\", line 90, in <genexpr>\n    faiter = (x[1] for x in groupby(fh, lambda line: line[0] == \">\"))\n  File \"/usr/local/lib/python3.8/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x8b in position 1: invalid start byte\n."], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth", "tool_version": "0.2.2", "test_index": 1, "time_seconds": 174.01486563682556, "inputs": {"referenceSource|reference": {"src": "hda", "id": "bc94609cb0a6b214"}, "single_or_paired|input_mate1": {"src": "hdca", "id": "7689d9a9808d8436"}, "single_or_paired|single_or_paired_opts": "paired_collection"}, "job": {"model_class": "Job", "id": "5dc9f7b51e7cfbac", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:01:33.382772", "create_time": "2023-04-22T16:59:34.094673", "galaxy_version": "21.09", "command_version": "bwa-meth.py 0.2.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "history_id": "a27c58f49c315e0d", "external_id": "gxy-cm69q", "command_line": "mkdir index_dir && ln -s '/galaxy/server/database/objects/e/f/2/dataset_ef2b95c7-45a2-4ff9-8895-8487c22a62df.dat' index_dir/genome.fa && bwameth.py index index_dir/genome.fa &&  ln -s '/galaxy/server/database/objects/d/6/a/dataset_d6a702b1-16ca-48a4-b789-edc559484955.dat' input_f.fastq.gz &&  ln -s '/galaxy/server/database/objects/d/6/0/dataset_d60208e0-bb2b-4ff1-9931-4da53c6bfc4e.dat' input_r.fastq.gz &&  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference 'index_dir/genome.fa'   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "readGroup": "\"\"", "single_or_paired": "{\"__current_case__\": 2, \"input_mate1\": {\"values\": [{\"id\": 3, \"src\": \"hdca\"}]}, \"single_or_paired_opts\": \"paired_collection\"}", "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 223, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference": {"id": "538ea2b955c8d755", "src": "hda", "uuid": "ef2b95c7-45a2-4ff9-8895-8487c22a62df"}, "input_mate11": {"id": "34c93d0f2cd8ec67", "src": "hda", "uuid": "d6a702b1-16ca-48a4-b789-edc559484955"}, "input_mate12": {"id": "9ead4c202ad670a0", "src": "hda", "uuid": "d60208e0-bb2b-4ff1-9931-4da53c6bfc4e"}}, "outputs": {"output": {"id": "43be7d0167277740", "src": "hda", "uuid": "8e6eaa72-94c6-4cf2-950b-06689a580068"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.82 seconds elapse.\n[bwa_index] Update BWT... 0.02 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.23 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.207 sec; CPU: 1.096 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.029 CPU sec, 0.015 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.121 sec; CPU: 0.038 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.82 seconds elapse.\n[bwa_index] Update BWT... 0.02 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.23 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.207 sec; CPU: 1.096 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.029 CPU sec, 0.015 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.121 sec; CPU: 0.038 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:01:11", "plugin": "core", "name": "end_epoch", "raw_value": "1682182871.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:01:09", "plugin": "core", "name": "start_epoch", "raw_value": "1682182869.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_7p_twpir.sam v. /tmp/history_bam_converted_to_sam_3gy75myt.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,9 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:chrREF\tLN:900000\n @RG\tID:input_\tSM:input_\n-@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.0\tCL:\"/usr/users/ga002/soranzon/miniconda3/envs/__bwameth@0.2.0/bin/bwameth.py -t 1 --reference index_dir/genome.fa input_f.fastq input_r.fastq\"\n+@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.2\tCL:\"/usr/local/bin/bwameth.py -t 2 --reference index_dir/genome.fa input_f.fastq.gz input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bwa-meth\tVN:1.10\tCL:samtools view -u -\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.10\tCL:samtools sort -@ 2 -T /galaxy/server/database/jobs_directory/000/184/tmp -O bam -o output.bam -\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t163\tchrREF\t26002\t60\t101M\t=\t26025\t124\tCAAAATATATCAATCAAAAAAACATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACA\tBBBFFFFFFFFFFIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIFIFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFBFFF\tNM:i:1\tMD:Z:50C50\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:GA\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t83\tchrREF\t26025\t60\t101M\t=\t26002\t-124\tATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACATAATTTCAAAAAAATCAAACACC\tB0''B<<<00FB7<000'BBB0B<0FFFFFFFFFFFFFFFFFBFFB<7FFIFFFBBB<FFB<<7FFIFFFFFBBFF<IIIIIFFBIIFFFFFFBFFFFBBB\tNM:i:1\tMD:Z:27C73\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:CT\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:6662:24968\t99\tchrREF\t26991\t60\t101M\t=\t26992\t102\tAGGTGTCGTTTAATTGTTTAGGTTTATGGTATTGTGTTTCGTTTTTTTGGTATTTGTGAGGGTAGAATTGTTTTTGGGTTTTAATTTTTTTAAGTATGGGA\tBBBFFFFFFFFFFIIBFFIFBBFFFFIB<FFFI<FBFFFFBFFIIIII77BFFIIBFBFBBBFBBFFFF<BBFFF'07BBBBFFFFFFFFFFB0<BF####\tNM:i:0\tMD:Z:101\tMC:Z:101M\tAS:i:101\tXS:i:19\tRG:Z:input_\tYC:Z:CT\tYD:Z:f\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 123.98827695846558, "inputs": {"reads": {"src": "hda", "id": "0407cbc85bcc1b94"}, "reference_source|ref": {"src": "hda", "id": "54579a97e1759751"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "358a4ce87f38e846", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:27:18.094487", "create_time": "2023-04-22T17:25:36.726953", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-mr755", "command_line": "ln -s '/galaxy/server/database/objects/5/a/3/dataset_5a3ab959-2667-4419-a177-8ae7aeb42e5c.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b    '/galaxy/server/database/objects/f/b/c/dataset_fbc9a77b-94bc-45a8-b1d9-de6e4abfadc3.dat' 'reference.fa' > '/galaxy/server/database/objects/0/f/8/dataset_0f867011-0992-4800-93af-4489f7de2507.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 374, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "0407cbc85bcc1b94", "src": "hda", "uuid": "fbc9a77b-94bc-45a8-b1d9-de6e4abfadc3"}, "ref": {"id": "54579a97e1759751", "src": "hda", "uuid": "5a3ab959-2667-4419-a177-8ae7aeb42e5c"}}, "outputs": {"output": {"id": "9f70853a74716fa1", "src": "hda", "uuid": "0f867011-0992-4800-93af-4489f7de2507"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:27:01", "plugin": "core", "name": "end_epoch", "raw_value": "1682184421.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:27:00", "plugin": "core", "name": "start_epoch", "raw_value": "1682184420.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmp_rri2acwalnqual-out1.bam v. /tmp/tmpu479873zalnqual-out1.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 117.37926602363586, "inputs": {"reads": {"src": "hda", "id": "a2b824f74b558b42"}, "reference_source|ref": {"src": "hda", "id": "c7652311e5eb84b4"}, "reference_source|ref_selector": "history", "alnqual_choice|alnquals_to_use": "-B"}, "job": {"model_class": "Job", "id": "2440fef97c9a688c", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:27:45.687877", "create_time": "2023-04-22T17:26:03.049038", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-vbdmt", "command_line": "ln -s '/galaxy/server/database/objects/c/d/8/dataset_cd8b95cd-2776-4390-87c4-0c6c83a62759.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b  -B  '/galaxy/server/database/objects/e/f/0/dataset_ef09f858-ab60-43a9-9a09-83dfee0ec0b6.dat' 'reference.fa' > '/galaxy/server/database/objects/e/b/0/dataset_eb0314f5-ef08-4696-8efd-999443d3800a.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 0, \"alnquals_to_use\": \"-B\", \"extended_baq\": \"\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 379, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "a2b824f74b558b42", "src": "hda", "uuid": "ef09f858-ab60-43a9-9a09-83dfee0ec0b6"}, "ref": {"id": "c7652311e5eb84b4", "src": "hda", "uuid": "cd8b95cd-2776-4390-87c4-0c6c83a62759"}}, "outputs": {"output": {"id": "c90f01b00adb8876", "src": "hda", "uuid": "eb0314f5-ef08-4696-8efd-999443d3800a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:27:26", "plugin": "core", "name": "end_epoch", "raw_value": "1682184446.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:27:26", "plugin": "core", "name": "start_epoch", "raw_value": "1682184446.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmpug6oytv0alnqual-out2.bam v. /tmp/tmp7w930kusalnqual-out2.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 2, "time_seconds": 142.26860117912292, "inputs": {"reads": {"src": "hda", "id": "b5aa13b1651fe871"}, "reference_source|ref": {"src": "hda", "id": "746e713a35430965"}, "reference_source|ref_selector": "history", "alnqual_choice|alnquals_to_use": "-A"}, "job": {"model_class": "Job", "id": "b9abf339b5d088e9", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:29:27.636775", "create_time": "2023-04-22T17:27:30.852008", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-vz9dd", "command_line": "ln -s '/galaxy/server/database/objects/4/a/0/dataset_4a0eb48d-12af-4228-9c79-aedc08ae012a.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b  -A  '/galaxy/server/database/objects/6/b/4/dataset_6b41b4d6-206e-4cf8-a1c3-aeb0e8e1893d.dat' 'reference.fa' > '/galaxy/server/database/objects/6/7/7/dataset_6772839c-d697-4cc2-89f7-90a203fc8e07.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 2, \"alnquals_to_use\": \"-A\", \"extended_baq\": \"true\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 386, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "b5aa13b1651fe871", "src": "hda", "uuid": "6b41b4d6-206e-4cf8-a1c3-aeb0e8e1893d"}, "ref": {"id": "746e713a35430965", "src": "hda", "uuid": "4a0eb48d-12af-4228-9c79-aedc08ae012a"}}, "outputs": {"output": {"id": "5efa0debccb4290d", "src": "hda", "uuid": "6772839c-d697-4cc2-89f7-90a203fc8e07"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:29:16", "plugin": "core", "name": "end_epoch", "raw_value": "1682184556.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:29:16", "plugin": "core", "name": "start_epoch", "raw_value": "1682184556.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmpusuancfyalnqual-out3.bam v. /tmp/tmpl_sfjscsalnqual-out3.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 3, "time_seconds": 129.42079615592957, "inputs": {"reads": {"src": "hda", "id": "b5aa13b1651fe871"}, "reference_source|ref": {"src": "hda", "id": "746e713a35430965"}, "reference_source|ref_selector": "history", "alnqual_choice|extended_baq": false}, "job": {"model_class": "Job", "id": "de91ccbec49b7768", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:29:20.158996", "create_time": "2023-04-22T17:27:42.256743", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-bq8zm", "command_line": "ln -s '/galaxy/server/database/objects/4/a/0/dataset_4a0eb48d-12af-4228-9c79-aedc08ae012a.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b -e   '/galaxy/server/database/objects/6/b/4/dataset_6b41b4d6-206e-4cf8-a1c3-aeb0e8e1893d.dat' 'reference.fa' > '/galaxy/server/database/objects/c/1/c/dataset_c1c4802f-5e68-401d-81d6-f586a871cb9d.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"false\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 386, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "b5aa13b1651fe871", "src": "hda", "uuid": "6b41b4d6-206e-4cf8-a1c3-aeb0e8e1893d"}, "ref": {"id": "746e713a35430965", "src": "hda", "uuid": "4a0eb48d-12af-4228-9c79-aedc08ae012a"}}, "outputs": {"output": {"id": "72cad5a404f1810a", "src": "hda", "uuid": "c1c4802f-5e68-401d-81d6-f586a871cb9d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:29:08", "plugin": "core", "name": "end_epoch", "raw_value": "1682184548.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:29:08", "plugin": "core", "name": "start_epoch", "raw_value": "1682184548.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmp5jnm82iyalnqual-out4.bam v. /tmp/tmpkqxqsustalnqual-out4.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 4, "time_seconds": 126.49124670028687, "inputs": {"reads": {"src": "hda", "id": "b5aa13b1651fe871"}, "reference_source|ref": {"src": "hda", "id": "746e713a35430965"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "6a35acdce7d7ed84", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:29:24.842897", "create_time": "2023-04-22T17:27:50.948540", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-ttvwr", "command_line": "ln -s '/galaxy/server/database/objects/4/a/0/dataset_4a0eb48d-12af-4228-9c79-aedc08ae012a.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b    '/galaxy/server/database/objects/6/b/4/dataset_6b41b4d6-206e-4cf8-a1c3-aeb0e8e1893d.dat' 'reference.fa' > '/galaxy/server/database/objects/2/8/5/dataset_285e82a0-792e-4e36-903a-560a95bcf64f.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 386, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "b5aa13b1651fe871", "src": "hda", "uuid": "6b41b4d6-206e-4cf8-a1c3-aeb0e8e1893d"}, "ref": {"id": "746e713a35430965", "src": "hda", "uuid": "4a0eb48d-12af-4228-9c79-aedc08ae012a"}}, "outputs": {"output": {"id": "b50d8594cbf5f49a", "src": "hda", "uuid": "285e82a0-792e-4e36-903a-560a95bcf64f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:29:13", "plugin": "core", "name": "end_epoch", "raw_value": "1682184553.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:29:13", "plugin": "core", "name": "start_epoch", "raw_value": "1682184553.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmpxj1s_ddxalnqual-out5.bam v. /tmp/tmpvi7uhn6nalnqual-out5.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 0, "time_seconds": 135.66315627098083, "inputs": {"reads": {"src": "hda", "id": "3a753889b85b7e00"}, "reference_source|ref": {"src": "hda", "id": "39cd895ef0ff6be1"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "a1ab189f55515dd8", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:21:01.011375", "create_time": "2023-04-22T17:19:09.381175", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-cxmnk", "command_line": "ln -s '/galaxy/server/database/objects/0/1/d/dataset_01dbd4d1-2ee7-4cee-94bd-91a01a55a57f.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/a/2/4/dataset_a240044f-a4bf-45aa-b205-8c4d25a741d2.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/c/9/5/metadata_c95d8704-d0b2-4b70-8e1b-3358360f63c9.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf    --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 342, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "3a753889b85b7e00", "src": "hda", "uuid": "a240044f-a4bf-45aa-b205-8c4d25a741d2"}, "ref": {"id": "39cd895ef0ff6be1", "src": "hda", "uuid": "01dbd4d1-2ee7-4cee-94bd-91a01a55a57f"}}, "outputs": {"variants": {"id": "11b2cf8ce58296f3", "src": "hda", "uuid": "48016c0d-09fc-4669-bd90-c323744d6248"}}, "output_collections": {}, "tool_stdout": "INFO [2023-04-22 17:20:38,047]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2023-04-22 17:20:38,060]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2023-04-22 17:20:40,912]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/266/tmp/lofreq2_call_paralleloib5izyf/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2023-04-22 17:20:38,047]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2023-04-22 17:20:38,060]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2023-04-22 17:20:40,912]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/266/tmp/lofreq2_call_paralleloib5izyf/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:20:40", "plugin": "core", "name": "end_epoch", "raw_value": "1682184040.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:20:37", "plugin": "core", "name": "start_epoch", "raw_value": "1682184037.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 1, "time_seconds": 135.0879180431366, "inputs": {"reads": {"src": "hda", "id": "3a753889b85b7e00"}, "reference_source|ref": {"src": "hda", "id": "39cd895ef0ff6be1"}, "reference_source|ref_selector": "history", "call_control|set_call_options": "yes"}, "job": {"model_class": "Job", "id": "261569c18122d94a", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:21:01.294803", "create_time": "2023-04-22T17:19:11.091323", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-54d78", "command_line": "ln -s '/galaxy/server/database/objects/0/1/d/dataset_01dbd4d1-2ee7-4cee-94bd-91a01a55a57f.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/a/2/4/dataset_a240044f-a4bf-45aa-b205-8c4d25a741d2.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/c/9/5/metadata_c95d8704-d0b2-4b70-8e1b-3358360f63c9.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf   --min-cov 1 --max-depth 1000000  --min-bq 6 --min-alt-bq 6    --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0  --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 1, \"align_quals\": {\"alnqual\": {\"__current_case__\": 0, \"alnqual_choice\": {\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}, \"use_alnqual\": \"\"}}, \"bc_quals\": {\"alt_bq\": {\"__current_case__\": 0, \"modify\": \"\"}, \"min_alt_bq\": \"6\", \"min_bq\": \"6\"}, \"coverage\": {\"max_depth\": \"1000000\", \"min_cov\": \"1\"}, \"joint_qual\": {\"def_alt_jq\": \"0\", \"min_alt_jq\": \"0\", \"min_jq\": \"0\"}, \"map_quals\": {\"min_mq\": \"0\", \"use_mq\": {\"__current_case__\": 0, \"max_mq\": \"255\", \"no_mq\": \"\"}}, \"pe\": {\"use_orphan\": \"false\"}, \"set_call_options\": \"yes\", \"source_qual\": {\"use_src_qual\": {\"__current_case__\": 0, \"src_qual\": \"\"}}}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 342, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "3a753889b85b7e00", "src": "hda", "uuid": "a240044f-a4bf-45aa-b205-8c4d25a741d2"}, "ref": {"id": "39cd895ef0ff6be1", "src": "hda", "uuid": "01dbd4d1-2ee7-4cee-94bd-91a01a55a57f"}}, "outputs": {"variants": {"id": "694d34d6cbd7fb78", "src": "hda", "uuid": "c2e30ae3-7b99-4c9b-a119-2d456322d88e"}}, "output_collections": {}, "tool_stdout": "INFO [2023-04-22 17:20:37,908]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2023-04-22 17:20:37,924]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2023-04-22 17:20:40,767]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/267/tmp/lofreq2_call_parallel73w6gl6s/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2023-04-22 17:20:37,908]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2023-04-22 17:20:37,924]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2023-04-22 17:20:40,767]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/267/tmp/lofreq2_call_parallel73w6gl6s/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:20:40", "plugin": "core", "name": "end_epoch", "raw_value": "1682184040.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:20:37", "plugin": "core", "name": "start_epoch", "raw_value": "1682184037.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 2, "time_seconds": 128.14886713027954, "inputs": {"reads": {"src": "hda", "id": "359b591f4aff2409"}, "reference_source|ref": {"src": "hda", "id": "b16de8f0a22c9208"}, "reference_source|ref_selector": "history", "call_control|source_qual|use_src_qual|def_nm_q": "40", "call_control|source_qual|use_src_qual|ign_vcf": {"src": "hda", "id": "610d88c285704b8c"}, "call_control|source_qual|use_src_qual|src_qual": "--src-qual", "call_control|set_call_options": "yes"}, "job": {"model_class": "Job", "id": "925757eae3c7a63b", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:22:10.641529", "create_time": "2023-04-22T17:20:28.813791", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-6q4vt", "command_line": "ln -s '/galaxy/server/database/objects/5/3/2/dataset_53232d62-52b7-4cb4-b698-ebad27dae263.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/5/7/a/dataset_57aeea8a-9fd2-4fc2-95dd-603dcdcb47e0.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/a/4/f/metadata_a4ff1450-8bbc-4433-8641-2222efe42b4c.dat' reads.bam.bai && ln -s '/galaxy/server/database/objects/d/c/a/dataset_dca82b29-222c-4841-b48f-418f6bd9d4bb.dat' ign0.vcf &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf   --min-cov 1 --max-depth 1000000  --min-bq 6 --min-alt-bq 6    --min-mq 0 --max-mq 255 --src-qual --ign-vcf 'ign0.vcf' --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0  --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 1, \"align_quals\": {\"alnqual\": {\"__current_case__\": 0, \"alnqual_choice\": {\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}, \"use_alnqual\": \"\"}}, \"bc_quals\": {\"alt_bq\": {\"__current_case__\": 0, \"modify\": \"\"}, \"min_alt_bq\": \"6\", \"min_bq\": \"6\"}, \"coverage\": {\"max_depth\": \"1000000\", \"min_cov\": \"1\"}, \"joint_qual\": {\"def_alt_jq\": \"0\", \"min_alt_jq\": \"0\", \"min_jq\": \"0\"}, \"map_quals\": {\"min_mq\": \"0\", \"use_mq\": {\"__current_case__\": 0, \"max_mq\": \"255\", \"no_mq\": \"\"}}, \"pe\": {\"use_orphan\": \"false\"}, \"set_call_options\": \"yes\", \"source_qual\": {\"use_src_qual\": {\"__current_case__\": 1, \"def_nm_q\": \"40\", \"ign_vcf\": {\"values\": [{\"id\": 348, \"src\": \"hda\"}]}, \"src_qual\": \"--src-qual\"}}}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 347, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "359b591f4aff2409", "src": "hda", "uuid": "57aeea8a-9fd2-4fc2-95dd-603dcdcb47e0"}, "ref": {"id": "b16de8f0a22c9208", "src": "hda", "uuid": "53232d62-52b7-4cb4-b698-ebad27dae263"}, "call_control|source_qual|ign_vcf": {"id": "610d88c285704b8c", "src": "hda", "uuid": "dca82b29-222c-4841-b48f-418f6bd9d4bb"}}, "outputs": {"variants": {"id": "7c1a253193d3dd40", "src": "hda", "uuid": "7c83e1eb-bca3-4a42-abd7-792b36fe1e2f"}}, "output_collections": {}, "tool_stdout": "INFO [2023-04-22 17:21:55,549]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2023-04-22 17:21:55,568]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2023-04-22 17:21:58,989]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/271/tmp/lofreq2_call_parallel3wy5cgps/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2023-04-22 17:21:55,549]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2023-04-22 17:21:55,568]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2023-04-22 17:21:58,989]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/271/tmp/lofreq2_call_parallel3wy5cgps/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:21:59", "plugin": "core", "name": "end_epoch", "raw_value": "1682184119.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:21:55", "plugin": "core", "name": "start_epoch", "raw_value": "1682184115.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 3, "time_seconds": 144.21706581115723, "inputs": {"reads": {"src": "hda", "id": "9d25d520b2ec86b7"}, "reference_source|ref": {"src": "hda", "id": "8bcb2b5aca9e54a0"}, "reference_source|ref_selector": "history", "filter_control|filter_type": "set_all_off"}, "job": {"model_class": "Job", "id": "6e666037893d71e0", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:23:07.032459", "create_time": "2023-04-22T17:21:08.839433", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-hgrx7", "command_line": "ln -s '/galaxy/server/database/objects/1/2/f/dataset_12fbc3b0-fc52-4253-9534-0feae06495e3.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/8/d/6/dataset_8d68af2f-f9d7-41bb-b761-51bf0232044f.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/0/8/d/metadata_08db8eb3-353b-4ec9-aee5-1a7fc5ce8186.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf    --sig 1 --bonf 1 --no-default-filter  reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)  && ln -s variants.vcf variants.vcf.gz && gzip -df variants.vcf.gz", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 0, \"bonf\": \"1\", \"filter_type\": \"set_all_off\", \"others\": \"--no-default-filter\", \"sig\": \"1\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 355, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "9d25d520b2ec86b7", "src": "hda", "uuid": "8d68af2f-f9d7-41bb-b761-51bf0232044f"}, "ref": {"id": "8bcb2b5aca9e54a0", "src": "hda", "uuid": "12fbc3b0-fc52-4253-9534-0feae06495e3"}}, "outputs": {"variants": {"id": "857e6d31e51b8c91", "src": "hda", "uuid": "58f612d0-a4fc-48d9-9e15-e639f64977d9"}}, "output_collections": {}, "tool_stdout": "INFO [2023-04-22 17:22:48,627]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2023-04-22 17:22:48,642]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2023-04-22 17:22:51,421]: Copying concatenated vcf file to final destination\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2023-04-22 17:22:48,627]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2023-04-22 17:22:48,642]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2023-04-22 17:22:51,421]: Copying concatenated vcf file to final destination\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:22:51", "plugin": "core", "name": "end_epoch", "raw_value": "1682184171.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:22:48", "plugin": "core", "name": "start_epoch", "raw_value": "1682184168.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 4, "time_seconds": 129.9043951034546, "inputs": {"reads": {"src": "hda", "id": "4201d7d8b583f427"}, "reference_source|ref": {"src": "hda", "id": "8bcb2b5aca9e54a0"}, "reference_source|ref_selector": "history", "variant_types": "--call-indels --only-indels", "filter_control|filter_type": "set_all_off"}, "job": {"model_class": "Job", "id": "5e4741aced7359fa", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:23:10.740719", "create_time": "2023-04-22T17:21:30.064781", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-rq6bq", "command_line": "ln -s '/galaxy/server/database/objects/1/2/f/dataset_12fbc3b0-fc52-4253-9534-0feae06495e3.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/3/c/9/dataset_3c906f20-581b-440d-a1a8-07fd236ebdc8.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/9/f/b/metadata_9fbbdc20-ca32-47ac-8750-2fc5a3df3a70.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf --call-indels --only-indels    --sig 1 --bonf 1 --no-default-filter  reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)  && ln -s variants.vcf variants.vcf.gz && gzip -df variants.vcf.gz", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 0, \"bonf\": \"1\", \"filter_type\": \"set_all_off\", \"others\": \"--no-default-filter\", \"sig\": \"1\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"--call-indels --only-indels\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 355, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "4201d7d8b583f427", "src": "hda", "uuid": "3c906f20-581b-440d-a1a8-07fd236ebdc8"}, "ref": {"id": "8bcb2b5aca9e54a0", "src": "hda", "uuid": "12fbc3b0-fc52-4253-9534-0feae06495e3"}}, "outputs": {"variants": {"id": "cebd7061fa6a9395", "src": "hda", "uuid": "9e03ac3c-1708-4077-9877-92086fae9ba0"}}, "output_collections": {}, "tool_stdout": "INFO [2023-04-22 17:22:52,655]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2023-04-22 17:22:52,671]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 0\nNumber of indel tests performed: 9\nINFO [2023-04-22 17:22:56,839]: Copying concatenated vcf file to final destination\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2023-04-22 17:22:52,655]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2023-04-22 17:22:52,671]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 0\nNumber of indel tests performed: 9\nINFO [2023-04-22 17:22:56,839]: Copying concatenated vcf file to final destination\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:22:56", "plugin": "core", "name": "end_epoch", "raw_value": "1682184176.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:22:52", "plugin": "core", "name": "start_epoch", "raw_value": "1682184172.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 108.02522587776184, "inputs": {"invcf": {"src": "hda", "id": "bffcc88affa466a5"}, "filter_by_type|qual|snvqual_filter|snvqual_thresh": "38", "filter_by_type|qual|snvqual_filter|snvqual": "min-phred", "filter_by_type|qual|indelqual_filter|indelqual_thresh": "20", "filter_by_type|qual|indelqual_filter|indelqual": "min-phred"}, "job": {"model_class": "Job", "id": "aadffa8a9f9070d3", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:25:48.064017", "create_time": "2023-04-22T17:24:12.820908", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-7pg7q", "command_line": "lofreq filter -i /galaxy/server/database/objects/c/f/d/dataset_cfd17a3a-18d0-4d1e-b2d4-16b78747dd7a.dat --no-defaults --verbose   -Q 38 -K 20 -v 10 -V 0 -a 0.0 -A 0.0 -b fdr -c 0.001   -o filtered.vcf", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "flag_or_drop": "\"\"", "sb": "{\"sb_filter\": {\"__current_case__\": 2, \"sb_alpha\": \"0.001\", \"sb_compound\": \"true\", \"sb_indels\": \"false\", \"sb_mtc\": \"fdr\", \"strand_bias\": \"mtc\"}}", "af": "{\"af_max\": \"0.0\", \"af_min\": \"0.0\"}", "coverage": "{\"cov_max\": \"0\", \"cov_min\": \"10\"}", "filter_by_type": "{\"__current_case__\": 0, \"keep_only\": \"\", \"qual\": {\"indelqual_filter\": {\"__current_case__\": 1, \"indelqual\": \"min-phred\", \"indelqual_thresh\": \"20\"}, \"snvqual_filter\": {\"__current_case__\": 1, \"snvqual\": \"min-phred\", \"snvqual_thresh\": \"38\"}}}"}, "inputs": {"invcf": {"id": "bffcc88affa466a5", "src": "hda", "uuid": "cfd17a3a-18d0-4d1e-b2d4-16b78747dd7a"}}, "outputs": {"outvcf": {"id": "b779387d283ca33a", "src": "hda", "uuid": "c21dac81-214b-4e4d-9272-d98267b3108b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "job_stdout": "", "job_stderr": "", "stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:25:37", "plugin": "core", "name": "end_epoch", "raw_value": "1682184337.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:25:37", "plugin": "core", "name": "start_epoch", "raw_value": "1682184337.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 116.67594981193542, "inputs": {"invcf": {"src": "hda", "id": "f44f806fb4ac49e3"}, "filter_by_type|qual|snvqual_filter|snvqual_alpha": "0.01", "filter_by_type|qual|snvqual_filter|snvqual_mtc": "bonf", "filter_by_type|qual|snvqual_filter|snvqual_ntests": "66", "filter_by_type|qual|snvqual_filter|snvqual": "mtc", "filter_by_type|keep_only": "--only-snvs"}, "job": {"model_class": "Job", "id": "da12a68341a225f0", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:27:05.228737", "create_time": "2023-04-22T17:25:30.188308", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-zdbkw", "command_line": "lofreq filter -i /galaxy/server/database/objects/b/a/8/dataset_ba8c52c4-6cce-4dd1-897d-5720f41f9dc8.dat --no-defaults --verbose  --only-snvs -q bonf -r 0.01 -s 66 -v 10 -V 0 -a 0.0 -A 0.0 -b fdr -c 0.001   -o filtered.vcf", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "flag_or_drop": "\"\"", "sb": "{\"sb_filter\": {\"__current_case__\": 2, \"sb_alpha\": \"0.001\", \"sb_compound\": \"true\", \"sb_indels\": \"false\", \"sb_mtc\": \"fdr\", \"strand_bias\": \"mtc\"}}", "af": "{\"af_max\": \"0.0\", \"af_min\": \"0.0\"}", "coverage": "{\"cov_max\": \"0\", \"cov_min\": \"10\"}", "filter_by_type": "{\"__current_case__\": 1, \"keep_only\": \"--only-snvs\", \"qual\": {\"snvqual_filter\": {\"__current_case__\": 2, \"snvqual\": \"mtc\", \"snvqual_alpha\": \"0.01\", \"snvqual_mtc\": \"bonf\", \"snvqual_ntests\": \"66\"}}}"}, "inputs": {"invcf": {"id": "f44f806fb4ac49e3", "src": "hda", "uuid": "ba8c52c4-6cce-4dd1-897d-5720f41f9dc8"}}, "outputs": {"outvcf": {"id": "b00a7c2a6c25f6e4", "src": "hda", "uuid": "7b22fecd-9bf0-4d28-b4e9-ddbf9b4b172a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "job_stdout": "", "job_stderr": "", "stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:26:51", "plugin": "core", "name": "end_epoch", "raw_value": "1682184411.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:26:51", "plugin": "core", "name": "start_epoch", "raw_value": "1682184411.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter", "tool_version": "2.1.5+galaxy0", "test_index": 2, "time_seconds": 121.02687954902649, "inputs": {"invcf": {"src": "hda", "id": "f44f806fb4ac49e3"}, "filter_by_type|qual|snvqual_filter|snvqual_thresh": "38", "filter_by_type|qual|snvqual_filter|snvqual": "min-phred", "filter_by_type|qual|indelqual_filter|indelqual_thresh": "20", "filter_by_type|qual|indelqual_filter|indelqual": "min-phred", "flag_or_drop": "--print-all"}, "job": {"model_class": "Job", "id": "13760a6319ca0ff1", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:27:10.623748", "create_time": "2023-04-22T17:25:31.907618", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-qjbsw", "command_line": "lofreq filter -i /galaxy/server/database/objects/b/a/8/dataset_ba8c52c4-6cce-4dd1-897d-5720f41f9dc8.dat --no-defaults --verbose --print-all  -Q 38 -K 20 -v 10 -V 0 -a 0.0 -A 0.0 -b fdr -c 0.001   -o filtered.vcf", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "flag_or_drop": "\"--print-all\"", "sb": "{\"sb_filter\": {\"__current_case__\": 2, \"sb_alpha\": \"0.001\", \"sb_compound\": \"true\", \"sb_indels\": \"false\", \"sb_mtc\": \"fdr\", \"strand_bias\": \"mtc\"}}", "af": "{\"af_max\": \"0.0\", \"af_min\": \"0.0\"}", "coverage": "{\"cov_max\": \"0\", \"cov_min\": \"10\"}", "filter_by_type": "{\"__current_case__\": 0, \"keep_only\": \"\", \"qual\": {\"indelqual_filter\": {\"__current_case__\": 1, \"indelqual\": \"min-phred\", \"indelqual_thresh\": \"20\"}, \"snvqual_filter\": {\"__current_case__\": 1, \"snvqual\": \"min-phred\", \"snvqual_thresh\": \"38\"}}}"}, "inputs": {"invcf": {"id": "f44f806fb4ac49e3", "src": "hda", "uuid": "ba8c52c4-6cce-4dd1-897d-5720f41f9dc8"}}, "outputs": {"outvcf": {"id": "dd4403a93850d5d3", "src": "hda", "uuid": "68a9d8c3-1444-4fac-9bf0-1eb58d420838"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "job_stdout": "", "job_stderr": "", "stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:26:54", "plugin": "core", "name": "end_epoch", "raw_value": "1682184414.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:26:54", "plugin": "core", "name": "start_epoch", "raw_value": "1682184414.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 127.06331014633179, "inputs": {"reads": {"src": "hda", "id": "ec34257c43d568fa"}, "strategy|insertions": "20", "strategy|deletions": "30", "strategy|selector": "uniform"}, "job": {"model_class": "Job", "id": "d40715f443298220", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:25:14.199919", "create_time": "2023-04-22T17:23:31.299440", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-p4q2z", "command_line": "lofreq indelqual --uniform 20,30 -o output.bam /galaxy/server/database/objects/1/0/0/dataset_1009cf7b-6b2e-4e07-8550-47f7ee08d2a8.dat", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strategy": "{\"__current_case__\": 0, \"deletions\": \"30\", \"insertions\": \"20\", \"selector\": \"uniform\"}"}, "inputs": {"reads": {"id": "ec34257c43d568fa", "src": "hda", "uuid": "1009cf7b-6b2e-4e07-8550-47f7ee08d2a8"}}, "outputs": {"output": {"id": "b7d80b9257954ec2", "src": "hda", "uuid": "8d41f1a3-24eb-4909-907a-66a250c6317f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:25:00", "plugin": "core", "name": "end_epoch", "raw_value": "1682184300.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:25:00", "plugin": "core", "name": "start_epoch", "raw_value": "1682184300.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmprweo5kwwindelqual-out1.bam v. /tmp/tmpwieo4l32indelqual-out1.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 118.45319128036499, "inputs": {"reads": {"src": "hda", "id": "ec34257c43d568fa"}, "strategy|reference_source|ref": {"src": "hda", "id": "373c9db990bd125a"}, "strategy|reference_source|ref_selector": "history", "strategy|selector": "dindel"}, "job": {"model_class": "Job", "id": "a13bf3c3257d82a9", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:25:08.271229", "create_time": "2023-04-22T17:23:34.872456", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-srx69", "command_line": "ln -s '/galaxy/server/database/objects/7/8/3/dataset_783fa396-62a3-4ca1-b7d2-44c7e0cd3601.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq indelqual --dindel --ref reference.fa -o output.bam /galaxy/server/database/objects/1/0/0/dataset_1009cf7b-6b2e-4e07-8550-47f7ee08d2a8.dat", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strategy": "{\"__current_case__\": 1, \"reference_source\": {\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 364, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}, \"selector\": \"dindel\"}"}, "inputs": {"reads": {"id": "ec34257c43d568fa", "src": "hda", "uuid": "1009cf7b-6b2e-4e07-8550-47f7ee08d2a8"}, "strategy|ref": {"id": "373c9db990bd125a", "src": "hda", "uuid": "783fa396-62a3-4ca1-b7d2-44c7e0cd3601"}}, "outputs": {"output": {"id": "b6955b51575253db", "src": "hda", "uuid": "fdc757b9-cc47-4260-b7d0-a17ebf848130"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:24:54", "plugin": "core", "name": "end_epoch", "raw_value": "1682184294.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:24:54", "plugin": "core", "name": "start_epoch", "raw_value": "1682184294.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmpheov3s9yindelqual-out2.bam v. /tmp/tmp5_h9nw2kindelqual-out2.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual", "tool_version": "2.1.5+galaxy0", "test_index": 2, "time_seconds": 118.54702591896057, "inputs": {"reads": {"src": "hda", "id": "ec34257c43d568fa"}, "strategy|insertions": "20", "strategy|selector": "uniform"}, "job": {"model_class": "Job", "id": "a71612e3cd2b391b", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:25:09.489153", "create_time": "2023-04-22T17:23:35.993160", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-rghqf", "command_line": "lofreq indelqual --uniform 20 -o output.bam /galaxy/server/database/objects/1/0/0/dataset_1009cf7b-6b2e-4e07-8550-47f7ee08d2a8.dat", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strategy": "{\"__current_case__\": 0, \"deletions\": \"\", \"insertions\": \"20\", \"selector\": \"uniform\"}"}, "inputs": {"reads": {"id": "ec34257c43d568fa", "src": "hda", "uuid": "1009cf7b-6b2e-4e07-8550-47f7ee08d2a8"}}, "outputs": {"output": {"id": "32810ce3188d1f86", "src": "hda", "uuid": "bfbfa624-b0c7-4d41-8ead-9bc1fa77da04"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:24:58", "plugin": "core", "name": "end_epoch", "raw_value": "1682184298.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:24:58", "plugin": "core", "name": "start_epoch", "raw_value": "1682184298.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmpz11l169sindelqual-out3.bam v. /tmp/tmpfm_4dbeaindelqual-out3.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 128.46492171287537, "inputs": {"reads": {"src": "hda", "id": "9d25d520b2ec86b7"}, "reference_source|ref": {"src": "hda", "id": "8bcb2b5aca9e54a0"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "0e44ce476b2a180f", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:23:09.603811", "create_time": "2023-04-22T17:21:30.589579", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-qr2vw", "command_line": "ln -s '/galaxy/server/database/objects/1/2/f/dataset_12fbc3b0-fc52-4253-9534-0feae06495e3.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq viterbi --ref 'reference.fa'  --defqual 2 --out tmp.bam '/galaxy/server/database/objects/8/d/6/dataset_8d68af2f-f9d7-41bb-b761-51bf0232044f.dat' &&  samtools sort --no-PG -T \"${TMPDIR:-.}\" -@ ${GALAXY_SLOTS:-1} -O BAM -o '/galaxy/server/database/objects/3/c/3/dataset_3c333ced-45c6-4aaf-ab55-c5f6e4a82ae5.dat' tmp.bam", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv_options": "{\"bq2_handling\": {\"__current_case__\": 0, \"defqual\": \"2\", \"replace_bq2\": \"keep\"}, \"keepflags\": \"false\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 355, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "9d25d520b2ec86b7", "src": "hda", "uuid": "8d68af2f-f9d7-41bb-b761-51bf0232044f"}, "ref": {"id": "8bcb2b5aca9e54a0", "src": "hda", "uuid": "12fbc3b0-fc52-4253-9534-0feae06495e3"}}, "outputs": {"realigned": {"id": "cd39a9fbad4ae512", "src": "hda", "uuid": "3c333ced-45c6-4aaf-ab55-c5f6e4a82ae5"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:22:55", "plugin": "core", "name": "end_epoch", "raw_value": "1682184175.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:22:55", "plugin": "core", "name": "start_epoch", "raw_value": "1682184175.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 109.19844627380371, "inputs": {"reads": {"src": "hda", "id": "42573d1c6fe292b9"}, "reference_source|ref": {"src": "hda", "id": "90d495a516fa1629"}, "reference_source|ref_selector": "history", "adv_options|keepflags": true}, "job": {"model_class": "Job", "id": "a54285236c030e8c", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:23:59.688432", "create_time": "2023-04-22T17:22:25.651636", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-qd7gh", "command_line": "ln -s '/galaxy/server/database/objects/c/f/7/dataset_cf7896f3-6bdb-49b5-b237-82f00d2ed2b6.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq viterbi --ref 'reference.fa' --keepflags --defqual 2 --out tmp.bam '/galaxy/server/database/objects/4/a/5/dataset_4a542818-b486-406d-9475-7438a01df6ca.dat' &&  samtools sort --no-PG -T \"${TMPDIR:-.}\" -@ ${GALAXY_SLOTS:-1} -O BAM -o '/galaxy/server/database/objects/c/3/0/dataset_c30ca79c-c6de-47e7-bfb8-c18b074f2984.dat' tmp.bam", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv_options": "{\"bq2_handling\": {\"__current_case__\": 0, \"defqual\": \"2\", \"replace_bq2\": \"keep\"}, \"keepflags\": \"true\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 360, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "42573d1c6fe292b9", "src": "hda", "uuid": "4a542818-b486-406d-9475-7438a01df6ca"}, "ref": {"id": "90d495a516fa1629", "src": "hda", "uuid": "cf7896f3-6bdb-49b5-b237-82f00d2ed2b6"}}, "outputs": {"realigned": {"id": "864c21b59f827904", "src": "hda", "uuid": "c30ca79c-c6de-47e7-bfb8-c18b074f2984"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:23:48", "plugin": "core", "name": "end_epoch", "raw_value": "1682184228.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:23:48", "plugin": "core", "name": "start_epoch", "raw_value": "1682184228.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm/0.3+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm", "tool_version": "0.3+galaxy0", "test_index": 0, "time_seconds": 130.03813672065735, "inputs": {"readFile": {"src": "hda", "id": "8d9ad0b9ff7eb911"}, "paf": {"src": "hda", "id": "6e194e89b40f750a"}}, "job": {"model_class": "Job", "id": "8b9fd636efb1fca0", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:18:46.268846", "create_time": "2023-04-22T17:16:55.740229", "galaxy_version": "21.09", "command_version": "0.3-r179", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm/0.3+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-wc8lt", "command_line": "miniasm -f '/galaxy/server/database/objects/4/b/6/dataset_4b6d5bd8-7e96-4e79-9fe2-471f8d98d146.dat' -m '100' -i '0.05' -s '1000' -c '3' -o '1000' -h '1000' -I '0.08' -g '1000' -d '50000' -e '4' -n '3' -F '0.8' '/galaxy/server/database/objects/e/d/a/dataset_eda565c1-1167-4162-a49e-d897260d453e.dat' > '/galaxy/server/database/objects/3/a/7/dataset_3a7cc4a3-baca-4f84-8be7-3705faa8f290.dat'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "graph": "{\"finalDropRatio\": \"0.8\", \"maxBubDist\": \"50000\", \"maxGapDiff\": \"1000\", \"minUtgSize\": \"4\", \"nRounds\": \"3\"}", "overlapping": "{\"intThres\": \"0.08\", \"maxHang\": \"1000\", \"minOvlp\": \"1000\"}", "preselection": "{\"minCov\": \"3\", \"minIden\": \"0.05\", \"minMatch\": \"100\", \"minSpan\": \"1000\"}"}, "inputs": {"readFile": {"id": "8d9ad0b9ff7eb911", "src": "hda", "uuid": "4b6d5bd8-7e96-4e79-9fe2-471f8d98d146"}, "paf": {"id": "6e194e89b40f750a", "src": "hda", "uuid": "eda565c1-1167-4162-a49e-d897260d453e"}}, "outputs": {"gfa": {"id": "ef46b4642d90ff8d", "src": "hda", "uuid": "3a7cc4a3-baca-4f84-8be7-3705faa8f290"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::main] ===> Step 1: reading read mappings <===\n[M::ma_hit_read::0.206*1.00] read 100000 hits; stored 187742 hits and 12067 sequences (111354001 bp)\n[M::main] ===> Step 2: 1-pass (crude) read selection <===\n[M::ma_hit_sub::0.225*1.00] 9155 query sequences remain after sub\n[M::ma_hit_cut::0.228*1.00] 161122 hits remain after cut\n[M::ma_hit_flt::0.231*1.00] 156936 hits remain after filtering; crude coverage after filtering: 11.85\n[M::main] ===> Step 3: 2-pass (fine) read selection <===\n[M::ma_hit_sub::0.239*1.00] 9023 query sequences remain after sub\n[M::ma_hit_cut::0.242*1.00] 152071 hits remain after cut\n[M::ma_hit_contained::0.246*1.00] 1536 sequences and 8359 hits remain after containment removal\n[M::main] ===> Step 4: graph cleaning <===\n[M::ma_sg_gen] read 8236 arcs\n[M::main] ===> Step 4.1: transitive reduction <===\n[M::asg_arc_del_trans] transitively reduced 4182 arcs\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 362 asymmetric arcs\n[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===\n[M::asg_cut_tip] cut 260 tips\n[M::asg_pop_bubble] popped 105 bubbles and trimmed 4 tips\n[M::main] ===> Step 4.3: cutting short overlaps (3 rounds in total) <===\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 29 asymmetric arcs\n[M::asg_arc_del_short] removed 37 short overlaps\n[M::asg_cut_tip] cut 104 tips\n[M::asg_pop_bubble] popped 1 bubbles and trimmed 0 tips\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 1 asymmetric arcs\n[M::asg_arc_del_short] removed 1 short overlaps\n[M::asg_cut_tip] cut 3 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===\n[M::asg_cut_internal] cut 0 internal sequences\n[M::asg_cut_biloop] cut 0 small bi-loops\n[M::asg_cut_tip] cut 0 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.5: aggressively cutting short overlaps <===\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 5: generating unitigs <===\n[M::main] Version: 0.3-r179\n[M::main] CMD: miniasm -f /galaxy/server/database/objects/4/b/6/dataset_4b6d5bd8-7e96-4e79-9fe2-471f8d98d146.dat -m 100 -i 0.05 -s 1000 -c 3 -o 1000 -h 1000 -I 0.08 -g 1000 -d 50000 -e 4 -n 3 -F 0.8 /galaxy/server/database/objects/e/d/a/dataset_eda565c1-1167-4162-a49e-d897260d453e.dat\n[M::main] Real time: 0.255 sec; CPU: 0.255 sec\n", "stderr": "\n[M::main] ===> Step 1: reading read mappings <===\n[M::ma_hit_read::0.206*1.00] read 100000 hits; stored 187742 hits and 12067 sequences (111354001 bp)\n[M::main] ===> Step 2: 1-pass (crude) read selection <===\n[M::ma_hit_sub::0.225*1.00] 9155 query sequences remain after sub\n[M::ma_hit_cut::0.228*1.00] 161122 hits remain after cut\n[M::ma_hit_flt::0.231*1.00] 156936 hits remain after filtering; crude coverage after filtering: 11.85\n[M::main] ===> Step 3: 2-pass (fine) read selection <===\n[M::ma_hit_sub::0.239*1.00] 9023 query sequences remain after sub\n[M::ma_hit_cut::0.242*1.00] 152071 hits remain after cut\n[M::ma_hit_contained::0.246*1.00] 1536 sequences and 8359 hits remain after containment removal\n[M::main] ===> Step 4: graph cleaning <===\n[M::ma_sg_gen] read 8236 arcs\n[M::main] ===> Step 4.1: transitive reduction <===\n[M::asg_arc_del_trans] transitively reduced 4182 arcs\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 362 asymmetric arcs\n[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===\n[M::asg_cut_tip] cut 260 tips\n[M::asg_pop_bubble] popped 105 bubbles and trimmed 4 tips\n[M::main] ===> Step 4.3: cutting short overlaps (3 rounds in total) <===\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 29 asymmetric arcs\n[M::asg_arc_del_short] removed 37 short overlaps\n[M::asg_cut_tip] cut 104 tips\n[M::asg_pop_bubble] popped 1 bubbles and trimmed 0 tips\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 1 asymmetric arcs\n[M::asg_arc_del_short] removed 1 short overlaps\n[M::asg_cut_tip] cut 3 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===\n[M::asg_cut_internal] cut 0 internal sequences\n[M::asg_cut_biloop] cut 0 small bi-loops\n[M::asg_cut_tip] cut 0 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.5: aggressively cutting short overlaps <===\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 5: generating unitigs <===\n[M::main] Version: 0.3-r179\n[M::main] CMD: miniasm -f /galaxy/server/database/objects/4/b/6/dataset_4b6d5bd8-7e96-4e79-9fe2-471f8d98d146.dat -m 100 -i 0.05 -s 1000 -c 3 -o 1000 -h 1000 -I 0.08 -g 1000 -d 50000 -e 4 -n 3 -F 0.8 /galaxy/server/database/objects/e/d/a/dataset_eda565c1-1167-4162-a49e-d897260d453e.dat\n[M::main] Real time: 0.255 sec; CPU: 0.255 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:18:32", "plugin": "core", "name": "end_epoch", "raw_value": "1682183912.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:18:31", "plugin": "core", "name": "start_epoch", "raw_value": "1682183911.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm/0.3+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm", "tool_version": "0.3+galaxy0", "test_index": 1, "time_seconds": 111.43567299842834, "inputs": {"readFile": {"src": "hda", "id": "8d9ad0b9ff7eb911"}, "paf": {"src": "hda", "id": "174760309d8677ad"}, "preselection|minMatch": "99", "preselection|minIden": "0.04", "preselection|minSpan": "999", "preselection|minCov": "2", "overlapping|minOvlp": "999", "overlapping|maxHang": "999", "overlapping|intThres": "0.7", "graph|maxGapDiff": "999", "graph|maxBubDist": "45000", "graph|minUtgSize": "3", "graph|nRounds": "2", "graph|finalDropRatio": "0.7"}, "job": {"model_class": "Job", "id": "a4910fc6462f670d", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:18:45.189704", "create_time": "2023-04-22T17:17:08.734015", "galaxy_version": "21.09", "command_version": "0.3-r179", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm/0.3+galaxy0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-5ttwv", "command_line": "miniasm -f '/galaxy/server/database/objects/4/b/6/dataset_4b6d5bd8-7e96-4e79-9fe2-471f8d98d146.dat' -m '99' -i '0.04' -s '999' -c '2' -o '999' -h '999' -I '0.7' -g '999' -d '45000' -e '3' -n '2' -F '0.7' '/galaxy/server/database/objects/e/6/8/dataset_e688e6a6-131d-4acb-960b-17d731768da7.dat' > '/galaxy/server/database/objects/b/b/1/dataset_bb1ead07-cd89-4aa4-9f02-5817d223a3c3.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "graph": "{\"finalDropRatio\": \"0.7\", \"maxBubDist\": \"45000\", \"maxGapDiff\": \"999\", \"minUtgSize\": \"3\", \"nRounds\": \"2\"}", "overlapping": "{\"intThres\": \"0.7\", \"maxHang\": \"999\", \"minOvlp\": \"999\"}", "preselection": "{\"minCov\": \"2\", \"minIden\": \"0.04\", \"minMatch\": \"99\", \"minSpan\": \"999\"}"}, "inputs": {"readFile": {"id": "8d9ad0b9ff7eb911", "src": "hda", "uuid": "4b6d5bd8-7e96-4e79-9fe2-471f8d98d146"}, "paf": {"id": "174760309d8677ad", "src": "hda", "uuid": "e688e6a6-131d-4acb-960b-17d731768da7"}}, "outputs": {"gfa": {"id": "2449c3a315599098", "src": "hda", "uuid": "bb1ead07-cd89-4aa4-9f02-5817d223a3c3"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::main] ===> Step 1: reading read mappings <===\n[M::ma_hit_read::0.192*1.00] read 100000 hits; stored 187766 hits and 12068 sequences (111355211 bp)\n[M::main] ===> Step 2: 1-pass (crude) read selection <===\n[M::ma_hit_sub::0.211*1.00] 10122 query sequences remain after sub\n[M::ma_hit_cut::0.214*1.00] 171862 hits remain after cut\n[M::ma_hit_flt::0.217*1.00] 165533 hits remain after filtering; crude coverage after filtering: 11.51\n[M::main] ===> Step 3: 2-pass (fine) read selection <===\n[M::ma_hit_sub::0.225*1.00] 9994 query sequences remain after sub\n[M::ma_hit_cut::0.227*1.00] 163595 hits remain after cut\n[M::ma_hit_contained::0.232*1.00] 1772 sequences and 10061 hits remain after containment removal\n[M::main] ===> Step 4: graph cleaning <===\n[M::ma_sg_gen] read 9758 arcs\n[M::main] ===> Step 4.1: transitive reduction <===\n[M::asg_arc_del_trans] transitively reduced 4694 arcs\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 484 asymmetric arcs\n[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===\n[M::asg_cut_tip] cut 282 tips\n[M::asg_pop_bubble] popped 173 bubbles and trimmed 6 tips\n[M::main] ===> Step 4.3: cutting short overlaps (2 rounds in total) <===\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 26 asymmetric arcs\n[M::asg_arc_del_short] removed 38 short overlaps\n[M::asg_cut_tip] cut 53 tips\n[M::asg_pop_bubble] popped 8 bubbles and trimmed 0 tips\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 2 asymmetric arcs\n[M::asg_arc_del_short] removed 2 short overlaps\n[M::asg_cut_tip] cut 2 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===\n[M::asg_cut_internal] cut 0 internal sequences\n[M::asg_cut_biloop] cut 0 small bi-loops\n[M::asg_cut_tip] cut 0 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.5: aggressively cutting short overlaps <===\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 5: generating unitigs <===\n[M::main] Version: 0.3-r179\n[M::main] CMD: miniasm -f /galaxy/server/database/objects/4/b/6/dataset_4b6d5bd8-7e96-4e79-9fe2-471f8d98d146.dat -m 99 -i 0.04 -s 999 -c 2 -o 999 -h 999 -I 0.7 -g 999 -d 45000 -e 3 -n 2 -F 0.7 /galaxy/server/database/objects/e/6/8/dataset_e688e6a6-131d-4acb-960b-17d731768da7.dat\n[M::main] Real time: 0.246 sec; CPU: 0.245 sec\n", "stderr": "\n[M::main] ===> Step 1: reading read mappings <===\n[M::ma_hit_read::0.192*1.00] read 100000 hits; stored 187766 hits and 12068 sequences (111355211 bp)\n[M::main] ===> Step 2: 1-pass (crude) read selection <===\n[M::ma_hit_sub::0.211*1.00] 10122 query sequences remain after sub\n[M::ma_hit_cut::0.214*1.00] 171862 hits remain after cut\n[M::ma_hit_flt::0.217*1.00] 165533 hits remain after filtering; crude coverage after filtering: 11.51\n[M::main] ===> Step 3: 2-pass (fine) read selection <===\n[M::ma_hit_sub::0.225*1.00] 9994 query sequences remain after sub\n[M::ma_hit_cut::0.227*1.00] 163595 hits remain after cut\n[M::ma_hit_contained::0.232*1.00] 1772 sequences and 10061 hits remain after containment removal\n[M::main] ===> Step 4: graph cleaning <===\n[M::ma_sg_gen] read 9758 arcs\n[M::main] ===> Step 4.1: transitive reduction <===\n[M::asg_arc_del_trans] transitively reduced 4694 arcs\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 484 asymmetric arcs\n[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===\n[M::asg_cut_tip] cut 282 tips\n[M::asg_pop_bubble] popped 173 bubbles and trimmed 6 tips\n[M::main] ===> Step 4.3: cutting short overlaps (2 rounds in total) <===\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 26 asymmetric arcs\n[M::asg_arc_del_short] removed 38 short overlaps\n[M::asg_cut_tip] cut 53 tips\n[M::asg_pop_bubble] popped 8 bubbles and trimmed 0 tips\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 2 asymmetric arcs\n[M::asg_arc_del_short] removed 2 short overlaps\n[M::asg_cut_tip] cut 2 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===\n[M::asg_cut_internal] cut 0 internal sequences\n[M::asg_cut_biloop] cut 0 small bi-loops\n[M::asg_cut_tip] cut 0 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.5: aggressively cutting short overlaps <===\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 5: generating unitigs <===\n[M::main] Version: 0.3-r179\n[M::main] CMD: miniasm -f /galaxy/server/database/objects/4/b/6/dataset_4b6d5bd8-7e96-4e79-9fe2-471f8d98d146.dat -m 99 -i 0.04 -s 999 -c 2 -o 999 -h 999 -I 0.7 -g 999 -d 45000 -e 3 -n 2 -F 0.7 /galaxy/server/database/objects/e/6/8/dataset_e688e6a6-131d-4acb-960b-17d731768da7.dat\n[M::main] Real time: 0.246 sec; CPU: 0.245 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 17:18:30", "plugin": "core", "name": "end_epoch", "raw_value": "1682183910.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:18:30", "plugin": "core", "name": "start_epoch", "raw_value": "1682183910.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 0, "time_seconds": 137.50695395469666, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "28e4c94f312ad183"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "6fcd81857172a41f"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "8bfbcb852cc62042", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:45:56.522665", "create_time": "2023-04-22T16:44:02.843816", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-48ttm", "command_line": "ln -f -s '/galaxy/server/database/objects/e/6/9/dataset_e691e299-c4a3-4503-8fcd-c3a6602ee641.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/d/1/6/dataset_d1684408-87f8-4a70-95fc-c9ff91fb869f.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/a/1/3/dataset_a13ba37b-5b82-4660-89a6-a96bcab01a1c.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 118, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 117, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "28e4c94f312ad183", "src": "hda", "uuid": "e691e299-c4a3-4503-8fcd-c3a6602ee641"}, "fastq_input1": {"id": "6fcd81857172a41f", "src": "hda", "uuid": "d1684408-87f8-4a70-95fc-c9ff91fb869f"}}, "outputs": {"alignment_output": {"id": "af1759e298a8171d", "src": "hda", "uuid": "a13ba37b-5b82-4660-89a6-a96bcab01a1c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.003*1.12] collected minimizers\n[M::mm_idx_gen::0.005*1.80] sorted minimizers\n[M::main::0.005*1.78] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.78] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.75] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.008*1.65] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/d/1/6/dataset_d1684408-87f8-4a70-95fc-c9ff91fb869f.dat\n[M::main] Real time: 0.010 sec; CPU: 0.014 sec; Peak RSS: 0.004 GB\n", "stderr": "\n[M::mm_idx_gen::0.003*1.12] collected minimizers\n[M::mm_idx_gen::0.005*1.80] sorted minimizers\n[M::main::0.005*1.78] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.78] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.75] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.008*1.65] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/d/1/6/dataset_d1684408-87f8-4a70-95fc-c9ff91fb869f.dat\n[M::main] Real time: 0.010 sec; CPU: 0.014 sec; Peak RSS: 0.004 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:45:38", "plugin": "core", "name": "end_epoch", "raw_value": "1682181938.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:45:38", "plugin": "core", "name": "start_epoch", "raw_value": "1682181938.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_huk8_sj4.sam v. /tmp/history_bam_converted_to_sam_r26rb9kc.sam )\n--- local_file\n+++ history_data\n@@ -1,171 +1,171 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_19.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t*\t0\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\t*\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:18422:19051/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t*\t0\t0\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t*\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t*\t0\t0\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\t*\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:200\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:18842:24844/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\t*\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t*\t0\t0\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\t*\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:200\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5983:21093/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1102:7765:18353/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t*\t0\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\t*\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t*\t0\t0\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\t*\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:142\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:14060:21273/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S156M15S\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\t*\tNM:i:1\tms:i:302\tAS:i:302\tnn:i:0\ttp:A:P\tcm:i:22\ts1:i:150\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:14528:12993/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGAT\t*\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:17657:20856/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t90S161M\t*\t0\t0\tAAAGCGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\t*\tNM:i:1\tms:i:312\tAS:i:312\tnn:i:0\ttp:A:P\tcm:i:22\ts1:i:150\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16480,+,90M161S,60,2;\n-M01368:8:000000000-A3GHV:1:1103:25519:6301/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t18S184M49S\t*\t0\t0\tAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGCATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATTTCGT\t*\tNM:i:2\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:21\ts1:i:157\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1103:6074:6549/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t108S143M\t*\t0\t0\tTAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTG\t*\tNM:i:1\tms:i:276\tAS:i:276\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16462,+,108M143S,60,1;\n-M01368:8:000000000-A3GHV:1:1104:11572:8264/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1104:12288:20635/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\t*\tNM:i:3\tms:i:262\tAS:i:262\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:109\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1104:13832:4398/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t7S132M112S\t*\t0\t0\tCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGACAAAAAAAAACACACAACAACCAACACCCAGTAGACTAGTGCGTC\t*\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1110:15519:10008/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t12\t67M184H\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:124\tAS:i:124\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0149\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,67S184M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1110:16700:6843/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t12\t25H67M159H\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:124\tAS:i:124\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0149\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,92S159M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:16531/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t5\t59M192H\t*\t0\t0\tGGTTCCTACTTCAAGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACA\t*\tNM:i:2\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:31\ts2:i:0\tde:f:0.0339\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,67S184M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:8665:25542/1\t2048\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701/1\t2064\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:27103:7153/1\t2064\tgi|251831106|ref|NC_012920.1|\t16508\t12\t7H62M182H\t*\t0\t0\tCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:114\tAS:i:114\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0161\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,69S182M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233/1\t2048\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794/1\t2064\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:17564:15723/1\t2064\tgi|251831106|ref|NC_012920.1|\t16512\t12\t58M193H\t*\t0\t0\tTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:106\tAS:i:106\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0172\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,58S193M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t57M194H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:18714:24788/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t57M194H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490/1\t2048\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t*\t0\t0\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050/1\t2064\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t*\t0\t0\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:8763:7859/1\t2064\tgi|251831106|ref|NC_012920.1|\t16519\t19\t51M200H\t*\t0\t0\tGCATAAAGCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:100\tAS:i:100\tnn:i:0\ttp:A:P\tcm:i:4\ts1:i:38\ts2:i:0\tde:f:0.0196\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,51S200M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1113:5741:16959/1\t2064\tgi|251831106|ref|NC_012920.1|\t16519\t11\t51M200H\t*\t0\t0\tTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:92\tAS:i:92\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0196\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,51S200M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:13575:19255/1\t2064\tgi|251831106|ref|NC_012920.1|\t16520\t11\t50M201H\t*\t0\t0\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:16350:22621/1\t2064\tgi|251831106|ref|NC_012920.1|\t16520\t11\t50M201H\t*\t0\t0\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272/1\t2064\tgi|251831106|ref|NC_012920.1|\t16522\t11\t48M203H\t*\t0\t0\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145/1\t2048\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t*\t0\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258/1\t2048\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t5H43M203H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:19224:11655/1\t2048\tgi|251831106|ref|NC_012920.1|\t16530\t11\t40M211H\t*\t0\t0\tAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:80\tAS:i:80\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,40S186M25S,60,2;\trl:i:0\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 1, "time_seconds": 130.9712679386139, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "28e4c94f312ad183"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "6fcd81857172a41f"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single", "io_options|output_format": "CRAM"}, "job": {"model_class": "Job", "id": "6e2abc76fa52617f", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:45:51.692482", "create_time": "2023-04-22T16:44:13.423931", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-dww8x", "command_line": "ln -f -s '/galaxy/server/database/objects/e/6/9/dataset_e691e299-c4a3-4503-8fcd-c3a6602ee641.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/d/1/6/dataset_d1684408-87f8-4a70-95fc-c9ff91fb869f.dat' -a | samtools sort -T \"${TMPDIR:-.}\" -@${GALAXY_SLOTS:-2} -O CRAM  --reference reference.fa --output-fmt-option no_ref -o '/galaxy/server/database/objects/a/e/0/dataset_ae0e5301-16a6-4600-9fd4-2a50f04da832.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"CRAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 118, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 117, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "28e4c94f312ad183", "src": "hda", "uuid": "e691e299-c4a3-4503-8fcd-c3a6602ee641"}, "fastq_input1": {"id": "6fcd81857172a41f", "src": "hda", "uuid": "d1684408-87f8-4a70-95fc-c9ff91fb869f"}}, "outputs": {"alignment_output": {"id": "db781ef2215b4046", "src": "hda", "uuid": "ae0e5301-16a6-4600-9fd4-2a50f04da832"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*0.82] collected minimizers\n[M::mm_idx_gen::0.005*1.42] sorted minimizers\n[M::main::0.005*1.42] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.42] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.40] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*1.28] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/d/1/6/dataset_d1684408-87f8-4a70-95fc-c9ff91fb869f.dat\n[M::main] Real time: 0.011 sec; CPU: 0.012 sec; Peak RSS: 0.004 GB\n", "stderr": "\n[M::mm_idx_gen::0.004*0.82] collected minimizers\n[M::mm_idx_gen::0.005*1.42] sorted minimizers\n[M::main::0.005*1.42] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.42] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.40] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*1.28] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/d/1/6/dataset_d1684408-87f8-4a70-95fc-c9ff91fb869f.dat\n[M::main] Real time: 0.011 sec; CPU: 0.012 sec; Peak RSS: 0.004 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:45:34", "plugin": "core", "name": "end_epoch", "raw_value": "1682181934.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:45:33", "plugin": "core", "name": "start_epoch", "raw_value": "1682181933.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 2, "time_seconds": 121.25705933570862, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "c00db8235adeb4ef"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "7a9570f93aa7907d"}, "fastq_input|fastq_input2": {"src": "hda", "id": "527e507615602ea2"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "af29996c9e831659", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:46:32.456620", "create_time": "2023-04-22T16:44:55.799844", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-dlrwn", "command_line": "ln -f -s '/galaxy/server/database/objects/7/3/4/dataset_734973fa-5f43-4bb8-889d-14525ebe7f7f.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/a/6/e/dataset_a6e56ac2-936c-44cf-a1d6-4d81a466586a.dat' '/galaxy/server/database/objects/7/e/e/dataset_7ee50134-1824-49ae-9192-6eb5dcc833df.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/7/e/a/dataset_7ea51d25-3627-4e15-a01f-4fda23edd65b.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 124, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 125, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 123, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "c00db8235adeb4ef", "src": "hda", "uuid": "734973fa-5f43-4bb8-889d-14525ebe7f7f"}, "fastq_input1": {"id": "7a9570f93aa7907d", "src": "hda", "uuid": "a6e56ac2-936c-44cf-a1d6-4d81a466586a"}, "fastq_input2": {"id": "527e507615602ea2", "src": "hda", "uuid": "7ee50134-1824-49ae-9192-6eb5dcc833df"}}, "outputs": {"alignment_output": {"id": "f73bb448ba45ea81", "src": "hda", "uuid": "7ea51d25-3627-4e15-a01f-4fda23edd65b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*0.92] collected minimizers\n[M::mm_idx_gen::0.006*1.44] sorted minimizers\n[M::main::0.006*1.44] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.44] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.42] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.015*1.73] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/a/6/e/dataset_a6e56ac2-936c-44cf-a1d6-4d81a466586a.dat /galaxy/server/database/objects/7/e/e/dataset_7ee50134-1824-49ae-9192-6eb5dcc833df.dat\n[M::main] Real time: 0.016 sec; CPU: 0.026 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.004*0.92] collected minimizers\n[M::mm_idx_gen::0.006*1.44] sorted minimizers\n[M::main::0.006*1.44] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.44] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.42] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.015*1.73] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/a/6/e/dataset_a6e56ac2-936c-44cf-a1d6-4d81a466586a.dat /galaxy/server/database/objects/7/e/e/dataset_7ee50134-1824-49ae-9192-6eb5dcc833df.dat\n[M::main] Real time: 0.016 sec; CPU: 0.026 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:46:21", "plugin": "core", "name": "end_epoch", "raw_value": "1682181981.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:46:21", "plugin": "core", "name": "start_epoch", "raw_value": "1682181981.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_w4a7z8cf.sam v. /tmp/history_bam_converted_to_sam_enwpa6et.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_12.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_13.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1>11111@11111A111A100000000////011110//>>/12@1@22B/////1@>21/>>/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t>A@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@<1>@FFFGHHHHFHEFGDABFFGG/@DCE<CG1<GF0/DD000=<DHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#>AABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA<@HFDG0HHGGHGBDFGFG<DDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11>>ABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA<.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF<GGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 3, "time_seconds": 138.88341617584229, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "11620a9a7cab12ca"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "887647c5a348a447"}, "fastq_input|fastq_input2": {"src": "hda", "id": "50b7666864fb3daf"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "6e10ea289566e485", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:47:52.396515", "create_time": "2023-04-22T16:46:14.598631", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-8nwkg", "command_line": "ln -f -s '/galaxy/server/database/objects/a/5/f/dataset_a5f93506-b84d-4d62-8826-cf81bb6fd972.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/0/2/3/dataset_02305302-6c3d-47e5-8993-50d88f478eb2.dat' '/galaxy/server/database/objects/f/2/0/dataset_f2053f2d-5070-4b28-aa99-5ab354fc44b7.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/e/d/d/dataset_edd65848-f4e9-4738-86f8-65a7df4b53ac.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 128, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 132, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 130, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "11620a9a7cab12ca", "src": "hda", "uuid": "a5f93506-b84d-4d62-8826-cf81bb6fd972"}, "fastq_input1": {"id": "887647c5a348a447", "src": "hda", "uuid": "02305302-6c3d-47e5-8993-50d88f478eb2"}, "fastq_input2": {"id": "50b7666864fb3daf", "src": "hda", "uuid": "f2053f2d-5070-4b28-aa99-5ab354fc44b7"}}, "outputs": {"alignment_output": {"id": "6df8d9e5589b583c", "src": "hda", "uuid": "edd65848-f4e9-4738-86f8-65a7df4b53ac"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*0.80] collected minimizers\n[M::mm_idx_gen::0.006*1.39] sorted minimizers\n[M::main::0.006*1.39] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.39] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.37] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.014*1.70] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/0/2/3/dataset_02305302-6c3d-47e5-8993-50d88f478eb2.dat /galaxy/server/database/objects/f/2/0/dataset_f2053f2d-5070-4b28-aa99-5ab354fc44b7.dat\n[M::main] Real time: 0.016 sec; CPU: 0.026 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.004*0.80] collected minimizers\n[M::mm_idx_gen::0.006*1.39] sorted minimizers\n[M::main::0.006*1.39] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.39] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.37] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.014*1.70] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/0/2/3/dataset_02305302-6c3d-47e5-8993-50d88f478eb2.dat /galaxy/server/database/objects/f/2/0/dataset_f2053f2d-5070-4b28-aa99-5ab354fc44b7.dat\n[M::main] Real time: 0.016 sec; CPU: 0.026 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:47:41", "plugin": "core", "name": "end_epoch", "raw_value": "1682182061.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:47:41", "plugin": "core", "name": "start_epoch", "raw_value": "1682182061.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_oc86p712.sam v. /tmp/history_bam_converted_to_sam_eadsb70y.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_12.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_13.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1>11111@11111A111A100000000////011110//>>/12@1@22B/////1@>21/>>/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t>A@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@<1>@FFFGHHHHFHEFGDABFFGG/@DCE<CG1<GF0/DD000=<DHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#>AABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA<@HFDG0HHGGHGBDFGFG<DDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11>>ABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA<.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF<GGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 4, "time_seconds": 127.37194871902466, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "11620a9a7cab12ca"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hdca", "id": "a27c58f49c315e0d"}, "fastq_input|fastq_input_selector": "paired_collection"}, "job": {"model_class": "Job", "id": "2e3dccdd6466bd67", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:47:59.597868", "create_time": "2023-04-22T16:46:19.666480", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-j6kpz", "command_line": "ln -f -s '/galaxy/server/database/objects/a/5/f/dataset_a5f93506-b84d-4d62-8826-cf81bb6fd972.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/7/6/5/dataset_7654f8df-4395-42ce-b611-985b922e002f.dat' '/galaxy/server/database/objects/f/2/0/dataset_f2053f2d-5070-4b28-aa99-5ab354fc44b7.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/9/c/8/dataset_9c8ee182-8669-40e1-b272-bf188c6b00df.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 2, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 130, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "11620a9a7cab12ca", "src": "hda", "uuid": "a5f93506-b84d-4d62-8826-cf81bb6fd972"}, "fastq_input11": {"id": "e7b67183edb59f50", "src": "hda", "uuid": "7654f8df-4395-42ce-b611-985b922e002f"}, "fastq_input12": {"id": "50b7666864fb3daf", "src": "hda", "uuid": "f2053f2d-5070-4b28-aa99-5ab354fc44b7"}}, "outputs": {"alignment_output": {"id": "460b45054ebf7824", "src": "hda", "uuid": "9c8ee182-8669-40e1-b272-bf188c6b00df"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.003*1.07] collected minimizers\n[M::mm_idx_gen::0.005*1.35] sorted minimizers\n[M::main::0.005*1.35] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.35] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.33] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.012*1.71] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/7/6/5/dataset_7654f8df-4395-42ce-b611-985b922e002f.dat /galaxy/server/database/objects/f/2/0/dataset_f2053f2d-5070-4b28-aa99-5ab354fc44b7.dat\n[M::main] Real time: 0.014 sec; CPU: 0.022 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.003*1.07] collected minimizers\n[M::mm_idx_gen::0.005*1.35] sorted minimizers\n[M::main::0.005*1.35] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.35] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.33] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.012*1.71] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/7/6/5/dataset_7654f8df-4395-42ce-b611-985b922e002f.dat /galaxy/server/database/objects/f/2/0/dataset_f2053f2d-5070-4b28-aa99-5ab354fc44b7.dat\n[M::main] Real time: 0.014 sec; CPU: 0.022 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:47:46", "plugin": "core", "name": "end_epoch", "raw_value": "1682182066.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:47:46", "plugin": "core", "name": "start_epoch", "raw_value": "1682182066.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_zm83ar9z.sam v. /tmp/history_bam_converted_to_sam_e1adgk3v.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_16.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_17.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1>11111@11111A111A100000000////011110//>>/12@1@22B/////1@>21/>>/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t>A@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@<1>@FFFGHHHHFHEFGDABFFGG/@DCE<CG1<GF0/DD000=<DHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#>AABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA<@HFDG0HHGGHGBDFGFG<DDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11>>ABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA<.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF<GGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 5, "time_seconds": 29.716777563095093, "inputs": {"reference_source|ref_file": "bwa-mem-mt-genome", "reference_source|reference_source_selector": "cached", "fastq_input|fastq_input1": {"src": "hda", "id": "e99008cad93e2b16"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single"}, "execution_problem": "parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: panTro3canon,canFam3,ce5,caeRem3,speTri2,echTel1,Bombyx_mori_p50T_2.0,equCab2chrM,hg17canon,panTro2,hg38female,panTro1canon,panTro1,rn5,Tcacao_1.0,tarSyr1,rheMac3,bosTauMd3,susScr2,eschColi_APEC_O1,micMur1,allMis1,strPur2,monDom1,equCab2,oryCun2,danRer3,eschColi_CFT073,hg18chr21,galGal4,ce7,vicPac2,danRer5,ci2full,dasNov1,Arabidopsis_thaliana_TAIR9,droPer1,venter1,taeGut1canon,melUnd1,burkPseu_1106A,turTru2,droYak2,lMaj5,calJac3,galGal3,fr2,mm10,cavPor3,hg_g1k_v37,nomLeu1,droSim1,papHam1,equCab1,felCat5,dipOrd1,rn4,caePb2,felCat3,oryza_sativa_japonica_nipponbare_IRGSP4.0,xenTro3,Zea_mays_B73_RefGen_v2,apiMel3,mm7,oryLat2canon,dm2,hg18nohaps,mm9canon,eschColi_O157H7_TW14359,AgamP3,sacCer3,Xanthomonas_oryzae_PXO99A,pseuAeru_UCBPP_PA14,rn3canon,ce4,danRer6,mm8canon,felCat4canon,bosTau8,eschColi_K12_DH10B,petMar1,ce9,hg18,Sscrofa9.58,caeJap2,hg19canon,droGri1,AaegL1,bosTau6,droMoj1,droMoj3,gorGor3,mm8,rn4canon,otoGar1,caeRem1,ce10,baciSubt,strePneu_R6,cb3full,IscaW1,panTro3full,ci2canon,fr1,Homo_sapiens_nuHg19_mtrCRS,Xanthomonas_oryzae_KACC10331,dasNov3,canFam1,xenTro2,droVir3,taeGut2,canFam2,droVir2,droAna1,ponAbe2,burkPseu_K96243,rn6,caeRem4,dp4,caePb1,droSec1,danRer7,triCas2,danRer2,oryLat1,mm9female,burkPseu_668,Schizosaccharomyces_pombe_1.1,droAna2,droEre2,melGal1,caePb3,caeRem2,rn3,dp3,aplCal1,bosTau5,monDom5,ce6,pUC18,rheMac2,gadMor1,tupBel1,eschColi_O157H7_EC4115,xenTro1,phiX,Arabidopsis_thaliana_TAIR10,galGal2canon,eschColi_K12_W3110,Homo_sapiens_AK1,bosTau2,eschColi_O157H7,susScr1,Ptrichocarpa_156,pseuAeru_PA7,apiMel4,ce2,eschColi_O157H7_EDL933,mm9,Hydra_JCVI,apiMel2,PhumU1,Amel_4.5,oviAri1,caeJap4,panTro4,latCha1,danRer4,droAna3,bosTau3,apiMel1,vicPac1,hg38,burkPseu_1710B,bosTau7,musFur1,hg19female,nomLeu3,panTro2canon,eriEur1,saiBol1,27835,dm6,pseuAeru_PAO1,galGal3canon,ailMel1,Tcas_3.0,droWil1,monDom4,ce3,ente638,nomLeu2,droGri2,anoGam1,Araly1,oryCun1,hg17,Xanthomonas_oryzae_MAFF_311018,sacCer2,galGal2,danRer10,ce8,borEut13,Spur_v2.6,choHof1,tetNig2,cb3canon,otoGar3,hg19,priPac1,criGri1,calJac3canon,hg19_rCRS_pUC18_phiX174,tetNig1,ornAna1,hg18canon,hg38canon,gasAcu1,bordBron,panPan1,CHM13_T2T_v2.0,dm3,caeJap1,calJac1,hetGla1,bosTau4,anoCar1,cerSim1,strPur3,papAnu2,tetNig1canon,loxAfr1,hg19chrM,sacCer1,anoCar2,sarHar1,loxAfr3,caeJap3,felCat8,myoLuc2,eschColi_K12,taeGut1,sorAra1,hg19chrX,braFlo1,aptMan1,mm7canon,droMoj2,susScr3,geoFor1,chrPic1,droYak1,CpipJ1,droVir1,felCat4,tetNig2canon,droEre1,oryLat2)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 6, "time_seconds": 11.738229513168335, "inputs": {"reference_source|ref_file": "bwa-mem-mt-genome", "reference_source|reference_source_selector": "cached", "fastq_input|fastq_input1": {"src": "hda", "id": "fffd80ea3359d3ef"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single", "mapping_options|min_occ_floor": "1000", "alignment_options|A": "2", "alignment_options|B": "8", "alignment_options|O": "12", "alignment_options|O2": "32", "alignment_options|E": "2", "alignment_options|E2": "1", "alignment_options|z": "400", "alignment_options|s": "40"}, "execution_problem": "parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: panTro3canon,canFam3,ce5,caeRem3,speTri2,echTel1,Bombyx_mori_p50T_2.0,equCab2chrM,hg17canon,panTro2,hg38female,panTro1canon,panTro1,rn5,Tcacao_1.0,tarSyr1,rheMac3,bosTauMd3,susScr2,eschColi_APEC_O1,micMur1,allMis1,strPur2,monDom1,equCab2,oryCun2,danRer3,eschColi_CFT073,hg18chr21,galGal4,ce7,vicPac2,danRer5,ci2full,dasNov1,Arabidopsis_thaliana_TAIR9,droPer1,venter1,taeGut1canon,melUnd1,burkPseu_1106A,turTru2,droYak2,lMaj5,calJac3,galGal3,fr2,mm10,cavPor3,hg_g1k_v37,nomLeu1,droSim1,papHam1,equCab1,felCat5,dipOrd1,rn4,caePb2,felCat3,oryza_sativa_japonica_nipponbare_IRGSP4.0,xenTro3,Zea_mays_B73_RefGen_v2,apiMel3,mm7,oryLat2canon,dm2,hg18nohaps,mm9canon,eschColi_O157H7_TW14359,AgamP3,sacCer3,Xanthomonas_oryzae_PXO99A,pseuAeru_UCBPP_PA14,rn3canon,ce4,danRer6,mm8canon,felCat4canon,bosTau8,eschColi_K12_DH10B,petMar1,ce9,hg18,Sscrofa9.58,caeJap2,hg19canon,droGri1,AaegL1,bosTau6,droMoj1,droMoj3,gorGor3,mm8,rn4canon,otoGar1,caeRem1,ce10,baciSubt,strePneu_R6,cb3full,IscaW1,panTro3full,ci2canon,fr1,Homo_sapiens_nuHg19_mtrCRS,Xanthomonas_oryzae_KACC10331,dasNov3,canFam1,xenTro2,droVir3,taeGut2,canFam2,droVir2,droAna1,ponAbe2,burkPseu_K96243,rn6,caeRem4,dp4,caePb1,droSec1,danRer7,triCas2,danRer2,oryLat1,mm9female,burkPseu_668,Schizosaccharomyces_pombe_1.1,droAna2,droEre2,melGal1,caePb3,caeRem2,rn3,dp3,aplCal1,bosTau5,monDom5,ce6,pUC18,rheMac2,gadMor1,tupBel1,eschColi_O157H7_EC4115,xenTro1,phiX,Arabidopsis_thaliana_TAIR10,galGal2canon,eschColi_K12_W3110,Homo_sapiens_AK1,bosTau2,eschColi_O157H7,susScr1,Ptrichocarpa_156,pseuAeru_PA7,apiMel4,ce2,eschColi_O157H7_EDL933,mm9,Hydra_JCVI,apiMel2,PhumU1,Amel_4.5,oviAri1,caeJap4,panTro4,latCha1,danRer4,droAna3,bosTau3,apiMel1,vicPac1,hg38,burkPseu_1710B,bosTau7,musFur1,hg19female,nomLeu3,panTro2canon,eriEur1,saiBol1,27835,dm6,pseuAeru_PAO1,galGal3canon,ailMel1,Tcas_3.0,droWil1,monDom4,ce3,ente638,nomLeu2,droGri2,anoGam1,Araly1,oryCun1,hg17,Xanthomonas_oryzae_MAFF_311018,sacCer2,galGal2,danRer10,ce8,borEut13,Spur_v2.6,choHof1,tetNig2,cb3canon,otoGar3,hg19,priPac1,criGri1,calJac3canon,hg19_rCRS_pUC18_phiX174,tetNig1,ornAna1,hg18canon,hg38canon,gasAcu1,bordBron,panPan1,CHM13_T2T_v2.0,dm3,caeJap1,calJac1,hetGla1,bosTau4,anoCar1,cerSim1,strPur3,papAnu2,tetNig1canon,loxAfr1,hg19chrM,sacCer1,anoCar2,sarHar1,loxAfr3,caeJap3,felCat8,myoLuc2,eschColi_K12,taeGut1,sorAra1,hg19chrX,braFlo1,aptMan1,mm7canon,droMoj2,susScr3,geoFor1,chrPic1,droYak1,CpipJ1,droVir1,felCat4,tetNig2canon,droEre1,oryLat2)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 7, "time_seconds": 114.83307528495789, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "f8656e01d5fb80c2"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "f8656e01d5fb80c2"}, "fastq_input|analysis_type_selector": "ava-ont", "fastq_input|fastq_input_selector": "single", "io_options|output_format": "paf"}, "job": {"model_class": "Job", "id": "47305ec3b838f386", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:48:27.011042", "create_time": "2023-04-22T16:46:44.915080", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-txm72", "command_line": "ln -f -s '/galaxy/server/database/objects/0/a/5/dataset_0a5faf04-b681-46ce-99dd-1728e4cf7dd5.dat' reference.fa && minimap2 -x ava-ont           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/0/a/5/dataset_0a5faf04-b681-46ce-99dd-1728e4cf7dd5.dat' > '/galaxy/server/database/objects/b/8/2/dataset_b8285ec2-efe4-48e3-8df2-c9547e5ea6d1.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"paf\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"ava-ont\", \"fastq_input1\": {\"values\": [{\"id\": 137, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 137, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "f8656e01d5fb80c2", "src": "hda", "uuid": "0a5faf04-b681-46ce-99dd-1728e4cf7dd5"}, "fastq_input1": {"id": "f8656e01d5fb80c2", "src": "hda", "uuid": "0a5faf04-b681-46ce-99dd-1728e4cf7dd5"}}, "outputs": {"alignment_output": {"id": "e6ef72b3b22a05be", "src": "hda", "uuid": "b8285ec2-efe4-48e3-8df2-c9547e5ea6d1"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.022*0.95] collected minimizers\n[M::mm_idx_gen::0.034*1.86] sorted minimizers\n[M::main::0.034*1.86] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.037*1.81] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.039*1.77] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.048*1.93] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 4 reference.fa /galaxy/server/database/objects/0/a/5/dataset_0a5faf04-b681-46ce-99dd-1728e4cf7dd5.dat\n[M::main] Real time: 0.054 sec; CPU: 0.098 sec; Peak RSS: 0.011 GB\n", "stderr": "\n[M::mm_idx_gen::0.022*0.95] collected minimizers\n[M::mm_idx_gen::0.034*1.86] sorted minimizers\n[M::main::0.034*1.86] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.037*1.81] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.039*1.77] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.048*1.93] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 4 reference.fa /galaxy/server/database/objects/0/a/5/dataset_0a5faf04-b681-46ce-99dd-1728e4cf7dd5.dat\n[M::main] Real time: 0.054 sec; CPU: 0.098 sec; Peak RSS: 0.011 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:48:07", "plugin": "core", "name": "end_epoch", "raw_value": "1682182087.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:48:07", "plugin": "core", "name": "start_epoch", "raw_value": "1682182087.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 8, "time_seconds": 119.12685894966125, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "461f7ffcc46d6d0f"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "461f7ffcc46d6d0f"}, "fastq_input|analysis_type_selector": "self-homology", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "752759c9dd0864e9", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:48:36.887350", "create_time": "2023-04-22T16:46:50.550214", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-622dr", "command_line": "ln -f -s '/galaxy/server/database/objects/1/2/f/dataset_12f1253e-1fb3-47e2-b65b-722824530598.dat' reference.fa && minimap2 -DP -k19 -w19 -m200           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/1/2/f/dataset_12f1253e-1fb3-47e2-b65b-722824530598.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/b/e/7/dataset_be7e402d-9695-4b4c-b016-f84dc62834e3.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"self-homology\", \"fastq_input1\": {\"values\": [{\"id\": 138, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 138, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "461f7ffcc46d6d0f", "src": "hda", "uuid": "12f1253e-1fb3-47e2-b65b-722824530598"}, "fastq_input1": {"id": "461f7ffcc46d6d0f", "src": "hda", "uuid": "12f1253e-1fb3-47e2-b65b-722824530598"}}, "outputs": {"alignment_output": {"id": "6010732db3b1644f", "src": "hda", "uuid": "be7e402d-9695-4b4c-b016-f84dc62834e3"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.005*0.92] collected minimizers\n[M::mm_idx_gen::0.006*1.26] sorted minimizers\n[M::main::0.006*1.26] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.25] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.24] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.050*1.03] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 4 -a reference.fa /galaxy/server/database/objects/1/2/f/dataset_12f1253e-1fb3-47e2-b65b-722824530598.dat\n[M::main] Real time: 0.052 sec; CPU: 0.053 sec; Peak RSS: 0.010 GB\n", "stderr": "\n[M::mm_idx_gen::0.005*0.92] collected minimizers\n[M::mm_idx_gen::0.006*1.26] sorted minimizers\n[M::main::0.006*1.26] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.25] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.24] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.050*1.03] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 4 -a reference.fa /galaxy/server/database/objects/1/2/f/dataset_12f1253e-1fb3-47e2-b65b-722824530598.dat\n[M::main] Real time: 0.052 sec; CPU: 0.053 sec; Peak RSS: 0.010 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:48:16", "plugin": "core", "name": "end_epoch", "raw_value": "1682182096.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:48:15", "plugin": "core", "name": "start_epoch", "raw_value": "1682182095.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0", "test_index": 0, "time_seconds": 386.3201401233673, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "08fcef0395e1da68"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "9319e33a98dc133b"}, "paired_unpaired|fastq_input_selector": "paired", "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": false, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "5ba63da73232e51c", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:12:15.433566", "create_time": "2023-04-22T17:06:19.657954", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-2xrc6", "command_line": "ln -s '/galaxy/server/database/objects/f/2/3/dataset_f2366557-6141-4148-a798-b22d813aaa1b.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/a/6/5/dataset_a658c14b-6946-4f91-a594-b0d5947722bb.dat' fq2.fastq && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq' -2 'fq2.fastq' --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "long": null, "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 257, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 258, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"fastq_input1": {"id": "08fcef0395e1da68", "src": "hda", "uuid": "f2366557-6141-4148-a798-b22d813aaa1b"}, "fastq_input2": {"id": "9319e33a98dc133b", "src": "hda", "uuid": "a658c14b-6946-4f91-a594-b0d5947722bb"}}, "outputs": {"assembly_graph": {"id": "f7951cc04016aaaf", "src": "hda", "uuid": "de3c544f-bd4a-489f-8cd4-94e9b8323c71"}, "assembly": {"id": "6fd87741a2c5a59b", "src": "hda", "uuid": "a7764781-ef12-4a97-a155-b3574bbb136e"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2023-04-22 17:10:31)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/220/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon                               not used                                          \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2023-04-22 17:10:32)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2023-04-22 17:10:33)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/220/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/220/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/220/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/220/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/220/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/220/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.006     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.133    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.134    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.139    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.139    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.140    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.175    24M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.182    24M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.182    24M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.183    24M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.183    24M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.184    24M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.184    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.184    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.440    44M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.440    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.523    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.523    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.577    44M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.578    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.578    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.579    44M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.579    44M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.579    44M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.151     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:01.152     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:01.158    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.429    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.430    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.587    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.626    40M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.652    40M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.652    40M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.659    40M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.661    40M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.661    40M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.661    40M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.674    40M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.675    40M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.675    40M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.675    40M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.678    40M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.683    40M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.686    40M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.692    40M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.695    41M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.695    41M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.696    41M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.708    41M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.708    41M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.831    41M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.834    41M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.839    41M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.839    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.839    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.840    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.840    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.932    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:02.171    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.720    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.359    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.448    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:04.449    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.450    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:04.451    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:04.451    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:04.451    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.451    41M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:04.451    41M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:04.451    41M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:04.451    41M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:04.451    41M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:04.452    36M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:04\n..\n    : 246)   Deduplicating paths\n  0:00:06.005    31M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:06.005    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.005    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.005    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.005    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.005    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.005    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.006    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.006    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.006    31M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:06.006    31M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:06.006    31M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:06.006    31M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:06.014    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:06.014    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:06.020    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:06.021    31M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:06.026    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:06.033    31M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:06.039    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:06.043    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:06.052    31M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:06.055    31M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 6 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:06.000    32M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2023-04-22 17:11:38)\nFilter by read depth        (2023-04-22 17:11:38)\nFilter homopolymer loops    (2023-04-22 17:11:38)\nMerge all possible          (2023-04-22 17:11:38)\nNormalise read depths       (2023-04-22 17:11:38)\nRemove zero length segments (2023-04-22 17:11:38)\nSort link order             (2023-04-22 17:11:38)\nGraph cleaning finished     (2023-04-22 17:11:38)\nSaving /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2023-04-22 17:11:38)\nFilter by read depth        (2023-04-22 17:11:38)\nFilter homopolymer loops    (2023-04-22 17:11:38)\nMerge all possible          (2023-04-22 17:11:38)\nNormalise read depths       (2023-04-22 17:11:38)\nRemove zero length segments (2023-04-22 17:11:38)\nSort link order             (2023-04-22 17:11:38)\nGraph cleaning finished     (2023-04-22 17:11:38)\nSaving /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2023-04-22 17:11:38)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/\n\n\nDetermining graph multiplicity (2023-04-22 17:11:38)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/220/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2023-04-22 17:11:38)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/220/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2023-04-22 17:11:38)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2023-04-22 17:11:38)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2023-04-22 17:11:38)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/220/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2023-04-22 17:11:38)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2023-04-22 17:11:38)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/220/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2023-04-22 17:11:38)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/220/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/220/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/220/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/220/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/220/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/220/working/005_polished.gfa\n\n\nRotating completed replicons (2023-04-22 17:11:48)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2023-04-22 17:12:03)\nSaving /galaxy/server/database/jobs_directory/000/220/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/220/working/assembly.fasta\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2023-04-22 17:10:31)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/220/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon                               not used                                          \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2023-04-22 17:10:32)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2023-04-22 17:10:33)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/220/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/220/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/220/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/220/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/220/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/220/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.006     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.133    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.134    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.139    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.139    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.140    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.175    24M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.182    24M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.182    24M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.183    24M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.183    24M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.184    24M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.184    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.184    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.440    44M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.440    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.523    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.523    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.577    44M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.578    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.578    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.579    44M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.579    44M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.579    44M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.151     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:01.152     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:01.158    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.429    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.430    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.587    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.626    40M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.652    40M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.652    40M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.659    40M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.661    40M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.661    40M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.661    40M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.674    40M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.675    40M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.675    40M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.675    40M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.678    40M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.683    40M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.686    40M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.692    40M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.695    41M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.695    41M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.696    41M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.708    41M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.708    41M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.831    41M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.834    41M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.839    41M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.839    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.839    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.840    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.840    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.932    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:02.171    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.720    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.359    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.448    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:04.449    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.450    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:04.451    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:04.451    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:04.451    41M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.451    41M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:04.451    41M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:04.451    41M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:04.451    41M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:04.451    41M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:04.452    36M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:04\n..\n    : 246)   Deduplicating paths\n  0:00:06.005    31M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:06.005    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.005    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.005    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.005    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.005    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.005    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.006    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.006    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.006    31M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:06.006    31M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:06.006    31M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:06.006    31M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:06.014    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:06.014    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:06.020    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:06.021    31M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:06.026    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:06.033    31M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:06.039    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:06.043    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:06.052    31M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:06.055    31M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 6 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:06.000    32M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2023-04-22 17:11:38)\nFilter by read depth        (2023-04-22 17:11:38)\nFilter homopolymer loops    (2023-04-22 17:11:38)\nMerge all possible          (2023-04-22 17:11:38)\nNormalise read depths       (2023-04-22 17:11:38)\nRemove zero length segments (2023-04-22 17:11:38)\nSort link order             (2023-04-22 17:11:38)\nGraph cleaning finished     (2023-04-22 17:11:38)\nSaving /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2023-04-22 17:11:38)\nFilter by read depth        (2023-04-22 17:11:38)\nFilter homopolymer loops    (2023-04-22 17:11:38)\nMerge all possible          (2023-04-22 17:11:38)\nNormalise read depths       (2023-04-22 17:11:38)\nRemove zero length segments (2023-04-22 17:11:38)\nSort link order             (2023-04-22 17:11:38)\nGraph cleaning finished     (2023-04-22 17:11:38)\nSaving /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2023-04-22 17:11:38)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/220/working/spades_assembly/\n\n\nDetermining graph multiplicity (2023-04-22 17:11:38)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/220/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2023-04-22 17:11:38)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/220/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2023-04-22 17:11:38)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2023-04-22 17:11:38)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2023-04-22 17:11:38)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/220/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2023-04-22 17:11:38)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2023-04-22 17:11:38)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/220/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2023-04-22 17:11:38)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/220/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/220/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/220/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/220/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/220/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/220/working/005_polished.gfa\n\n\nRotating completed replicons (2023-04-22 17:11:48)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2023-04-22 17:12:03)\nSaving /galaxy/server/database/jobs_directory/000/220/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/220/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "94.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:12:04", "plugin": "core", "name": "end_epoch", "raw_value": "1682183524.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:10:30", "plugin": "core", "name": "start_epoch", "raw_value": "1682183430.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0", "test_index": 1, "time_seconds": 280.2533481121063, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "08fcef0395e1da68"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "9319e33a98dc133b"}, "paired_unpaired|fastq_input_selector": "paired", "long": {"src": "hda", "id": "93bd9d795eaedbe7"}, "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": false, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "e5f7ee3bdb5a2087", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:10:37.051212", "create_time": "2023-04-22T17:06:39.869788", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-msg97", "command_line": "ln -s '/galaxy/server/database/objects/f/2/3/dataset_f2366557-6141-4148-a798-b22d813aaa1b.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/a/6/5/dataset_a658c14b-6946-4f91-a594-b0d5947722bb.dat' fq2.fastq && ln -s '/galaxy/server/database/objects/5/c/e/dataset_5ce96908-1fe1-4016-b497-c79d686229b5.dat' 'lr.fasta' && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq' -2 'fq2.fastq' -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 257, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 258, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"fastq_input1": {"id": "08fcef0395e1da68", "src": "hda", "uuid": "f2366557-6141-4148-a798-b22d813aaa1b"}, "fastq_input2": {"id": "9319e33a98dc133b", "src": "hda", "uuid": "a658c14b-6946-4f91-a594-b0d5947722bb"}, "long": {"id": "93bd9d795eaedbe7", "src": "hda", "uuid": "5ce96908-1fe1-4016-b497-c79d686229b5"}}, "outputs": {"assembly_graph": {"id": "9a5d8df764edca96", "src": "hda", "uuid": "a97b5ca4-8a08-4547-97d9-6dcd254e0fde"}, "assembly": {"id": "c90366b0e239912b", "src": "hda", "uuid": "bfa34864-97bb-42c9-bb32-cbfef2a0e6c1"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2023-04-22 17:08:36)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/221/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon           1.4.20              good       /usr/local/bin/racon                   \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2023-04-22 17:08:38)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2023-04-22 17:08:39)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/221/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/221/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/221/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/221/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/221/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/221/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.019     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.019     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.181    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.182    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.184    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.185    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.188    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.261    24M / 28M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.275    24M / 28M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.275    24M / 28M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.276    24M / 28M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.277    24M / 28M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.279    24M / 28M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.279    24M / 28M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.279    24M / 28M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.788    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.789    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.906    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.907    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.983    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.984    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.984    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.985    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.986    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.986    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:02.080     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:02.080     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:02.087    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:02.553    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.553    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:02.829    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:02.930    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:03.003    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:03.004    43M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:03.015    43M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.017    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:03.017    43M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:03.018    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:03.034    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:03.034    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:03.035    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:03.035    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:03.047    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:03.053    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:03.058    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:03.069    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:03.071    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:03.072    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:03.072    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.108    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:03.109    42M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.341    42M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:03.351    42M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:03.364    42M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:03.365    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:03.365    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:03.366    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.366    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:03.499    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:03.886    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:04.884    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:05.918    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:07.777    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:07.778    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:07.781    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:07.782    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:07.782    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:07.783    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:07.784    42M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:07.785    42M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:07.785    42M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:07.785    42M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:07.785    42M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:07.786    42M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:07.7\n..\nworking/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:05.841    32M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2023-04-22 17:09:52)\nFilter by read depth        (2023-04-22 17:09:52)\nFilter homopolymer loops    (2023-04-22 17:09:52)\nMerge all possible          (2023-04-22 17:09:52)\nNormalise read depths       (2023-04-22 17:09:52)\nRemove zero length segments (2023-04-22 17:09:52)\nSort link order             (2023-04-22 17:09:52)\nGraph cleaning finished     (2023-04-22 17:09:52)\nSaving /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2023-04-22 17:09:52)\nFilter by read depth        (2023-04-22 17:09:52)\nFilter homopolymer loops    (2023-04-22 17:09:52)\nMerge all possible          (2023-04-22 17:09:52)\nNormalise read depths       (2023-04-22 17:09:52)\nRemove zero length segments (2023-04-22 17:09:52)\nSort link order             (2023-04-22 17:09:52)\nGraph cleaning finished     (2023-04-22 17:09:52)\nSaving /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2023-04-22 17:09:52)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/\n\n\nDetermining graph multiplicity (2023-04-22 17:09:52)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/221/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2023-04-22 17:09:52)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/221/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2023-04-22 17:09:52)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2023-04-22 17:09:52)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2023-04-22 17:09:52)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2023-04-22 17:09:52)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/221/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/221/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2023-04-22 17:09:52)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/221/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2023-04-22 17:09:52)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2023-04-22 17:09:52)\n1\t5386\t5\t5077\t-\t1\t5386\t8\t5080\t5072\t5072\t255\tcm:i:945\n1\t5386\t5093\t5384\t-\t1\t5386\t5087\t5378\t291\t291\t255\tcm:i:52\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2023-04-22 17:09:52)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5077,-,1,8,5080\n    5093,5384,-,1,5087,5378\nReference ranges:\n    1-: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 5076 points, score=5074.000394 (good)\n    line 2: 292 points, score=290.006826 (good)\nAll Seqan alignments (time to align = 0.070 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\n\n\nRead alignment summary (2023-04-22 17:09:53)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/221/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2023-04-22 17:09:53)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2023-04-22 17:09:53)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/221/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2023-04-22 17:09:53)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2023-04-22 17:09:53)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/221/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2023-04-22 17:09:53)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/221/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/221/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/221/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/221/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/221/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nPilon polish round 2\n  bowtie2-build 2_polish_input.fasta 2_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 2_polish_input.fasta -S 2_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/221/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/221/working/fq2.fastq\n  samtools sort -@ 4 -o 2_paired_alignments.bam -O bam -T temp 2_paired_alignments.sam\n  samtools index 2_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 2_polish_input.fasta --changes --output 2_pilon --outdir /galaxy/server/database/jobs_directory/000/221/working/pilon_polish --fix all --frags 2_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/221/working/005_polished.gfa\n\n\nRotating completed replicons (2023-04-22 17:10:09)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2023-04-22 17:10:26)\nSaving /galaxy/server/database/jobs_directory/000/221/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/221/working/assembly.fasta\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2023-04-22 17:08:36)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/221/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon           1.4.20              good       /usr/local/bin/racon                   \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2023-04-22 17:08:38)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2023-04-22 17:08:39)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/221/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/221/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/221/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/221/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/221/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/221/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.019     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.019     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.181    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.182    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.184    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.185    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.188    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.261    24M / 28M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.275    24M / 28M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.275    24M / 28M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.276    24M / 28M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.277    24M / 28M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.279    24M / 28M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.279    24M / 28M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.279    24M / 28M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.788    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.789    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.906    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.907    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.983    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.984    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.984    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.985    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.986    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.986    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:02.080     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:02.080     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:02.087    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:02.553    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.553    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:02.829    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:02.930    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:03.003    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:03.004    43M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:03.015    43M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.017    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:03.017    43M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:03.018    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:03.034    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:03.034    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:03.035    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:03.035    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:03.047    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:03.053    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:03.058    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:03.069    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:03.071    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:03.072    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:03.072    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.108    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:03.109    42M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.341    42M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:03.351    42M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:03.364    42M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:03.365    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:03.365    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:03.366    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.366    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:03.499    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:03.886    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:04.884    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:05.918    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:07.777    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:07.778    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:07.781    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:07.782    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:07.782    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:07.783    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:07.784    42M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:07.785    42M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:07.785    42M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:07.785    42M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:07.785    42M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:07.786    42M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:07.7\n..\nworking/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:05.841    32M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2023-04-22 17:09:52)\nFilter by read depth        (2023-04-22 17:09:52)\nFilter homopolymer loops    (2023-04-22 17:09:52)\nMerge all possible          (2023-04-22 17:09:52)\nNormalise read depths       (2023-04-22 17:09:52)\nRemove zero length segments (2023-04-22 17:09:52)\nSort link order             (2023-04-22 17:09:52)\nGraph cleaning finished     (2023-04-22 17:09:52)\nSaving /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2023-04-22 17:09:52)\nFilter by read depth        (2023-04-22 17:09:52)\nFilter homopolymer loops    (2023-04-22 17:09:52)\nMerge all possible          (2023-04-22 17:09:52)\nNormalise read depths       (2023-04-22 17:09:52)\nRemove zero length segments (2023-04-22 17:09:52)\nSort link order             (2023-04-22 17:09:52)\nGraph cleaning finished     (2023-04-22 17:09:52)\nSaving /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2023-04-22 17:09:52)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/\n\n\nDetermining graph multiplicity (2023-04-22 17:09:52)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/221/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2023-04-22 17:09:52)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/221/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2023-04-22 17:09:52)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2023-04-22 17:09:52)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2023-04-22 17:09:52)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2023-04-22 17:09:52)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/221/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/221/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2023-04-22 17:09:52)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/221/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2023-04-22 17:09:52)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2023-04-22 17:09:52)\n1\t5386\t5\t5077\t-\t1\t5386\t8\t5080\t5072\t5072\t255\tcm:i:945\n1\t5386\t5093\t5384\t-\t1\t5386\t5087\t5378\t291\t291\t255\tcm:i:52\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2023-04-22 17:09:52)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5077,-,1,8,5080\n    5093,5384,-,1,5087,5378\nReference ranges:\n    1-: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 5076 points, score=5074.000394 (good)\n    line 2: 292 points, score=290.006826 (good)\nAll Seqan alignments (time to align = 0.070 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\n\n\nRead alignment summary (2023-04-22 17:09:53)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/221/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2023-04-22 17:09:53)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2023-04-22 17:09:53)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/221/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2023-04-22 17:09:53)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2023-04-22 17:09:53)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/221/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2023-04-22 17:09:53)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/221/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/221/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/221/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/221/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/221/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nPilon polish round 2\n  bowtie2-build 2_polish_input.fasta 2_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 2_polish_input.fasta -S 2_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/221/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/221/working/fq2.fastq\n  samtools sort -@ 4 -o 2_paired_alignments.bam -O bam -T temp 2_paired_alignments.sam\n  samtools index 2_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 2_polish_input.fasta --changes --output 2_pilon --outdir /galaxy/server/database/jobs_directory/000/221/working/pilon_polish --fix all --frags 2_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/221/working/005_polished.gfa\n\n\nRotating completed replicons (2023-04-22 17:10:09)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2023-04-22 17:10:26)\nSaving /galaxy/server/database/jobs_directory/000/221/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/221/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "110.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:10:26", "plugin": "core", "name": "end_epoch", "raw_value": "1682183426.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:08:36", "plugin": "core", "name": "start_epoch", "raw_value": "1682183316.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0", "test_index": 2, "time_seconds": 454.47951316833496, "inputs": {"paired_unpaired|fastq_input1": {"src": "hdca", "id": "e55127f40dba04e1"}, "paired_unpaired|fastq_input_selector": "paired_collection", "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": true, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "a610d0e82907b0e7", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:13:41.892822", "create_time": "2023-04-22T17:06:45.282566", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-xt9b5", "command_line": "ln -s '/galaxy/server/database/objects/f/2/3/dataset_f2366557-6141-4148-a798-b22d813aaa1b.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/a/6/5/dataset_a658c14b-6946-4f91-a594-b0d5947722bb.dat' fq2.fastq && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq' -2 'fq2.fastq' --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --no_pilon --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"true\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "long": null, "paired_unpaired": "{\"__current_case__\": 1, \"fastq_input1\": {\"values\": [{\"id\": 4, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}"}, "inputs": {"fastq_input11": {"id": "08fcef0395e1da68", "src": "hda", "uuid": "f2366557-6141-4148-a798-b22d813aaa1b"}, "fastq_input12": {"id": "9319e33a98dc133b", "src": "hda", "uuid": "a658c14b-6946-4f91-a594-b0d5947722bb"}}, "outputs": {"assembly_graph": {"id": "5130222b063a9003", "src": "hda", "uuid": "a57c9284-2c4c-47c4-a4de-049cf47b0ac1"}, "assembly": {"id": "e243b13cc32add12", "src": "hda", "uuid": "f11976d2-a45d-4476-a567-0205272e2a0c"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2023-04-22 17:12:09)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --no_pilon --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/222/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py       3.14.1    good       /usr/local/bin/spades.py  \n  racon                     not used                             \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nChoosing k-mer range for assembly (2023-04-22 17:12:10)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2023-04-22 17:12:10)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/222/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/222/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/222/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/222/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/222/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/222/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.007     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.144    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.145    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.146    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.146    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.147    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.182    24M / 28M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.188    24M / 28M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.188    24M / 28M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.188    24M / 28M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.189    24M / 28M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.189    24M / 28M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.190    24M / 28M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.190    24M / 28M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.472    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.472    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.543    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.543    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.587    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.588    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.588    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.589    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.589    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.590    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.192     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:01.193     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:01.198    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.470    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.471    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.629    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.675    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.709    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.709    43M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.717    43M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.719    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.720    43M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.720    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.731    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.732    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.732    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.733    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.737    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.742    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.746    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.755    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.758    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.758    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.758    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.775    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.775    43M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.902    43M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.905    43M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.910    43M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.910    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.910    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.910    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.911    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:02.004    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:02.247    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.802    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.456    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.542    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:04.543    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.544    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:04.545    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:04.545    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:04.545    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.545    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:04.545    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:04.545    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:04.545    43M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:04.545    43M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:04.546    43M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:04.546    43M / 57M   INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:04.546    43M / 57M   INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge r\n..\n overlaps\n  0:00:05.890    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.890    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.890    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.890    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.891    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.891    31M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:05.891    31M / 102M  INFO    General                 (launcher.cpp              : 439)   Closing gaps in paths\n  0:00:05.891    31M / 102M  INFO    General                 (launcher.cpp              : 467)   Gap closing completed\n  0:00:05.891    31M / 102M  INFO    General                 (launcher.cpp              : 296)   Traversing tandem repeats\n  0:00:05.891    31M / 102M  INFO    General                 (launcher.cpp              : 306)   Traversed 0 loops\n  0:00:05.891    31M / 102M  INFO    General                 (launcher.cpp              : 244)   Finalizing paths\n  0:00:05.892    31M / 102M  INFO    General                 (launcher.cpp              : 246)   Deduplicating paths\n  0:00:05.892    31M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:05.892    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.892    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.892    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.892    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.892    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.892    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.893    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.893    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.893    31M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:05.893    31M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:05.893    31M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:05.893    31M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:05.899    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:05.900    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:05.905    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:05.905    31M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:05.909    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:05.914    31M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:05.920    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:05.924    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:05.932    31M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:05.935    31M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 5 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:05.886    32M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2023-04-22 17:13:15)\nFilter by read depth        (2023-04-22 17:13:15)\nFilter homopolymer loops    (2023-04-22 17:13:15)\nMerge all possible          (2023-04-22 17:13:15)\nNormalise read depths       (2023-04-22 17:13:15)\nRemove zero length segments (2023-04-22 17:13:15)\nSort link order             (2023-04-22 17:13:15)\nGraph cleaning finished     (2023-04-22 17:13:15)\nSaving /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2023-04-22 17:13:15)\nFilter by read depth        (2023-04-22 17:13:15)\nFilter homopolymer loops    (2023-04-22 17:13:15)\nMerge all possible          (2023-04-22 17:13:15)\nNormalise read depths       (2023-04-22 17:13:15)\nRemove zero length segments (2023-04-22 17:13:15)\nSort link order             (2023-04-22 17:13:15)\nGraph cleaning finished     (2023-04-22 17:13:15)\nSaving /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2023-04-22 17:13:15)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/\n\n\nDetermining graph multiplicity (2023-04-22 17:13:16)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/222/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2023-04-22 17:13:16)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2023-04-22 17:13:16)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2023-04-22 17:13:16)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2023-04-22 17:13:16)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2023-04-22 17:13:16)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2023-04-22 17:13:16)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2023-04-22 17:13:16)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2023-04-22 17:13:30)\nSaving /galaxy/server/database/jobs_directory/000/222/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/222/working/assembly.fasta\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2023-04-22 17:12:09)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --no_pilon --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/222/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py       3.14.1    good       /usr/local/bin/spades.py  \n  racon                     not used                             \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nChoosing k-mer range for assembly (2023-04-22 17:12:10)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2023-04-22 17:12:10)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/222/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/222/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/222/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/222/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/222/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/222/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.007     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.144    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.145    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.146    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.146    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.147    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.182    24M / 28M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.188    24M / 28M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.188    24M / 28M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.188    24M / 28M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.189    24M / 28M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.189    24M / 28M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.190    24M / 28M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.190    24M / 28M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.472    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.472    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.543    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.543    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.587    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.588    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.588    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.589    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.589    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.590    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.192     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:01.193     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:01.198    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.470    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.471    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.629    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.675    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.709    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.709    43M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.717    43M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.719    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.720    43M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.720    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.731    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.732    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.732    43M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.733    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.737    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.742    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.746    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.755    43M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.758    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.758    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.758    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.775    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.775    43M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.902    43M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.905    43M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.910    43M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.910    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.910    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.910    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.911    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:02.004    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:02.247    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.802    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.456    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.542    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:04.543    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.544    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:04.545    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:04.545    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:04.545    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.545    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:04.545    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:04.545    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:04.545    43M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:04.545    43M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:04.546    43M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:04.546    43M / 57M   INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:04.546    43M / 57M   INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge r\n..\n overlaps\n  0:00:05.890    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.890    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.890    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.890    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.891    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.891    31M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:05.891    31M / 102M  INFO    General                 (launcher.cpp              : 439)   Closing gaps in paths\n  0:00:05.891    31M / 102M  INFO    General                 (launcher.cpp              : 467)   Gap closing completed\n  0:00:05.891    31M / 102M  INFO    General                 (launcher.cpp              : 296)   Traversing tandem repeats\n  0:00:05.891    31M / 102M  INFO    General                 (launcher.cpp              : 306)   Traversed 0 loops\n  0:00:05.891    31M / 102M  INFO    General                 (launcher.cpp              : 244)   Finalizing paths\n  0:00:05.892    31M / 102M  INFO    General                 (launcher.cpp              : 246)   Deduplicating paths\n  0:00:05.892    31M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:05.892    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.892    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.892    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.892    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.892    31M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.892    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.893    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.893    31M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.893    31M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:05.893    31M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:05.893    31M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:05.893    31M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:05.899    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:05.900    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:05.905    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:05.905    31M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:05.909    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:05.914    31M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:05.920    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:05.924    31M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:05.932    31M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:05.935    31M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 5 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:05.886    32M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2023-04-22 17:13:15)\nFilter by read depth        (2023-04-22 17:13:15)\nFilter homopolymer loops    (2023-04-22 17:13:15)\nMerge all possible          (2023-04-22 17:13:15)\nNormalise read depths       (2023-04-22 17:13:15)\nRemove zero length segments (2023-04-22 17:13:15)\nSort link order             (2023-04-22 17:13:15)\nGraph cleaning finished     (2023-04-22 17:13:15)\nSaving /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2023-04-22 17:13:15)\nFilter by read depth        (2023-04-22 17:13:15)\nFilter homopolymer loops    (2023-04-22 17:13:15)\nMerge all possible          (2023-04-22 17:13:15)\nNormalise read depths       (2023-04-22 17:13:15)\nRemove zero length segments (2023-04-22 17:13:15)\nSort link order             (2023-04-22 17:13:15)\nGraph cleaning finished     (2023-04-22 17:13:15)\nSaving /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2023-04-22 17:13:15)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/222/working/spades_assembly/\n\n\nDetermining graph multiplicity (2023-04-22 17:13:16)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/222/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2023-04-22 17:13:16)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2023-04-22 17:13:16)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2023-04-22 17:13:16)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2023-04-22 17:13:16)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2023-04-22 17:13:16)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2023-04-22 17:13:16)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/222/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2023-04-22 17:13:16)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2023-04-22 17:13:30)\nSaving /galaxy/server/database/jobs_directory/000/222/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/222/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "82.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:13:31", "plugin": "core", "name": "end_epoch", "raw_value": "1682183611.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:12:09", "plugin": "core", "name": "start_epoch", "raw_value": "1682183529.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0", "test_index": 3, "time_seconds": 456.03154611587524, "inputs": {"paired_unpaired|fastq_input_selector": "none", "long": {"src": "hda", "id": "77a3823c46f4a596"}, "min_anchor_seg_len": "10", "spades|kmers": "21,23"}, "job": {"model_class": "Job", "id": "538ea2b955c8d755", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:13:49.034900", "create_time": "2023-04-22T17:06:47.812797", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "a27c58f49c315e0d", "external_id": "gxy-w4wdd", "command_line": "ln -s '/galaxy/server/database/objects/0/2/2/dataset_022ef5ce-03c8-4c1b-ad7b-7edbf277fbf8.dat' 'lr.fasta' && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_anchor_seg_len '10'  --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmers '21,23' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"21,23\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"false\"}", "min_anchor_seg_len": "\"10\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 3, \"fastq_input_selector\": \"none\"}"}, "inputs": {"long": {"id": "77a3823c46f4a596", "src": "hda", "uuid": "022ef5ce-03c8-4c1b-ad7b-7edbf277fbf8"}}, "outputs": {"assembly_graph": {"id": "a1ab189f55515dd8", "src": "hda", "uuid": "e827960f-de5a-459a-b213-b359446a536d"}, "assembly": {"id": "261569c18122d94a", "src": "hda", "uuid": "0d605e99-95ba-4ff4-8ddc-92f9078e66e8"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2023-04-22 17:13:35)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only long reads, Unicycler will assemble the reads with miniasm and\nthen run repeated polishing rounds using Racon.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/223/working\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py                 not used                             \n  racon           1.4.20    good       /usr/local/bin/racon      \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nLoading reads (2023-04-22 17:13:36)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2023-04-22 17:13:36)\nSaving to /galaxy/server/database/jobs_directory/000/223/working/miniasm_assembly/01_assembly_reads.fastq:\n  40 long reads\n\nFinding overlaps with minimap... success\n  120 overlaps\n\nAssembling reads with miniasm... success\n  7 segments, 6 links\n\n    Unicycler removes any links from the string graph which create branches.\nI.e. if any segment has two or more links connected to one end, those links are\nremoved. This will result in a graph with only simple linear paths that is\nsuitable for creating unambiguous bridges.\n\nNo links needed removal\nSaving /galaxy/server/database/jobs_directory/000/223/working/miniasm_assembly/11_branching_paths_removed.gfa\nMerging segments into unitigs:\n\nLinear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-\n\n  1 linear unitig\n  total size = 5,836 bp\nSaving /galaxy/server/database/jobs_directory/000/223/working/miniasm_assembly/12_unitig_graph.gfa\nSaving /galaxy/server/database/jobs_directory/000/223/working/002_unitig_graph.gfa\n\n\nPolishing miniasm assembly with Racon (2023-04-22 17:13:36)\n    Unicycler now uses Racon to polish the miniasm assembly. It does multiple\nrounds of polishing to get the best consensus. Circular unitigs are rotated\nbetween rounds such that all parts (including the ends) are polished well.\n\nSaving to /galaxy/server/database/jobs_directory/000/223/working/miniasm_assembly/racon_polish/polishing_reads.fastq:\n  40 long reads\n\nPolish       Assembly          Mapping\nround            size          quality\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t210\t4010\t+\t1\t5836\t1061\t4603\t1147\t3800\t255\tcm:i:200\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t5836\t5221\t5833\t179\t612\t255\tcm:i:27\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t5836\t2376\t5833\t3457\t3457\t255\tcm:i:1153\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2525\t-\t1\t5836\t30\t2314\t787\t2399\t255\tcm:i:144\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t280\t4284\t-\t1\t5836\t4\t3936\t1481\t4004\t255\tcm:i:246\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4286\t-\t1\t5836\t4215\t5833\t546\t1618\t255\tcm:i:88\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t170\t4027\t+\t1\t5836\t1680\t5833\t1032\t4153\t255\tcm:i:174\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4082\t+\t1\t5836\t4\t1602\t220\t1598\t255\tcm:i:30\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1334\t4566\t-\t1\t5836\t2699\t5786\t1281\t3232\t255\tcm:i:243\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t5836\t50\t2663\t772\t2680\t255\tcm:i:129\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t5836\t2657\t5833\t1469\t3386\t255\tcm:i:268\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2786\t-\t1\t5836\t30\t2636\t905\t2689\t255\tcm:i:157\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t143\t4271\t-\t1\t5836\t338\t4254\t1834\t4128\t255\tcm:i:470\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3092\t4330\t-\t1\t5836\t4503\t5798\t430\t1295\t255\tcm:i:77\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t544\t4408\t-\t1\t5836\t69\t3927\t1208\t3864\t255\tcm:i:237\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3008\t4472\t-\t1\t5836\t4215\t5748\t351\t1533\t255\tcm:i:53\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t5836\t2909\t3222\t131\t313\t255\tcm:i:22\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t335\t4397\t+\t1\t5836\t1321\t5257\t1351\t4062\t255\tcm:i:280\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4349\t+\t1\t5836\t23\t961\t238\t938\t255\tcm:i:40\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t537\t+\t1\t5836\t5334\t5798\t154\t464\t255\tcm:i:26\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t111\t4359\t-\t1\t5836\t1673\t5798\t2062\t4248\t255\tcm:i:487\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t109\t1619\t-\t1\t5836\t30\t1525\t472\t1510\t255\tcm:i:68\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t5836\t1733\t5833\t1303\t4100\t255\tcm:i:230\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t5836\t4\t1690\t311\t1712\t255\tcm:i:43\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4205\t+\t1\t5836\t23\t3939\t1039\t3916\t255\tcm:i:166\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t296\t1782\t+\t1\t5836\t4242\t5798\t367\t1556\t255\tcm:i:63\nbegin           5,836             5.33\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6290\t1009\t5054\t2431\t4045\t255\tcm:i:529\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6290\t5670\t6287\t297\t617\t255\tcm:i:63\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6290\t4\t404\t122\t400\t255\tcm:i:19\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6290\t2540\t6287\t2249\t3747\t255\tcm:i:527\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6290\t51\t2474\t1276\t2423\t255\tcm:i:245\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6290\t4\t4316\t2322\t4312\t255\tcm:i:486\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6290\t4354\t6287\t943\t1933\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t116\t4027\t+\t1\t6290\t1774\t6287\t2145\t4513\t255\tcm:i:426\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6290\t4\t1741\t421\t1737\t255\tcm:i:61\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6290\t2854\t6226\t2257\t3372\t255\tcm:i:501\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6290\t51\t2831\t1459\t2780\t255\tcm:i:289\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6290\t2825\t6287\t2268\t3462\t255\tcm:i:513\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2745\t-\t1\t6290\t74\t2805\t1501\t2731\t255\tcm:i:289\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6290\t354\t4699\t2022\t4345\t255\tcm:i:377\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6290\t4984\t6271\t614\t1287\t255\tcm:i:117\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6290\t72\t4534\t1921\t4462\t255\tcm:i:337\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6290\t4597\t6206\t580\t1609\t255\tcm:i:103\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6290\t3083\t3386\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6290\t1126\t5708\t2368\t4582\t255\tcm:i:487\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4392\t+\t1\t6290\t23\t1039\t362\t1016\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t539\t+\t1\t6290\t5785\t6254\t217\t469\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6290\t1806\t6258\t2777\t4452\t255\tcm:i:600\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6290\t74\t1603\t761\t1529\t255\tcm:i:150\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t795\t+\t1\t6290\t5209\t5912\t149\t703\t255\tcm:i:24\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6290\t585\t1307\t155\t722\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t6290\t1886\t6287\t2070\t4401\t255\tcm:i:456\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6290\t4\t1838\t656\t1834\t255\tcm:i:109\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6290\t2060\t2358\t156\t298\t255\tcm:i:35\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6290\t23\t4436\t2106\t4413\t255\tcm:i:421\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6290\t4488\t6273\t744\t1785\t255\tcm:i:131\n1               6,290             7.82\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6242\t1016\t5009\t2460\t3993\t255\tcm:i:530\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6242\t5626\t6239\t283\t613\t255\tcm:i:61\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6242\t4\t408\t117\t404\t255\tcm:i:18\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6242\t2535\t6239\t2234\t3704\t255\tcm:i:514\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6242\t51\t2469\t1387\t2418\t255\tcm:i:271\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6242\t4\t4276\t2380\t4272\t255\tcm:i:494\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6242\t4314\t6239\t955\t1925\t255\tcm:i:196\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6242\t1759\t6239\t2194\t4480\t255\tcm:i:440\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6242\t4\t1735\t450\t1731\t255\tcm:i:67\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6242\t2848\t6178\t2284\t3330\t255\tcm:i:509\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6242\t51\t2825\t1504\t2774\t255\tcm:i:295\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6242\t2819\t6239\t2235\t3420\t255\tcm:i:510\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t109\t2745\t-\t1\t6242\t74\t2787\t1517\t2713\t255\tcm:i:304\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6242\t358\t4659\t2051\t4301\t255\tcm:i:391\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6242\t4939\t6223\t618\t1284\t255\tcm:i:114\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6242\t72\t4493\t1941\t4421\t255\tcm:i:345\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6242\t4556\t6158\t579\t1602\t255\tcm:i:105\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6242\t3077\t3380\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6242\t1133\t5664\t2405\t4531\t255\tcm:i:507\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6242\t23\t1051\t353\t1028\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6242\t5759\t6206\t204\t447\t255\tcm:i:40\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6242\t1799\t6210\t2749\t4411\t255\tcm:i:591\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6242\t74\t1601\t795\t1527\t255\tcm:i:165\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6242\t5166\t5916\t224\t750\t255\tcm:i:35\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t160\t847\t+\t1\t6242\t602\t1310\t144\t708\t255\tcm:i:16\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6242\t1908\t6239\t2061\t4331\t255\tcm:i:454\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6242\t4\t1831\t667\t1827\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6242\t2053\t2352\t157\t299\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6242\t23\t4395\t2130\t4372\t255\tcm:i:425\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6242\t4447\t6225\t762\t1778\t255\tcm:i:138\n2               6,242             8.02\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6265\t1028\t5025\t2436\t3997\t255\tcm:i:527\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6265\t5642\t6262\t281\t620\t255\tcm:i:59\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6265\t4\t408\t105\t404\t255\tcm:i:17\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6265\t2544\t6262\t2228\t3718\t255\tcm:i:507\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6265\t51\t2478\t1353\t2427\t255\tcm:i:260\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6265\t4\t4293\t2377\t4289\t255\tcm:i:492\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6265\t4331\t6262\t967\t1931\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6265\t1772\t6262\t2190\t4490\t255\tcm:i:436\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6265\t4\t1748\t448\t1744\t255\tcm:i:62\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6265\t2857\t6201\t2270\t3344\t255\tcm:i:503\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6265\t51\t2834\t1463\t2783\t255\tcm:i:284\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6265\t2828\t6262\t2251\t3434\t255\tcm:i:515\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t102\t2745\t-\t1\t6265\t74\t2804\t1511\t2730\t255\tcm:i:305\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6265\t358\t4676\t2063\t4318\t255\tcm:i:392\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4328\t-\t1\t6265\t4930\t6246\t623\t1316\t255\tcm:i:113\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6265\t72\t4510\t1987\t4438\t255\tcm:i:350\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6265\t4573\t6181\t569\t1608\t255\tcm:i:102\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6265\t3089\t3392\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6265\t1145\t5680\t2423\t4535\t255\tcm:i:509\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6265\t23\t1063\t337\t1040\t255\tcm:i:56\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6265\t5779\t6229\t223\t450\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6265\t1812\t6233\t2769\t4421\t255\tcm:i:601\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6265\t74\t1615\t764\t1541\t255\tcm:i:156\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6265\t5182\t5936\t236\t754\t255\tcm:i:36\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6265\t589\t1322\t155\t733\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6265\t1921\t6262\t2062\t4341\t255\tcm:i:449\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6265\t4\t1844\t660\t1840\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6265\t2063\t2361\t157\t298\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6265\t23\t4412\t2182\t4389\t255\tcm:i:436\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6265\t4464\t6248\t787\t1784\t255\tcm:i:141\n3               6,265             8.04\n\nBest polish: /galaxy/server/database/jobs_directory/000/223/working/miniasm_assembly/racon_polish/016_rotated.fasta\nSaving /galaxy/server/database/jobs_directory/000/223/working/miniasm_assembly/13_racon_polished.gfa\nSaving /galaxy/server/database/jobs_directory/000/223/working/003_racon_polished.gfa\n\n\nAssembly complete (2023-04-22 17:13:36)\nSaving /galaxy/server/database/jobs_directory/000/223/working/assembly.gfa\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2023-04-22 17:13:35)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only long reads, Unicycler will assemble the reads with miniasm and\nthen run repeated polishing rounds using Racon.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/223/working\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py                 not used                             \n  racon           1.4.20    good       /usr/local/bin/racon      \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nLoading reads (2023-04-22 17:13:36)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2023-04-22 17:13:36)\nSaving to /galaxy/server/database/jobs_directory/000/223/working/miniasm_assembly/01_assembly_reads.fastq:\n  40 long reads\n\nFinding overlaps with minimap... success\n  120 overlaps\n\nAssembling reads with miniasm... success\n  7 segments, 6 links\n\n    Unicycler removes any links from the string graph which create branches.\nI.e. if any segment has two or more links connected to one end, those links are\nremoved. This will result in a graph with only simple linear paths that is\nsuitable for creating unambiguous bridges.\n\nNo links needed removal\nSaving /galaxy/server/database/jobs_directory/000/223/working/miniasm_assembly/11_branching_paths_removed.gfa\nMerging segments into unitigs:\n\nLinear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-\n\n  1 linear unitig\n  total size = 5,836 bp\nSaving /galaxy/server/database/jobs_directory/000/223/working/miniasm_assembly/12_unitig_graph.gfa\nSaving /galaxy/server/database/jobs_directory/000/223/working/002_unitig_graph.gfa\n\n\nPolishing miniasm assembly with Racon (2023-04-22 17:13:36)\n    Unicycler now uses Racon to polish the miniasm assembly. It does multiple\nrounds of polishing to get the best consensus. Circular unitigs are rotated\nbetween rounds such that all parts (including the ends) are polished well.\n\nSaving to /galaxy/server/database/jobs_directory/000/223/working/miniasm_assembly/racon_polish/polishing_reads.fastq:\n  40 long reads\n\nPolish       Assembly          Mapping\nround            size          quality\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t210\t4010\t+\t1\t5836\t1061\t4603\t1147\t3800\t255\tcm:i:200\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t5836\t5221\t5833\t179\t612\t255\tcm:i:27\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t5836\t2376\t5833\t3457\t3457\t255\tcm:i:1153\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2525\t-\t1\t5836\t30\t2314\t787\t2399\t255\tcm:i:144\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t280\t4284\t-\t1\t5836\t4\t3936\t1481\t4004\t255\tcm:i:246\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4286\t-\t1\t5836\t4215\t5833\t546\t1618\t255\tcm:i:88\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t170\t4027\t+\t1\t5836\t1680\t5833\t1032\t4153\t255\tcm:i:174\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4082\t+\t1\t5836\t4\t1602\t220\t1598\t255\tcm:i:30\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1334\t4566\t-\t1\t5836\t2699\t5786\t1281\t3232\t255\tcm:i:243\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t5836\t50\t2663\t772\t2680\t255\tcm:i:129\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t5836\t2657\t5833\t1469\t3386\t255\tcm:i:268\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2786\t-\t1\t5836\t30\t2636\t905\t2689\t255\tcm:i:157\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t143\t4271\t-\t1\t5836\t338\t4254\t1834\t4128\t255\tcm:i:470\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3092\t4330\t-\t1\t5836\t4503\t5798\t430\t1295\t255\tcm:i:77\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t544\t4408\t-\t1\t5836\t69\t3927\t1208\t3864\t255\tcm:i:237\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3008\t4472\t-\t1\t5836\t4215\t5748\t351\t1533\t255\tcm:i:53\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t5836\t2909\t3222\t131\t313\t255\tcm:i:22\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t335\t4397\t+\t1\t5836\t1321\t5257\t1351\t4062\t255\tcm:i:280\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4349\t+\t1\t5836\t23\t961\t238\t938\t255\tcm:i:40\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t537\t+\t1\t5836\t5334\t5798\t154\t464\t255\tcm:i:26\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t111\t4359\t-\t1\t5836\t1673\t5798\t2062\t4248\t255\tcm:i:487\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t109\t1619\t-\t1\t5836\t30\t1525\t472\t1510\t255\tcm:i:68\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t5836\t1733\t5833\t1303\t4100\t255\tcm:i:230\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t5836\t4\t1690\t311\t1712\t255\tcm:i:43\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4205\t+\t1\t5836\t23\t3939\t1039\t3916\t255\tcm:i:166\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t296\t1782\t+\t1\t5836\t4242\t5798\t367\t1556\t255\tcm:i:63\nbegin           5,836             5.33\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6290\t1009\t5054\t2431\t4045\t255\tcm:i:529\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6290\t5670\t6287\t297\t617\t255\tcm:i:63\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6290\t4\t404\t122\t400\t255\tcm:i:19\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6290\t2540\t6287\t2249\t3747\t255\tcm:i:527\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6290\t51\t2474\t1276\t2423\t255\tcm:i:245\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6290\t4\t4316\t2322\t4312\t255\tcm:i:486\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6290\t4354\t6287\t943\t1933\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t116\t4027\t+\t1\t6290\t1774\t6287\t2145\t4513\t255\tcm:i:426\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6290\t4\t1741\t421\t1737\t255\tcm:i:61\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6290\t2854\t6226\t2257\t3372\t255\tcm:i:501\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6290\t51\t2831\t1459\t2780\t255\tcm:i:289\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6290\t2825\t6287\t2268\t3462\t255\tcm:i:513\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2745\t-\t1\t6290\t74\t2805\t1501\t2731\t255\tcm:i:289\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6290\t354\t4699\t2022\t4345\t255\tcm:i:377\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6290\t4984\t6271\t614\t1287\t255\tcm:i:117\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6290\t72\t4534\t1921\t4462\t255\tcm:i:337\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6290\t4597\t6206\t580\t1609\t255\tcm:i:103\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6290\t3083\t3386\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6290\t1126\t5708\t2368\t4582\t255\tcm:i:487\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4392\t+\t1\t6290\t23\t1039\t362\t1016\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t539\t+\t1\t6290\t5785\t6254\t217\t469\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6290\t1806\t6258\t2777\t4452\t255\tcm:i:600\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6290\t74\t1603\t761\t1529\t255\tcm:i:150\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t795\t+\t1\t6290\t5209\t5912\t149\t703\t255\tcm:i:24\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6290\t585\t1307\t155\t722\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t6290\t1886\t6287\t2070\t4401\t255\tcm:i:456\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6290\t4\t1838\t656\t1834\t255\tcm:i:109\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6290\t2060\t2358\t156\t298\t255\tcm:i:35\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6290\t23\t4436\t2106\t4413\t255\tcm:i:421\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6290\t4488\t6273\t744\t1785\t255\tcm:i:131\n1               6,290             7.82\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6242\t1016\t5009\t2460\t3993\t255\tcm:i:530\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6242\t5626\t6239\t283\t613\t255\tcm:i:61\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6242\t4\t408\t117\t404\t255\tcm:i:18\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6242\t2535\t6239\t2234\t3704\t255\tcm:i:514\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6242\t51\t2469\t1387\t2418\t255\tcm:i:271\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6242\t4\t4276\t2380\t4272\t255\tcm:i:494\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6242\t4314\t6239\t955\t1925\t255\tcm:i:196\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6242\t1759\t6239\t2194\t4480\t255\tcm:i:440\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6242\t4\t1735\t450\t1731\t255\tcm:i:67\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6242\t2848\t6178\t2284\t3330\t255\tcm:i:509\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6242\t51\t2825\t1504\t2774\t255\tcm:i:295\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6242\t2819\t6239\t2235\t3420\t255\tcm:i:510\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t109\t2745\t-\t1\t6242\t74\t2787\t1517\t2713\t255\tcm:i:304\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6242\t358\t4659\t2051\t4301\t255\tcm:i:391\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6242\t4939\t6223\t618\t1284\t255\tcm:i:114\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6242\t72\t4493\t1941\t4421\t255\tcm:i:345\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6242\t4556\t6158\t579\t1602\t255\tcm:i:105\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6242\t3077\t3380\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6242\t1133\t5664\t2405\t4531\t255\tcm:i:507\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6242\t23\t1051\t353\t1028\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6242\t5759\t6206\t204\t447\t255\tcm:i:40\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6242\t1799\t6210\t2749\t4411\t255\tcm:i:591\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6242\t74\t1601\t795\t1527\t255\tcm:i:165\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6242\t5166\t5916\t224\t750\t255\tcm:i:35\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t160\t847\t+\t1\t6242\t602\t1310\t144\t708\t255\tcm:i:16\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6242\t1908\t6239\t2061\t4331\t255\tcm:i:454\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6242\t4\t1831\t667\t1827\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6242\t2053\t2352\t157\t299\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6242\t23\t4395\t2130\t4372\t255\tcm:i:425\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6242\t4447\t6225\t762\t1778\t255\tcm:i:138\n2               6,242             8.02\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6265\t1028\t5025\t2436\t3997\t255\tcm:i:527\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6265\t5642\t6262\t281\t620\t255\tcm:i:59\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6265\t4\t408\t105\t404\t255\tcm:i:17\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6265\t2544\t6262\t2228\t3718\t255\tcm:i:507\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6265\t51\t2478\t1353\t2427\t255\tcm:i:260\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6265\t4\t4293\t2377\t4289\t255\tcm:i:492\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6265\t4331\t6262\t967\t1931\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6265\t1772\t6262\t2190\t4490\t255\tcm:i:436\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6265\t4\t1748\t448\t1744\t255\tcm:i:62\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6265\t2857\t6201\t2270\t3344\t255\tcm:i:503\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6265\t51\t2834\t1463\t2783\t255\tcm:i:284\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6265\t2828\t6262\t2251\t3434\t255\tcm:i:515\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t102\t2745\t-\t1\t6265\t74\t2804\t1511\t2730\t255\tcm:i:305\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6265\t358\t4676\t2063\t4318\t255\tcm:i:392\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4328\t-\t1\t6265\t4930\t6246\t623\t1316\t255\tcm:i:113\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6265\t72\t4510\t1987\t4438\t255\tcm:i:350\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6265\t4573\t6181\t569\t1608\t255\tcm:i:102\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6265\t3089\t3392\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6265\t1145\t5680\t2423\t4535\t255\tcm:i:509\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6265\t23\t1063\t337\t1040\t255\tcm:i:56\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6265\t5779\t6229\t223\t450\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6265\t1812\t6233\t2769\t4421\t255\tcm:i:601\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6265\t74\t1615\t764\t1541\t255\tcm:i:156\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6265\t5182\t5936\t236\t754\t255\tcm:i:36\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6265\t589\t1322\t155\t733\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6265\t1921\t6262\t2062\t4341\t255\tcm:i:449\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6265\t4\t1844\t660\t1840\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6265\t2063\t2361\t157\t298\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6265\t23\t4412\t2182\t4389\t255\tcm:i:436\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6265\t4464\t6248\t787\t1784\t255\tcm:i:141\n3               6,265             8.04\n\nBest polish: /galaxy/server/database/jobs_directory/000/223/working/miniasm_assembly/racon_polish/016_rotated.fasta\nSaving /galaxy/server/database/jobs_directory/000/223/working/miniasm_assembly/13_racon_polished.gfa\nSaving /galaxy/server/database/jobs_directory/000/223/working/003_racon_polished.gfa\n\n\nAssembly complete (2023-04-22 17:13:36)\nSaving /galaxy/server/database/jobs_directory/000/223/working/assembly.gfa\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:13:36", "plugin": "core", "name": "end_epoch", "raw_value": "1682183616.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:13:35", "plugin": "core", "name": "start_epoch", "raw_value": "1682183615.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_FPKM_count/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_FPKM_count", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 141.66702818870544, "inputs": {"input": {"src": "hda", "id": "c6c3143216f627c5"}, "refgene": {"src": "hda", "id": "4a9aa963efe726fd"}}, "job": {"model_class": "Job", "id": "6e91430a7d5ae893", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:33:26.573953", "create_time": "2023-04-22T16:31:46.276306", "galaxy_version": "21.09", "command_version": "FPKM_count.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_FPKM_count/2.6.4.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-wzmms", "command_line": "ln -sf '/galaxy/server/database/objects/e/d/d/dataset_edda3577-cd75-420e-9660-ff4a88edbe70.dat' 'local_input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/a/3/e/metadata_a3ee105e-a881-4315-83c5-3af7d46a390d.dat' 'local_input.bam.bai' && FPKM_count.py -i 'local_input.bam' -o output -r '/galaxy/server/database/objects/0/c/6/dataset_0c674db0-7900-4ead-8c9b-f5f02fe7da42.dat'          --single-read=\"1\"", "traceback": null, "params": {"strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "multihits_type": "{\"__current_case__\": 1, \"multihits_type_selector\": \"use_multihits\"}", "onlyexonic": "\"false\"", "singleread": "\"1\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"refgene": {"id": "4a9aa963efe726fd", "src": "hda", "uuid": "0c674db0-7900-4ead-8c9b-f5f02fe7da42"}, "input": {"id": "c6c3143216f627c5", "src": "hda", "uuid": "edda3577-cd75-420e-9660-ff4a88edbe70"}}, "outputs": {"outputxls": {"id": "7f0bdd596524d3e4", "src": "hda", "uuid": "0f99c6ce-b0ba-4b8e-965e-f7b71851d2d5"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Extract exon regions from  /galaxy/server/database/objects/0/c/6/dataset_0c674db0-7900-4ead-8c9b-f5f02fe7da42.dat...\nCounting total fragment ...  Done\nTotal fragment = 20.0                \nTotal exonic fragment = 2.0                 \n 1 transcripts finished\r 2 transcripts finished\r 3 transcripts finished\r 4 transcripts finished\r 5 transcripts finished\r 6 transcripts finished\r 7 transcripts finished\r", "job_stdout": "", "job_stderr": "", "stderr": "Extract exon regions from  /galaxy/server/database/objects/0/c/6/dataset_0c674db0-7900-4ead-8c9b-f5f02fe7da42.dat...\nCounting total fragment ...  Done\nTotal fragment = 20.0                \nTotal exonic fragment = 2.0                 \n 1 transcripts finished\r 2 transcripts finished\r 3 transcripts finished\r 4 transcripts finished\r 5 transcripts finished\r 6 transcripts finished\r 7 transcripts finished\r", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:33:12", "plugin": "core", "name": "start_epoch", "raw_value": "1682181192.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:33:12", "plugin": "core", "name": "end_epoch", "raw_value": "1682181192.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RNA_fragment_size/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RNA_fragment_size", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 134.76042675971985, "inputs": {"input": {"src": "hda", "id": "88427c8050bc761c"}, "refgene": {"src": "hda", "id": "cc1acf15cc753a77"}}, "job": {"model_class": "Job", "id": "7e528cf07ec95f5d", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:35:37.106718", "create_time": "2023-04-22T16:33:47.572210", "galaxy_version": "21.09", "command_version": "RNA_fragment_size.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RNA_fragment_size/2.6.4.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-67sx9", "command_line": "ln -sf '/galaxy/server/database/objects/a/7/1/dataset_a7148de4-eb92-409e-b21c-820a2d421245.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/0/0/2/metadata_002c25e8-bead-4374-ba19-995047401cff.dat' 'input.bam.bai' && RNA_fragment_size.py -i 'input.bam' --refgene='/galaxy/server/database/objects/a/6/c/dataset_a6c4a9d2-6f5e-4a48-a62c-697e5fb55144.dat' --mapq=30 --frag-num=3 > '/galaxy/server/database/objects/8/d/9/dataset_8d9a6775-b620-49db-807d-d782036075c6.dat'", "traceback": null, "params": {"mapq": "\"30\"", "fragnum": "\"3\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"auto\""}, "inputs": {"refgene": {"id": "cc1acf15cc753a77", "src": "hda", "uuid": "a6c4a9d2-6f5e-4a48-a62c-697e5fb55144"}, "input": {"id": "88427c8050bc761c", "src": "hda", "uuid": "a7148de4-eb92-409e-b21c-820a2d421245"}}, "outputs": {"output": {"id": "6dee65ee4710948b", "src": "hda", "uuid": "8d9a6775-b620-49db-807d-d782036075c6"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:35:24", "plugin": "core", "name": "start_epoch", "raw_value": "1682181324.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:35:24", "plugin": "core", "name": "end_epoch", "raw_value": "1682181324.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RPKM_saturation/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RPKM_saturation", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 132.03554582595825, "inputs": {"input": {"src": "hda", "id": "607f9bbbe62da861"}, "refgene": {"src": "hda", "id": "b5930693a16d8967"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "4397b63c8adbab16", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:35:30.584965", "create_time": "2023-04-22T16:33:45.432444", "galaxy_version": "21.09", "command_version": "RPKM_saturation.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RPKM_saturation/2.6.4.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-9bfpd", "command_line": "RPKM_saturation.py -i '/galaxy/server/database/objects/c/5/3/dataset_c530ae38-c38c-417f-9416-cb960f657fd9.dat' -o output -r '/galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat'    -l 5 -u 100 -s 5 -c 0.01", "traceback": null, "params": {"strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "percentileFloor": "\"5\"", "percentileCeiling": "\"100\"", "percentileStep": "\"5\"", "rpkmCutoff": "\"0.01\"", "mapq": "\"30\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"refgene": {"id": "aa1a6622b07bbc04", "src": "hda", "uuid": "28c12955-4304-43a3-b8d1-ce4f09fe73d9"}, "input": {"id": "607f9bbbe62da861", "src": "hda", "uuid": "c530ae38-c38c-417f-9416-cb960f657fd9"}}, "outputs": {"outputpdf": {"id": "d05ac8c881bf02f5", "src": "hda", "uuid": "bc888430-ee3b-4751-a24b-8e2dac262526"}, "outputxls": {"id": "8269f27c5cc30e53", "src": "hda", "uuid": "7fa41a1f-b214-4c5b-acb9-dc6b91cb6192"}, "outputrawxls": {"id": "0874c6a2397a89bf", "src": "hda", "uuid": "68725dc6-e7f8-4ba0-a209-5586262d3aaf"}, "outputr": {"id": "87ed4cefa89de1df", "src": "hda", "uuid": "919af416-218b-49ab-922e-36a5605dcae8"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nshuffling alignments ... Done\nsampling 5% (245) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 10% (491) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 15% (737) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 20% (983) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 25% (1229) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 30% (1474) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 35% (1720) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 40% (1966) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 45% (2212) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 50% (2458) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 55% (2703) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 60% (2949) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 65% (3195) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 70% (3441) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 75% (3687) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 80% (3932) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 85% (4178) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 90% (4424) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 95% (4670) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 100% (4916) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nshuffling alignments ... Done\nsampling 5% (245) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 10% (491) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 15% (737) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 20% (983) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 25% (1229) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 30% (1474) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 35% (1720) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 40% (1966) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 45% (2212) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 50% (2458) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 55% (2703) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 60% (2949) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 65% (3195) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 70% (3441) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 75% (3687) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 80% (3932) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 85% (4178) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 90% (4424) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 95% (4670) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\nsampling 100% (4916) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/2/8/c/dataset_28c12955-4304-43a3-b8d1-ce4f09fe73d9.dat ...\n\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:35:19", "plugin": "core", "name": "start_epoch", "raw_value": "1682181319.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:35:20", "plugin": "core", "name": "end_epoch", "raw_value": "1682181320.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 119.31009197235107, "inputs": {"input": {"src": "hda", "id": "378211e3369f6811"}, "chromsize": {"src": "hda", "id": "c481d3ea4ef3a59a"}}, "job": {"model_class": "Job", "id": "135c6bccda87a845", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:41:37.413238", "create_time": "2023-04-22T16:39:58.297526", "galaxy_version": "21.09", "command_version": "bam2wig.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-p2nnn", "command_line": "ln -sf '/galaxy/server/database/objects/a/1/2/dataset_a12e42c9-5db1-47f3-983d-8c980d5f6519.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/8/7/c/metadata_87c4d83e-62e4-48a6-85ce-08db537b596b.dat' 'input.bam.bai' && bam2wig.py -i 'input.bam' -s '/galaxy/server/database/objects/e/8/b/dataset_e8b3e476-66ad-429a-9540-b9b7f1bd803a.dat' -o outfile", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "wigsum_type": "{\"__current_case__\": 1, \"wigsum_type_selector\": \"raw\"}", "multihits_type": "{\"__current_case__\": 1, \"multihits_type_selector\": \"use_multihits\"}"}, "inputs": {"input": {"id": "378211e3369f6811", "src": "hda", "uuid": "a12e42c9-5db1-47f3-983d-8c980d5f6519"}, "chromsize": {"id": "c481d3ea4ef3a59a", "src": "hda", "uuid": "e8b3e476-66ad-429a-9540-b9b7f1bd803a"}}, "outputs": {"output": {"id": "b5d848fc04e716d0", "src": "hda", "uuid": "882af729-41c6-4980-abe9-f5a0bbf313c4"}}, "output_collections": {}, "tool_stdout": "Skip multi-hits:False\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/e/8/b/dataset_e8b3e476-66ad-429a-9540-b9b7f1bd803a.dat outfile.bw \n", "tool_stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "job_stdout": "", "job_stderr": "", "stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "stdout": "Skip multi-hits:False\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/e/8/b/dataset_e8b3e476-66ad-429a-9540-b9b7f1bd803a.dat outfile.bw \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:41:20", "plugin": "core", "name": "end_epoch", "raw_value": "1682181680.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:41:20", "plugin": "core", "name": "start_epoch", "raw_value": "1682181680.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig", "tool_version": "2.6.4", "test_index": 1, "time_seconds": 108.95512270927429, "inputs": {"input": {"src": "hda", "id": "6e10ea289566e485"}, "chromsize": {"src": "hda", "id": "2e3dccdd6466bd67"}, "multihits_type|mapq": "20", "multihits_type|multihits_type_selector": "skip_multihits"}, "job": {"model_class": "Job", "id": "526d96c83a1d8524", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:42:41.018153", "create_time": "2023-04-22T16:41:06.172123", "galaxy_version": "21.09", "command_version": "bam2wig.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-gwsh9", "command_line": "ln -sf '/galaxy/server/database/objects/5/0/a/dataset_50ada6a5-e7a1-4610-beed-8955026bcbc5.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/0/1/e/metadata_01e1bac1-7d8b-4b86-ab8f-cf13c97ad177.dat' 'input.bam.bai' && bam2wig.py -i 'input.bam' -s '/galaxy/server/database/objects/d/d/9/dataset_dd9a9f0a-d4c6-4589-8905-35bf355d3e7d.dat' -o outfile       --skip-multi-hits --mapq=20", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "wigsum_type": "{\"__current_case__\": 1, \"wigsum_type_selector\": \"raw\"}", "multihits_type": "{\"__current_case__\": 0, \"mapq\": \"20\", \"multihits_type_selector\": \"skip_multihits\"}"}, "inputs": {"input": {"id": "6e10ea289566e485", "src": "hda", "uuid": "50ada6a5-e7a1-4610-beed-8955026bcbc5"}, "chromsize": {"id": "2e3dccdd6466bd67", "src": "hda", "uuid": "dd9a9f0a-d4c6-4589-8905-35bf355d3e7d"}}, "outputs": {"output": {"id": "d79656f407e5a4fd", "src": "hda", "uuid": "6f20d3f7-cb93-4f6d-a37e-37b4faea6431"}}, "output_collections": {}, "tool_stdout": "Skip multi-hits:True\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/d/d/9/dataset_dd9a9f0a-d4c6-4589-8905-35bf355d3e7d.dat outfile.bw \n", "tool_stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "job_stdout": "", "job_stderr": "", "stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "stdout": "Skip multi-hits:True\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/d/d/9/dataset_dd9a9f0a-d4c6-4589-8905-35bf355d3e7d.dat outfile.bw \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:42:30", "plugin": "core", "name": "end_epoch", "raw_value": "1682181750.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:42:30", "plugin": "core", "name": "start_epoch", "raw_value": "1682181750.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig", "tool_version": "2.6.4", "test_index": 2, "time_seconds": 138.5053858757019, "inputs": {"input": {"src": "hda", "id": "f73673b8b8ba77d5"}, "chromsize": {"src": "hda", "id": "752759c9dd0864e9"}, "strand_type|pair_type": "sd", "strand_type|strand_specific": "pair"}, "job": {"model_class": "Job", "id": "f7385f1a9c0aab60", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:43:40.614974", "create_time": "2023-04-22T16:41:47.434283", "galaxy_version": "21.09", "command_version": "bam2wig.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-rnk5m", "command_line": "ln -sf '/galaxy/server/database/objects/e/7/5/dataset_e759a547-6718-4275-8c8f-fe4539bebab3.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/f/1/1/metadata_f11940d3-f8b6-41e2-b6c9-47b8f753366a.dat' 'input.bam.bai' && bam2wig.py -i 'input.bam' -s '/galaxy/server/database/objects/3/a/c/dataset_3ac26fc4-0c87-4815-8c1b-56c7f458d852.dat' -o outfile  -d '1++,1--,2+-,2-+'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strand_type": "{\"__current_case__\": 0, \"pair_type\": \"sd\", \"strand_specific\": \"pair\"}", "wigsum_type": "{\"__current_case__\": 1, \"wigsum_type_selector\": \"raw\"}", "multihits_type": "{\"__current_case__\": 1, \"multihits_type_selector\": \"use_multihits\"}"}, "inputs": {"input": {"id": "f73673b8b8ba77d5", "src": "hda", "uuid": "e759a547-6718-4275-8c8f-fe4539bebab3"}, "chromsize": {"id": "752759c9dd0864e9", "src": "hda", "uuid": "3ac26fc4-0c87-4815-8c1b-56c7f458d852"}}, "outputs": {"outputfwd": {"id": "dea66eb882231a8a", "src": "hda", "uuid": "4a792343-1c09-41e0-995b-98d2ce95c5aa"}, "outputrv": {"id": "3926e4b6fe857e6f", "src": "hda", "uuid": "1913930f-1fcd-470f-ad5a-60413ee1730f"}}, "output_collections": {}, "tool_stdout": "Skip multi-hits:False\n", "tool_stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n/bin/sh: wigToBigWig: not found\n", "job_stdout": "", "job_stderr": "", "stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n/bin/sh: wigToBigWig: not found\n", "stdout": "Skip multi-hits:False\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:43:27", "plugin": "core", "name": "end_epoch", "raw_value": "1682181807.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:43:26", "plugin": "core", "name": "start_epoch", "raw_value": "1682181806.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig", "tool_version": "2.6.4", "test_index": 3, "time_seconds": 119.73659372329712, "inputs": {"input": {"src": "hda", "id": "f73673b8b8ba77d5"}, "chromsize": {"src": "hda", "id": "752759c9dd0864e9"}, "wigsum_type|totalwig": "100", "wigsum_type|wigsum_type_selector": "normalize"}, "job": {"model_class": "Job", "id": "412b0849b12c3bc5", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:43:34.636318", "create_time": "2023-04-22T16:41:57.371921", "galaxy_version": "21.09", "command_version": "bam2wig.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-4mvc5", "command_line": "ln -sf '/galaxy/server/database/objects/e/7/5/dataset_e759a547-6718-4275-8c8f-fe4539bebab3.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/f/1/1/metadata_f11940d3-f8b6-41e2-b6c9-47b8f753366a.dat' 'input.bam.bai' && bam2wig.py -i 'input.bam' -s '/galaxy/server/database/objects/3/a/c/dataset_3ac26fc4-0c87-4815-8c1b-56c7f458d852.dat' -o outfile    -t 100", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "wigsum_type": "{\"__current_case__\": 0, \"totalwig\": \"100\", \"wigsum_type_selector\": \"normalize\"}", "multihits_type": "{\"__current_case__\": 1, \"multihits_type_selector\": \"use_multihits\"}"}, "inputs": {"input": {"id": "f73673b8b8ba77d5", "src": "hda", "uuid": "e759a547-6718-4275-8c8f-fe4539bebab3"}, "chromsize": {"id": "752759c9dd0864e9", "src": "hda", "uuid": "3ac26fc4-0c87-4815-8c1b-56c7f458d852"}}, "outputs": {"output": {"id": "ffe476f20ea295e2", "src": "hda", "uuid": "cdc7560c-cf8e-4294-a4d9-3465ee645a2b"}}, "output_collections": {}, "tool_stdout": "Skip multi-hits:False\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/3/a/c/dataset_3ac26fc4-0c87-4815-8c1b-56c7f458d852.dat outfile.bw \n", "tool_stderr": "Calcualte wigsum ... \nNo alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n\n\ntotal wigsum is:1960.0\n\nNo alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "job_stdout": "", "job_stderr": "", "stderr": "Calcualte wigsum ... \nNo alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n\n\ntotal wigsum is:1960.0\n\nNo alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "stdout": "Skip multi-hits:False\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/3/a/c/dataset_3ac26fc4-0c87-4815-8c1b-56c7f458d852.dat outfile.bw \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:43:20", "plugin": "core", "name": "end_epoch", "raw_value": "1682181800.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:43:20", "plugin": "core", "name": "start_epoch", "raw_value": "1682181800.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam_stat/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam_stat", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 121.36456537246704, "inputs": {"input": {"src": "hda", "id": "f73673b8b8ba77d5"}}, "job": {"model_class": "Job", "id": "0cdc9fce0f2645d4", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:43:38.693472", "create_time": "2023-04-22T16:42:01.314716", "galaxy_version": "21.09", "command_version": "bam_stat.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam_stat/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-7zxt4", "command_line": "bam_stat.py -i '/galaxy/server/database/objects/e/7/5/dataset_e759a547-6718-4275-8c8f-fe4539bebab3.dat' -q 30 > '/galaxy/server/database/objects/8/f/7/dataset_8f78653c-fdd1-4cab-938d-429398b24e0b.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "mapq": "\"30\""}, "inputs": {"input": {"id": "f73673b8b8ba77d5", "src": "hda", "uuid": "e759a547-6718-4275-8c8f-fe4539bebab3"}}, "outputs": {"output": {"id": "1cbf8eaa2bb7ee68", "src": "hda", "uuid": "8f78653c-fdd1-4cab-938d-429398b24e0b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Load BAM file ...  Done\n", "stderr": "\nLoad BAM file ...  Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:43:24", "plugin": "core", "name": "end_epoch", "raw_value": "1682181804.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:43:24", "plugin": "core", "name": "start_epoch", "raw_value": "1682181804.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 161.80507850646973, "inputs": {"input": {"src": "hda", "id": "e55127f40dba04e1"}}, "job": {"model_class": "Job", "id": "a206b8e873d73bf8", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:31:04.087178", "create_time": "2023-04-22T16:28:48.715317", "galaxy_version": "21.09", "command_version": "clipping_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-m7n9f", "command_line": "clipping_profile.py -i '/galaxy/server/database/objects/e/c/5/dataset_ec50d3b7-ea7a-4575-b7c3-8dd0912aec51.dat' -o output -q 30 -s \"SE\"", "traceback": null, "params": {"mapq": "\"30\"", "layout": "\"SE\"", "rscript_output": "\"false\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"input": {"id": "e55127f40dba04e1", "src": "hda", "uuid": "ec50d3b7-ea7a-4575-b7c3-8dd0912aec51"}}, "outputs": {"outputpdf": {"id": "1ea6e4c8b549a8e5", "src": "hda", "uuid": "b8544917-86e5-4759-ac5a-a2793b2921b6"}, "outputxls": {"id": "a5d94738c29170d5", "src": "hda", "uuid": "ffde8bb4-a732-400d-b043-0a0d74182a1e"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:30:32", "plugin": "core", "name": "end_epoch", "raw_value": "1682181032.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:30:32", "plugin": "core", "name": "start_epoch", "raw_value": "1682181032.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile/2.6.4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile", "tool_version": "2.6.4", "test_index": 1, "time_seconds": 117.87947249412537, "inputs": {"input": {"src": "hda", "id": "c6c3143216f627c5"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "fe9928cf4cbb3665", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:33:01.849908", "create_time": "2023-04-22T16:31:29.309953", "galaxy_version": "21.09", "command_version": "clipping_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-p27q6", "command_line": "clipping_profile.py -i '/galaxy/server/database/objects/e/d/d/dataset_edda3577-cd75-420e-9660-ff4a88edbe70.dat' -o output -q 30 -s \"SE\"", "traceback": null, "params": {"mapq": "\"30\"", "layout": "\"SE\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"auto\""}, "inputs": {"input": {"id": "c6c3143216f627c5", "src": "hda", "uuid": "edda3577-cd75-420e-9660-ff4a88edbe70"}}, "outputs": {"outputpdf": {"id": "384319a0df49d45b", "src": "hda", "uuid": "373d7b10-a511-4621-89ee-534dbe678092"}, "outputxls": {"id": "254f0921142a7bff", "src": "hda", "uuid": "3eaac610-59af-4066-b6be-764a30c45843"}, "outputr": {"id": "89f9d942972cc921", "src": "hda", "uuid": "f1fc2300-7a81-454a-a36c-b58dbe6a9a6f"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:32:50", "plugin": "core", "name": "start_epoch", "raw_value": "1682181170.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:32:51", "plugin": "core", "name": "end_epoch", "raw_value": "1682181171.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_deletion_profile/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_deletion_profile", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 110.9413537979126, "inputs": {"input": {"src": "hda", "id": "ce5b3ee0284d80db"}, "readlength": "101", "rscript_output": true}, "job": {"model_class": "Job", "id": "c7a9bfb8472be75e", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:34:52.963624", "create_time": "2023-04-22T16:33:17.758559", "galaxy_version": "21.09", "command_version": "deletion_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_deletion_profile/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-ls9cx", "command_line": "deletion_profile.py -i '/galaxy/server/database/objects/4/8/b/dataset_48b26405-ef21-40a9-93a8-72dcec8b3990.dat' -o output -l 101 -n 1000000 -q 30", "traceback": null, "params": {"readlength": "\"101\"", "readnum": "\"1000000\"", "mapq": "\"30\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"input": {"id": "ce5b3ee0284d80db", "src": "hda", "uuid": "48b26405-ef21-40a9-93a8-72dcec8b3990"}}, "outputs": {"outputpdf": {"id": "d903a4f93a474a2d", "src": "hda", "uuid": "10ba8a2c-84d5-4b1b-9056-6ea2e3aebdfc"}, "outputxls": {"id": "b1cd2d412b21d800", "src": "hda", "uuid": "1816e602-6461-444b-bf67-15fbdaed199a"}, "outputr": {"id": "b3c2c291bd2f6bf5", "src": "hda", "uuid": "91fe9310-51cd-4f2f-ac25-2f0fb367ff69"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n\n\n", "tool_stderr": "Process BAM file ...  Total reads used: 0\n", "job_stdout": "", "job_stderr": "", "stderr": "Process BAM file ...  Total reads used: 0\n", "stdout": "null device \n          1 \n\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:34:41", "plugin": "core", "name": "start_epoch", "raw_value": "1682181281.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:34:42", "plugin": "core", "name": "end_epoch", "raw_value": "1682181282.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage/2.6.4.3-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage", "tool_version": "2.6.4.3", "test_index": 0, "time_seconds": 137.3947012424469, "inputs": {"batch_mode|input": {"src": "hda", "id": "c6c3143216f627c5"}, "batch_mode|batch_mode_selector": "batch", "refgene": {"src": "hda", "id": "4a9aa963efe726fd"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "04d8e0b98cdd29a7", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:33:21.626824", "create_time": "2023-04-22T16:31:47.121763", "galaxy_version": "21.09", "command_version": "geneBody_coverage.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage/2.6.4.3", "history_id": "a27c58f49c315e0d", "external_id": "gxy-vwqdp", "command_line": "ln -sf '/galaxy/server/database/objects/e/d/d/dataset_edda3577-cd75-420e-9660-ff4a88edbe70.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/a/3/e/metadata_a3ee105e-a881-4315-83c5-3af7d46a390d.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam.bai' && geneBody_coverage.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam' -r '/galaxy/server/database/objects/0/c/6/dataset_0c674db0-7900-4ead-8c9b-f5f02fe7da42.dat' --minimum_length 100 -o output", "traceback": null, "params": {"batch_mode": "{\"__current_case__\": 0, \"batch_mode_selector\": \"batch\", \"input\": {\"values\": [{\"id\": 22, \"src\": \"hda\"}]}}", "minimum_length": "\"100\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"refgene": {"id": "4a9aa963efe726fd", "src": "hda", "uuid": "0c674db0-7900-4ead-8c9b-f5f02fe7da42"}, "input": {"id": "c6c3143216f627c5", "src": "hda", "uuid": "edda3577-cd75-420e-9660-ff4a88edbe70"}}, "outputs": {"outputtxt": {"id": "58c8238a3e567600", "src": "hda", "uuid": "7ef12967-2038-4b27-bd09-54bc434a91be"}, "outputcurvespdf": {"id": "bd6f1b1d4364e9a6", "src": "hda", "uuid": "3a8b668e-0b3c-427d-a5c9-4b096d9d0d7c"}, "outputr": {"id": "c067b94afca7e3e4", "src": "hda", "uuid": "a72b50f5-d539-4b24-8993-f33c556d1505"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "@ 2023-04-22 16:33:08: Read BED file (reference gene model) ...\n@ 2023-04-22 16:33:08: Total 7 transcripts loaded\n@ 2023-04-22 16:33:08: Get BAM file(s) ...\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam\n@ 2023-04-22 16:33:08: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...\n\n\n\n\tSample\tSkewness\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam\t3.366683083597443\n@ 2023-04-22 16:33:08: Running R script ...\n", "job_stdout": "", "job_stderr": "", "stderr": "@ 2023-04-22 16:33:08: Read BED file (reference gene model) ...\n@ 2023-04-22 16:33:08: Total 7 transcripts loaded\n@ 2023-04-22 16:33:08: Get BAM file(s) ...\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam\n@ 2023-04-22 16:33:08: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...\n\n\n\n\tSample\tSkewness\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam\t3.366683083597443\n@ 2023-04-22 16:33:08: Running R script ...\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:33:08", "plugin": "core", "name": "start_epoch", "raw_value": "1682181188.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:33:08", "plugin": "core", "name": "end_epoch", "raw_value": "1682181188.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage/2.6.4.3-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage", "tool_version": "2.6.4.3", "test_index": 1, "time_seconds": 134.31855416297913, "inputs": {"batch_mode|inputs": [{"src": "hda", "id": "c6c3143216f627c5"}, {"src": "hda", "id": "c6c3143216f627c5"}, {"src": "hda", "id": "c6c3143216f627c5"}], "batch_mode|batch_mode_selector": "merge", "refgene": {"src": "hda", "id": "4a9aa963efe726fd"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "bf1553ecfbd78d82", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:33:18.422400", "create_time": "2023-04-22T16:31:46.760507", "galaxy_version": "21.09", "command_version": "geneBody_coverage.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage/2.6.4.3", "history_id": "a27c58f49c315e0d", "external_id": "gxy-2x795", "command_line": "ln -sf '/galaxy/server/database/objects/e/d/d/dataset_edda3577-cd75-420e-9660-ff4a88edbe70.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/a/3/e/metadata_a3ee105e-a881-4315-83c5-3af7d46a390d.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam.bai' && echo 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam' >> 'input_list.txt' &&  ln -sf '/galaxy/server/database/objects/e/d/d/dataset_edda3577-cd75-420e-9660-ff4a88edbe70.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/a/3/e/metadata_a3ee105e-a881-4315-83c5-3af7d46a390d.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam.bai' && echo 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam' >> 'input_list.txt' &&  ln -sf '/galaxy/server/database/objects/e/d/d/dataset_edda3577-cd75-420e-9660-ff4a88edbe70.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/a/3/e/metadata_a3ee105e-a881-4315-83c5-3af7d46a390d.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam.bai' && echo 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam' >> 'input_list.txt' && geneBody_coverage.py -i 'input_list.txt' -r '/galaxy/server/database/objects/0/c/6/dataset_0c674db0-7900-4ead-8c9b-f5f02fe7da42.dat' --minimum_length 100 -o output", "traceback": null, "params": {"batch_mode": "{\"__current_case__\": 1, \"batch_mode_selector\": \"merge\", \"inputs\": {\"values\": [{\"id\": 22, \"src\": \"hda\"}, {\"id\": 22, \"src\": \"hda\"}, {\"id\": 22, \"src\": \"hda\"}]}}", "minimum_length": "\"100\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"refgene": {"id": "4a9aa963efe726fd", "src": "hda", "uuid": "0c674db0-7900-4ead-8c9b-f5f02fe7da42"}, "inputs": {"id": "c6c3143216f627c5", "src": "hda", "uuid": "edda3577-cd75-420e-9660-ff4a88edbe70"}, "inputs1": {"id": "c6c3143216f627c5", "src": "hda", "uuid": "edda3577-cd75-420e-9660-ff4a88edbe70"}, "inputs2": {"id": "c6c3143216f627c5", "src": "hda", "uuid": "edda3577-cd75-420e-9660-ff4a88edbe70"}, "inputs3": {"id": "c6c3143216f627c5", "src": "hda", "uuid": "edda3577-cd75-420e-9660-ff4a88edbe70"}}, "outputs": {"outputcurvespdf": {"id": "04420503c8b3e6c2", "src": "hda", "uuid": "83951fc5-2e9a-45d4-94ea-caaeeea5dd79"}, "outputr": {"id": "7e528cf07ec95f5d", "src": "hda", "uuid": "65a305ec-3cda-4a2d-9ab3-bd340e4f917a"}, "outputheatmappdf": {"id": "4397b63c8adbab16", "src": "hda", "uuid": "d8b5fd45-19ab-4394-8ca4-525f44c00d42"}, "outputtxt": {"id": "6ebffef98baeeeeb", "src": "hda", "uuid": "c0220adf-7f3b-490e-b8a4-e2c20f4ff716"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \nnull device \n          1 \n", "tool_stderr": "@ 2023-04-22 16:33:04: Read BED file (reference gene model) ...\n@ 2023-04-22 16:33:04: Total 7 transcripts loaded\n@ 2023-04-22 16:33:04: Get BAM file(s) ...\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam\n@ 2023-04-22 16:33:04: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...\n@ 2023-04-22 16:33:04: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam ...\n@ 2023-04-22 16:33:04: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam ...\n\n\n\n\tSample\tSkewness\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam\t3.366683083597443\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam.1\t3.366683083597443\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam.2\t3.366683083597443\n@ 2023-04-22 16:33:04: Running R script ...\n", "job_stdout": "", "job_stderr": "", "stderr": "@ 2023-04-22 16:33:04: Read BED file (reference gene model) ...\n@ 2023-04-22 16:33:04: Total 7 transcripts loaded\n@ 2023-04-22 16:33:04: Get BAM file(s) ...\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam\n@ 2023-04-22 16:33:04: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...\n@ 2023-04-22 16:33:04: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam ...\n@ 2023-04-22 16:33:04: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam ...\n\n\n\n\tSample\tSkewness\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam\t3.366683083597443\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam.1\t3.366683083597443\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam.2\t3.366683083597443\n@ 2023-04-22 16:33:04: Running R script ...\n", "stdout": "null device \n          1 \nnull device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:33:04", "plugin": "core", "name": "start_epoch", "raw_value": "1682181184.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:33:05", "plugin": "core", "name": "end_epoch", "raw_value": "1682181185.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage2/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage2", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 162.08304715156555, "inputs": {"input": {"src": "hda", "id": "6018f51153f15ac0"}, "refgene": {"src": "hda", "id": "59f3c864707868e5"}}, "job": {"model_class": "Job", "id": "a222f722910d365f", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:31:04.117095", "create_time": "2023-04-22T16:28:57.820738", "galaxy_version": "21.09", "command_version": "geneBody_coverage2.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage2/2.6.4.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-7fhnj", "command_line": "geneBody_coverage2.py -i '/galaxy/server/database/objects/6/3/3/dataset_6339fbb5-8352-4b18-afe6-45c719c4714b.dat' -r '/galaxy/server/database/objects/a/f/a/dataset_afa67000-fb8a-480f-906a-de842348c7e1.dat' -o output", "traceback": null, "params": {"chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bigwig\""}, "inputs": {"input": {"id": "6018f51153f15ac0", "src": "hda", "uuid": "6339fbb5-8352-4b18-afe6-45c719c4714b"}, "refgene": {"id": "8fa5518a8ab8f101", "src": "hda", "uuid": "afa67000-fb8a-480f-906a-de842348c7e1"}}, "outputs": {"outputpdf": {"id": "4849944d91252291", "src": "hda", "uuid": "28cee0c9-1055-472a-ad11-f737572e3fba"}, "outputtxt": {"id": "4b1987b5a0b5d325", "src": "hda", "uuid": "f94e6e6b-3f00-4b1f-86ef-7d8fb7c4d6b6"}, "outputr": {"id": "fe9928cf4cbb3665", "src": "hda", "uuid": "86ba76fe-8cce-4eb2-b128-df97e233526d"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "calculating coverage over gene body ...\n  1 genes finished\r  2 genes finished\r  5 genes finished\r  6 genes finished\r  7 genes finished\r", "job_stdout": "", "job_stderr": "", "stderr": "calculating coverage over gene body ...\n  1 genes finished\r  2 genes finished\r  5 genes finished\r  6 genes finished\r  7 genes finished\r", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:30:45", "plugin": "core", "name": "end_epoch", "raw_value": "1682181045.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:30:43", "plugin": "core", "name": "start_epoch", "raw_value": "1682181043.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_infer_experiment/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_infer_experiment", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 135.86862134933472, "inputs": {"input": {"src": "hda", "id": "88427c8050bc761c"}, "refgene": {"src": "hda", "id": "cc1acf15cc753a77"}}, "job": {"model_class": "Job", "id": "6ebffef98baeeeeb", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:35:42.471516", "create_time": "2023-04-22T16:34:02.798790", "galaxy_version": "21.09", "command_version": "infer_experiment.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_infer_experiment/2.6.4.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-l8mgp", "command_line": "infer_experiment.py -i '/galaxy/server/database/objects/a/7/1/dataset_a7148de4-eb92-409e-b21c-820a2d421245.dat' -r '/galaxy/server/database/objects/a/6/c/dataset_a6c4a9d2-6f5e-4a48-a62c-697e5fb55144.dat' --sample-size 200000 --mapq 30 > '/galaxy/server/database/objects/d/b/8/dataset_db8e2465-84dd-4e09-b6c2-6068fc47a004.dat'", "traceback": null, "params": {"sample_size": "\"200000\"", "mapq": "\"30\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"refgene": {"id": "cc1acf15cc753a77", "src": "hda", "uuid": "a6c4a9d2-6f5e-4a48-a62c-697e5fb55144"}, "input": {"id": "88427c8050bc761c", "src": "hda", "uuid": "a7148de4-eb92-409e-b21c-820a2d421245"}}, "outputs": {"output": {"id": "086150dd4be7f449", "src": "hda", "uuid": "db8e2465-84dd-4e09-b6c2-6068fc47a004"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Reading reference gene model /galaxy/server/database/objects/a/6/c/dataset_a6c4a9d2-6f5e-4a48-a62c-697e5fb55144.dat ... Done\nLoading SAM/BAM file ...  Finished\nTotal 30 usable reads were sampled\n", "stderr": "\nReading reference gene model /galaxy/server/database/objects/a/6/c/dataset_a6c4a9d2-6f5e-4a48-a62c-697e5fb55144.dat ... Done\nLoading SAM/BAM file ...  Finished\nTotal 30 usable reads were sampled\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:35:26", "plugin": "core", "name": "start_epoch", "raw_value": "1682181326.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:35:27", "plugin": "core", "name": "end_epoch", "raw_value": "1682181327.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_inner_distance/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_inner_distance", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 108.1245629787445, "inputs": {"input": {"src": "hda", "id": "b8045bb000d34319"}, "refgene": {"src": "hda", "id": "f7385f1a9c0aab60"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "aa1a6622b07bbc04", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:39:04.047615", "create_time": "2023-04-22T16:37:32.053785", "galaxy_version": "21.09", "command_version": "inner_distance.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_inner_distance/2.6.4.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-2q49b", "command_line": "inner_distance.py -i '/galaxy/server/database/objects/6/6/2/dataset_66250e7c-0fb9-45ca-ad95-b25f131887bd.dat' -o output -r '/galaxy/server/database/objects/9/9/c/dataset_99cd89cf-58f3-4368-812b-d6a7f2967b5a.dat' --sample-size 200000 --lower-bound -250 --upper-bound 250 --step 5 --mapq 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\"", "step": "\"5\"", "upperBound": "\"250\"", "lowerBound": "\"-250\"", "sample_size": "\"200000\""}, "inputs": {"input": {"id": "b8045bb000d34319", "src": "hda", "uuid": "66250e7c-0fb9-45ca-ad95-b25f131887bd"}, "refgene": {"id": "f7385f1a9c0aab60", "src": "hda", "uuid": "99cd89cf-58f3-4368-812b-d6a7f2967b5a"}}, "outputs": {"outputpdf": {"id": "412b0849b12c3bc5", "src": "hda", "uuid": "add5ee4d-090b-4309-a958-16cd87ee4a3a"}, "outputtxt": {"id": "0cdc9fce0f2645d4", "src": "hda", "uuid": "0aabcd51-cf3f-44cd-9270-20046d14793c"}, "outputfreqtxt": {"id": "d87feabc50292817", "src": "hda", "uuid": "9f46aac6-27a4-4c1b-a280-0458c97c58ce"}, "outputr": {"id": "05cf30897e11d0cf", "src": "hda", "uuid": "b2499a50-7ab5-4f70-a1c9-ccdb026ddd74"}}, "output_collections": {}, "tool_stdout": "Name\tMean\tMedian\tsd\noutput\t96.4736842105263\t67\t87.858705014265\nnull device \n          1 \n", "tool_stderr": "Get exon regions from /galaxy/server/database/objects/9/9/c/dataset_99cd89cf-58f3-4368-812b-d6a7f2967b5a.dat ...\nLoad BAM file ...  Done\nTotal read pairs  used 20\n", "job_stdout": "", "job_stderr": "", "stderr": "Get exon regions from /galaxy/server/database/objects/9/9/c/dataset_99cd89cf-58f3-4368-812b-d6a7f2967b5a.dat ...\nLoad BAM file ...  Done\nTotal read pairs  used 20\n", "stdout": "Name\tMean\tMedian\tsd\noutput\t96.4736842105263\t67\t87.858705014265\nnull device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:38:53", "plugin": "core", "name": "end_epoch", "raw_value": "1682181533.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:38:52", "plugin": "core", "name": "start_epoch", "raw_value": "1682181532.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_insertion_profile/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_insertion_profile", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 123.67871713638306, "inputs": {"input": {"src": "hda", "id": "378211e3369f6811"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "7a583a2373f95273", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:41:34.174877", "create_time": "2023-04-22T16:39:52.874677", "galaxy_version": "21.09", "command_version": "insertion_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_insertion_profile/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-9z2mm", "command_line": "insertion_profile.py -i '/galaxy/server/database/objects/a/1/2/dataset_a12e42c9-5db1-47f3-983d-8c980d5f6519.dat' -o output -q 30 -s \"SE\"", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "layout": "\"SE\"", "mapq": "\"30\""}, "inputs": {"input": {"id": "378211e3369f6811", "src": "hda", "uuid": "a12e42c9-5db1-47f3-983d-8c980d5f6519"}}, "outputs": {"outputpdf": {"id": "7e845fcf16f9ee7a", "src": "hda", "uuid": "53e4fb54-0d40-486e-8a41-692e0b12b1ab"}, "outputxls": {"id": "b70f7a7679710741", "src": "hda", "uuid": "b69415e4-2560-45e4-82fb-ced263818ca8"}, "outputr": {"id": "5ed99c927739e5cf", "src": "hda", "uuid": "dff9c511-0da7-4652-b412-71927694d019"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:41:17", "plugin": "core", "name": "end_epoch", "raw_value": "1682181677.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:41:16", "plugin": "core", "name": "start_epoch", "raw_value": "1682181676.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_annotation/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_annotation", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 143.36259150505066, "inputs": {"input": {"src": "hda", "id": "d06e9d763d43a092"}, "refgene": {"src": "hda", "id": "9857b578f8b35eb2"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "58c8238a3e567600", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:37:15.828114", "create_time": "2023-04-22T16:35:07.451004", "galaxy_version": "21.09", "command_version": "junction_annotation.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_annotation/2.6.4.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-t7mdv", "command_line": "junction_annotation.py --input-file '/galaxy/server/database/objects/0/8/0/dataset_08095040-7036-4a51-9fa6-c4c17994f069.dat' --refgene '/galaxy/server/database/objects/f/5/8/dataset_f5820760-b98b-4f08-80a2-3dc155f57399.dat' --out-prefix output --min-intron 50 --mapq 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\"", "min_intron": "\"50\""}, "inputs": {"refgene": {"id": "9857b578f8b35eb2", "src": "hda", "uuid": "f5820760-b98b-4f08-80a2-3dc155f57399"}, "input": {"id": "d06e9d763d43a092", "src": "hda", "uuid": "08095040-7036-4a51-9fa6-c4c17994f069"}}, "outputs": {"outputpdf": {"id": "8d50dd2647e8b4e7", "src": "hda", "uuid": "ca017bb6-6772-4337-8b79-eeb3955a1bf8"}, "outputjpdf": {"id": "777afee60edc0663", "src": "hda", "uuid": "6f099185-ab3c-47f5-981d-268ff6585537"}, "outputxls": {"id": "a0306d9d8a8dcf4e", "src": "hda", "uuid": "51537af9-e547-4330-8014-2d7baf8a8e3b"}, "outputr": {"id": "4fecd40bc41ccb5c", "src": "hda", "uuid": "af0d1c3d-cf6a-4288-8c69-615f93f08002"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \nnull device \n          1 \ntotal = 4\n", "tool_stderr": "Reading reference bed file:  /galaxy/server/database/objects/f/5/8/dataset_f5820760-b98b-4f08-80a2-3dc155f57399.dat  ...  Done\nLoad BAM file ...  Done\n\n===================================================================\nTotal splicing  Events:\t4\nKnown Splicing Events:\t1\nPartial Novel Splicing Events:\t1\nNovel Splicing Events:\t1\n\nTotal splicing  Junctions:\t3\nKnown Splicing Junctions:\t1\nPartial Novel Splicing Junctions:\t1\nNovel Splicing Junctions:\t1\n\n===================================================================\n", "job_stdout": "", "job_stderr": "", "stderr": "Reading reference bed file:  /galaxy/server/database/objects/f/5/8/dataset_f5820760-b98b-4f08-80a2-3dc155f57399.dat  ...  Done\nLoad BAM file ...  Done\n\n===================================================================\nTotal splicing  Events:\t4\nKnown Splicing Events:\t1\nPartial Novel Splicing Events:\t1\nNovel Splicing Events:\t1\n\nTotal splicing  Junctions:\t3\nKnown Splicing Junctions:\t1\nPartial Novel Splicing Junctions:\t1\nNovel Splicing Junctions:\t1\n\n===================================================================\n", "stdout": "null device \n          1 \nnull device \n          1 \ntotal = 4\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:36:57", "plugin": "core", "name": "end_epoch", "raw_value": "1682181417.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:36:56", "plugin": "core", "name": "start_epoch", "raw_value": "1682181416.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_saturation/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_saturation", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 118.5389883518219, "inputs": {"input": {"src": "hda", "id": "768b1c21da543a52"}, "refgene": {"src": "hda", "id": "fc64bf2de0889d20"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "28aabf94ff03d73a", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:45:32.880780", "create_time": "2023-04-22T16:43:59.984201", "galaxy_version": "21.09", "command_version": "junction_saturation.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_saturation/2.6.4.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-jkl5n", "command_line": "junction_saturation.py --input-file '/galaxy/server/database/objects/0/3/a/dataset_03a41c00-13a9-4a79-a696-6db82789fa30.dat' --refgene '/galaxy/server/database/objects/b/4/5/dataset_b45c82ee-5832-44ac-948a-bf6ef8d984eb.dat' --out-prefix output --min-intron 50 --min-coverage 1 --mapq 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "percentiles_type": "{\"__current_case__\": 1, \"percentiles_type_selector\": \"default\"}", "mapq": "\"30\"", "min_coverage": "\"1\"", "min_intron": "\"50\""}, "inputs": {"input": {"id": "768b1c21da543a52", "src": "hda", "uuid": "03a41c00-13a9-4a79-a696-6db82789fa30"}, "refgene": {"id": "fc64bf2de0889d20", "src": "hda", "uuid": "b45c82ee-5832-44ac-948a-bf6ef8d984eb"}}, "outputs": {"outputpdf": {"id": "ebecb98537b7ee54", "src": "hda", "uuid": "17208fe3-2d2b-4ca1-8f67-8073bdd1c166"}, "outputr": {"id": "08fbfdb7c617f2ae", "src": "hda", "uuid": "dd1ecfdb-b773-4c6b-8ad2-45cdcfc8a90b"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "reading reference bed file:  /galaxy/server/database/objects/b/4/5/dataset_b45c82ee-5832-44ac-948a-bf6ef8d984eb.dat  ...  Done! Total 14 known splicing junctions.\nLoad BAM file ...  Done\nshuffling alignments ... Done\nsampling 5% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 10% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 15% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 20% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 25% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 30% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 35% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 40% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 45% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 50% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 55% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 60% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 65% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 70% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 75% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 80% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 85% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 90% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 95% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 100% (3) splicing reads. 3 splicing junctions. 1 known splicing junctions. 2 novel splicing junctions.\n", "job_stdout": "", "job_stderr": "", "stderr": "reading reference bed file:  /galaxy/server/database/objects/b/4/5/dataset_b45c82ee-5832-44ac-948a-bf6ef8d984eb.dat  ...  Done! Total 14 known splicing junctions.\nLoad BAM file ...  Done\nshuffling alignments ... Done\nsampling 5% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 10% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 15% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 20% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 25% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 30% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 35% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 40% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 45% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 50% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 55% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 60% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 65% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 70% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 75% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 80% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 85% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 90% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 95% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 100% (3) splicing reads. 3 splicing junctions. 1 known splicing junctions. 2 novel splicing junctions.\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:45:21", "plugin": "core", "name": "end_epoch", "raw_value": "1682181921.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:45:21", "plugin": "core", "name": "start_epoch", "raw_value": "1682181921.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_mismatch_profile/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_mismatch_profile", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 115.02595496177673, "inputs": {"input": {"src": "hda", "id": "4cccd4bb029a0763"}, "readlength": "101", "rscript_output": true}, "job": {"model_class": "Job", "id": "43e61ff3e98e152b", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:37:36.900180", "create_time": "2023-04-22T16:36:03.555799", "galaxy_version": "21.09", "command_version": "mismatch_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_mismatch_profile/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-5z2cd", "command_line": "mismatch_profile.py -i '/galaxy/server/database/objects/c/1/c/dataset_c1c12faf-ce27-4fd7-904d-85cd7e6e81c2.dat' -o output -l 101 -n 1000000 -q 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\"", "readnum": "\"1000000\"", "readlength": "\"101\""}, "inputs": {"input": {"id": "4cccd4bb029a0763", "src": "hda", "uuid": "c1c12faf-ce27-4fd7-904d-85cd7e6e81c2"}}, "outputs": {"outputpdf": {"id": "67ccd81946437e77", "src": "hda", "uuid": "15b70e0a-a182-4231-ad33-4343f3ee4333"}, "outputxls": {"id": "4c98ee904344912a", "src": "hda", "uuid": "837111f2-733f-4c64-ac29-9bc85b4a9f17"}, "outputr": {"id": "ec6871c5744bb75d", "src": "hda", "uuid": "922f483b-9f2b-4e95-ae1a-5d271236308f"}}, "output_collections": {}, "tool_stdout": "\n\n", "tool_stderr": "Process BAM file ...  No mismatches found\n", "job_stdout": "", "job_stderr": "", "stderr": "Process BAM file ...  No mismatches found\n", "stdout": "\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:37:24", "plugin": "core", "name": "end_epoch", "raw_value": "1682181444.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:37:24", "plugin": "core", "name": "start_epoch", "raw_value": "1682181444.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_GC/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_GC", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 110.10079550743103, "inputs": {"input": {"src": "hda", "id": "0ca1c4a6a782a942"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "05cf30897e11d0cf", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:44:30.363790", "create_time": "2023-04-22T16:42:53.848202", "galaxy_version": "21.09", "command_version": "read_GC.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_GC/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-8bdp2", "command_line": "read_GC.py --input-file '/galaxy/server/database/objects/e/4/d/dataset_e4d031f0-1467-4bfb-93d7-0e17398c9fe6.dat' --out-prefix output --mapq 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\""}, "inputs": {"input": {"id": "0ca1c4a6a782a942", "src": "hda", "uuid": "e4d031f0-1467-4bfb-93d7-0e17398c9fe6"}}, "outputs": {"outputpdf": {"id": "3754f290c50ed275", "src": "hda", "uuid": "eca1a67d-304b-4984-be44-2b66b5b81c27"}, "outputxls": {"id": "3ade2468746d22e9", "src": "hda", "uuid": "ed430f29-6cb3-4f9e-a831-f3dfbabe9e6c"}, "outputr": {"id": "c5e6a76a9fce8f14", "src": "hda", "uuid": "cb9aa319-7fc3-4ef1-9d86-683405321397"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Read BAM file ...  Done\nwriting GC content ...\nwriting R script ...\n", "job_stdout": "", "job_stderr": "", "stderr": "Read BAM file ...  Done\nwriting GC content ...\nwriting R script ...\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:44:19", "plugin": "core", "name": "end_epoch", "raw_value": "1682181859.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:44:18", "plugin": "core", "name": "start_epoch", "raw_value": "1682181858.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_NVC/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_NVC", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 162.21836376190186, "inputs": {"input": {"src": "hda", "id": "e55127f40dba04e1"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "3735174cd7e3aef4", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:31:04.145503", "create_time": "2023-04-22T16:28:47.412711", "galaxy_version": "21.09", "command_version": "read_NVC.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_NVC/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-q26ns", "command_line": "read_NVC.py --input-file '/galaxy/server/database/objects/e/c/5/dataset_ec50d3b7-ea7a-4575-b7c3-8dd0912aec51.dat' --out-prefix output  --mapq 30", "traceback": null, "params": {"nx": "\"false\"", "mapq": "\"30\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"auto\""}, "inputs": {"input": {"id": "e55127f40dba04e1", "src": "hda", "uuid": "ec50d3b7-ea7a-4575-b7c3-8dd0912aec51"}}, "outputs": {"outputpdf": {"id": "3735174cd7e3aef4", "src": "hda", "uuid": "87f638b1-9bcd-4b89-83a3-223411b85939"}, "outputxls": {"id": "ecb210020ea7fedb", "src": "hda", "uuid": "c1283515-4631-4ff0-976b-c8897327638f"}, "outputr": {"id": "a206b8e873d73bf8", "src": "hda", "uuid": "860bcdc4-a872-4a66-bfba-7da173485f7c"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Read BAM file ...  Done\ngenerating data matrix ...\ngenerating R script  ...\n", "job_stdout": "", "job_stderr": "", "stderr": "Read BAM file ...  Done\ngenerating data matrix ...\ngenerating R script  ...\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:30:32", "plugin": "core", "name": "end_epoch", "raw_value": "1682181032.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:30:31", "plugin": "core", "name": "start_epoch", "raw_value": "1682181031.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_distribution/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_distribution", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 127.44629049301147, "inputs": {"input": {"src": "hda", "id": "4cccd4bb029a0763"}, "refgene": {"src": "hda", "id": "135c6bccda87a845"}}, "job": {"model_class": "Job", "id": "4870061fe144a3c4", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:37:44.470615", "create_time": "2023-04-22T16:36:08.814448", "galaxy_version": "21.09", "command_version": "read_distribution.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_distribution/2.6.4.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-lmfr2", "command_line": "read_distribution.py -i '/galaxy/server/database/objects/c/1/c/dataset_c1c12faf-ce27-4fd7-904d-85cd7e6e81c2.dat' -r '/galaxy/server/database/objects/9/b/a/dataset_9ba0e90c-32d1-4e62-b448-d5b12f0ef613.dat' > '/galaxy/server/database/objects/5/c/1/dataset_5c17e662-6ee6-4757-a094-d7a04f5ade4c.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "4cccd4bb029a0763", "src": "hda", "uuid": "c1c12faf-ce27-4fd7-904d-85cd7e6e81c2"}, "refgene": {"id": "135c6bccda87a845", "src": "hda", "uuid": "9ba0e90c-32d1-4e62-b448-d5b12f0ef613"}}, "outputs": {"output": {"id": "5c4dde78434af9e1", "src": "hda", "uuid": "5c17e662-6ee6-4757-a094-d7a04f5ade4c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "processing /galaxy/server/database/objects/9/b/a/dataset_9ba0e90c-32d1-4e62-b448-d5b12f0ef613.dat ... Done\nprocessing /galaxy/server/database/objects/c/1/c/dataset_c1c12faf-ce27-4fd7-904d-85cd7e6e81c2.dat ... Finished\n\n", "stderr": "\nprocessing /galaxy/server/database/objects/9/b/a/dataset_9ba0e90c-32d1-4e62-b448-d5b12f0ef613.dat ... Done\nprocessing /galaxy/server/database/objects/c/1/c/dataset_c1c12faf-ce27-4fd7-904d-85cd7e6e81c2.dat ... Finished\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:37:31", "plugin": "core", "name": "end_epoch", "raw_value": "1682181451.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:37:31", "plugin": "core", "name": "start_epoch", "raw_value": "1682181451.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_duplication/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_duplication", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 162.23937225341797, "inputs": {"input": {"src": "hda", "id": "e55127f40dba04e1"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "ecb210020ea7fedb", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:31:03.950564", "create_time": "2023-04-22T16:28:47.754632", "galaxy_version": "21.09", "command_version": "read_duplication.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_duplication/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-25xxf", "command_line": "read_duplication.py -i '/galaxy/server/database/objects/e/c/5/dataset_ec50d3b7-ea7a-4575-b7c3-8dd0912aec51.dat' -o output -u 500 -q 30", "traceback": null, "params": {"upLimit": "\"500\"", "mapq": "\"30\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"auto\""}, "inputs": {"input": {"id": "e55127f40dba04e1", "src": "hda", "uuid": "ec50d3b7-ea7a-4575-b7c3-8dd0912aec51"}}, "outputs": {"outputpdf": {"id": "253918f3fbfb6198", "src": "hda", "uuid": "0690a251-bb7e-4f54-96cf-0961cff4d432"}, "outputxls": {"id": "a222f722910d365f", "src": "hda", "uuid": "3d47bc9b-0eaf-46c1-bbdc-2b754e3c7692"}, "outputseqxls": {"id": "63d41cdd10dac607", "src": "hda", "uuid": "d74ae94a-589d-4b9a-9efb-3a1d484b00f6"}, "outputr": {"id": "a4df22b62c38d142", "src": "hda", "uuid": "fb2e3af0-3f8c-41d3-8fea-72c89d5459f4"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nreport duplicte rate based on sequence ...\nreport duplicte rate based on mapping  ...\ngenerate R script ...\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nreport duplicte rate based on sequence ...\nreport duplicte rate based on mapping  ...\ngenerate R script ...\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:30:32", "plugin": "core", "name": "end_epoch", "raw_value": "1682181032.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:30:31", "plugin": "core", "name": "start_epoch", "raw_value": "1682181031.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 112.6991856098175, "inputs": {"inputs": {"src": "hda", "id": "875eeccc89ae767a"}}, "job": {"model_class": "Job", "id": "6dee65ee4710948b", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:39:31.276595", "create_time": "2023-04-22T16:37:56.449533", "galaxy_version": "21.09", "command_version": "read_hexamer.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-ftwbt", "command_line": "ln -sf '/galaxy/server/database/objects/4/a/5/dataset_4a589ef1-8668-41a0-8508-dd0102f4cf3e.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq\" && read_hexamer.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq' > '/galaxy/server/database/objects/0/e/2/dataset_0e2ba8ca-bd73-4c24-99cb-51f2c1f112c0.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "refgene": null, "refgenome": null}, "inputs": {"inputs": {"id": "875eeccc89ae767a", "src": "hda", "uuid": "4a589ef1-8668-41a0-8508-dd0102f4cf3e"}}, "outputs": {"output": {"id": "28aabf94ff03d73a", "src": "hda", "uuid": "0e2ba8ca-bd73-4c24-99cb-51f2c1f112c0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\n", "stderr": "\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:39:18", "plugin": "core", "name": "end_epoch", "raw_value": "1682181558.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:39:18", "plugin": "core", "name": "start_epoch", "raw_value": "1682181558.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer", "tool_version": "2.6.4", "test_index": 1, "time_seconds": 113.27431988716125, "inputs": {"inputs": {"src": "hda", "id": "d1411d297734cebf"}}, "job": {"model_class": "Job", "id": "086150dd4be7f449", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:39:38.072983", "create_time": "2023-04-22T16:37:59.970273", "galaxy_version": "21.09", "command_version": "read_hexamer.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-rgwjz", "command_line": "gunzip -c '/galaxy/server/database/objects/0/4/d/dataset_04d20d8f-03f9-4194-88ac-436bb1bb89cc.dat' > \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz\" && read_hexamer.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz' > '/galaxy/server/database/objects/5/8/7/dataset_587cc766-f4eb-4daa-b4d8-fc2484592797.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "refgene": null, "refgenome": null}, "inputs": {"inputs": {"id": "d1411d297734cebf", "src": "hda", "uuid": "04d20d8f-03f9-4194-88ac-436bb1bb89cc"}}, "outputs": {"output": {"id": "8bfbcb852cc62042", "src": "hda", "uuid": "587cc766-f4eb-4daa-b4d8-fc2484592797"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz file ... Done\n", "stderr": "\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz file ... Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:39:25", "plugin": "core", "name": "end_epoch", "raw_value": "1682181565.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:39:24", "plugin": "core", "name": "start_epoch", "raw_value": "1682181564.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer", "tool_version": "2.6.4", "test_index": 2, "time_seconds": 106.7474296092987, "inputs": {"inputs": [{"src": "hda", "id": "6e2abc76fa52617f"}, {"src": "hda", "id": "61d14acc863cc6b8"}]}, "job": {"model_class": "Job", "id": "8d50dd2647e8b4e7", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:40:52.037093", "create_time": "2023-04-22T16:39:19.874728", "galaxy_version": "21.09", "command_version": "read_hexamer.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-fqzpz", "command_line": "ln -sf '/galaxy/server/database/objects/9/3/7/dataset_9373c0f6-d108-4c02-99ab-4a7914810b0e.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq\" &&    ln -sf '/galaxy/server/database/objects/d/7/f/dataset_d7fab812-c1a5-4fe2-b257-80ad1a379357.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq\" && read_hexamer.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq,pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq' > '/galaxy/server/database/objects/a/7/6/dataset_a76d233b-d15b-4845-9623-8b9bf8382116.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "refgene": null, "refgenome": null}, "inputs": {"inputs": {"id": "6e2abc76fa52617f", "src": "hda", "uuid": "9373c0f6-d108-4c02-99ab-4a7914810b0e"}, "inputs1": {"id": "6e2abc76fa52617f", "src": "hda", "uuid": "9373c0f6-d108-4c02-99ab-4a7914810b0e"}, "inputs2": {"id": "61d14acc863cc6b8", "src": "hda", "uuid": "d7fab812-c1a5-4fe2-b257-80ad1a379357"}}, "outputs": {"output": {"id": "d9fbfea628c1a18d", "src": "hda", "uuid": "a76d233b-d15b-4845-9623-8b9bf8382116"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq file ... Done\n", "stderr": "\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq file ... Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:40:41", "plugin": "core", "name": "start_epoch", "raw_value": "1682181641.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:40:41", "plugin": "core", "name": "end_epoch", "raw_value": "1682181641.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer", "tool_version": "2.6.4", "test_index": 3, "time_seconds": 111.77052807807922, "inputs": {"inputs": [{"src": "hda", "id": "2c4171dd50cac2bd"}, {"src": "hda", "id": "2c4171dd50cac2bd"}]}, "job": {"model_class": "Job", "id": "1fdea998f0bf3c15", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:41:22.430173", "create_time": "2023-04-22T16:39:50.375464", "galaxy_version": "21.09", "command_version": "read_hexamer.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-975gk", "command_line": "ln -sf '/galaxy/server/database/objects/c/2/2/dataset_c22d9970-5980-4f7f-ae04-417f5f114b34.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq\" &&    ln -sf '/galaxy/server/database/objects/c/2/2/dataset_c22d9970-5980-4f7f-ae04-417f5f114b34.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1\" && read_hexamer.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq,pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1' > '/galaxy/server/database/objects/2/d/c/dataset_2dca4d23-1bd5-4faa-bf0e-3f5e3a414957.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "refgene": null, "refgenome": null}, "inputs": {"inputs": {"id": "2c4171dd50cac2bd", "src": "hda", "uuid": "c22d9970-5980-4f7f-ae04-417f5f114b34"}, "inputs1": {"id": "2c4171dd50cac2bd", "src": "hda", "uuid": "c22d9970-5980-4f7f-ae04-417f5f114b34"}, "inputs2": {"id": "2c4171dd50cac2bd", "src": "hda", "uuid": "c22d9970-5980-4f7f-ae04-417f5f114b34"}}, "outputs": {"output": {"id": "81ced862c1374270", "src": "hda", "uuid": "2dca4d23-1bd5-4faa-bf0e-3f5e3a414957"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1 file ... Done\n", "stderr": "\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1 file ... Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:41:11", "plugin": "core", "name": "start_epoch", "raw_value": "1682181671.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:41:11", "plugin": "core", "name": "end_epoch", "raw_value": "1682181671.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_quality/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_quality", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 113.01780843734741, "inputs": {"input": {"src": "hda", "id": "1a759ecbc850a0a4"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "87ed4cefa89de1df", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:39:29.919738", "create_time": "2023-04-22T16:37:55.909514", "galaxy_version": "21.09", "command_version": "read_quality.py 2.6.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_quality/2.6.4", "history_id": "a27c58f49c315e0d", "external_id": "gxy-hg9qh", "command_line": "read_quality.py --input-file '/galaxy/server/database/objects/3/1/6/dataset_3169296a-a542-45a7-9540-3811507e1c80.dat' --out-prefix output -r 1000 --mapq 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\"", "reduce": "\"1000\""}, "inputs": {"input": {"id": "1a759ecbc850a0a4", "src": "hda", "uuid": "3169296a-a542-45a7-9540-3811507e1c80"}}, "outputs": {"outputheatpdf": {"id": "9b60a3a11bdac530", "src": "hda", "uuid": "be7fc39b-0c2a-4c51-bb26-964e59009c7c"}, "outputboxpdf": {"id": "1199ad9e42ce914f", "src": "hda", "uuid": "c967ef87-8ff2-46b7-a61e-7b092e48fc22"}, "outputr": {"id": "ed3349618d0c621e", "src": "hda", "uuid": "a02e78f4-f997-4999-bdd3-76aedcf56ce7"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \nnull device \n          1 \n", "tool_stderr": "Read BAM file ...  Done\n", "job_stdout": "", "job_stderr": "", "stderr": "Read BAM file ...  Done\n", "stdout": "null device \n          1 \nnull device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-04-22 16:39:17", "plugin": "core", "name": "end_epoch", "raw_value": "1682181557.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:39:16", "plugin": "core", "name": "start_epoch", "raw_value": "1682181556.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_tin/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_tin", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 126.99926686286926, "inputs": {"input": {"src": "hda", "id": "4cccd4bb029a0763"}, "refgene": {"src": "hda", "id": "135c6bccda87a845"}}, "job": {"model_class": "Job", "id": "b5930693a16d8967", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T16:37:38.338840", "create_time": "2023-04-22T16:35:58.051099", "galaxy_version": "21.09", "command_version": "tin.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_tin/2.6.4.1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-k47jv", "command_line": "ln -sf '/galaxy/server/database/objects/c/1/c/dataset_c1c12faf-ce27-4fd7-904d-85cd7e6e81c2.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/d/b/7/metadata_db7b0c02-3637-4fa3-94d2-738b7322ec5a.dat' 'input.bam.bai' && tin.py -i 'input.bam' --refgene='/galaxy/server/database/objects/9/b/a/dataset_9ba0e90c-32d1-4e62-b448-d5b12f0ef613.dat' --minCov=10 --sample-size=100", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "subtractbackground": "\"false\"", "samplesize": "\"100\"", "minCov": "\"10\""}, "inputs": {"input": {"id": "4cccd4bb029a0763", "src": "hda", "uuid": "c1c12faf-ce27-4fd7-904d-85cd7e6e81c2"}, "refgene": {"id": "135c6bccda87a845", "src": "hda", "uuid": "9ba0e90c-32d1-4e62-b448-d5b12f0ef613"}}, "outputs": {"outputsummary": {"id": "35a83d92d7ecad80", "src": "hda", "uuid": "43c6d561-33aa-46d1-8601-a5bbd78d8a80"}, "outputxls": {"id": "526d96c83a1d8524", "src": "hda", "uuid": "79e34815-3746-4bb8-a6da-f8600b059678"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "@ 2023-04-22 16:37:27: Get BAM file(s) ...\nTotal 1 BAM file(s):\n\tinput.bam\n@ 2023-04-22 16:37:27: Processing input.bam\n 2 transcripts finished\r", "job_stdout": "", "job_stderr": "", "stderr": "@ 2023-04-22 16:37:27: Get BAM file(s) ...\nTotal 1 BAM file(s):\n\tinput.bam\n@ 2023-04-22 16:37:27: Processing input.bam\n 2 transcripts finished\r", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-04-22 16:37:27", "plugin": "core", "name": "end_epoch", "raw_value": "1682181447.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 16:37:27", "plugin": "core", "name": "start_epoch", "raw_value": "1682181447.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 0, "time_seconds": 214.6387975215912, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "ea788ffde5394e11"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "8aac3a40cbe945ff"}}, "job": {"model_class": "Job", "id": "b77debd9b5e94017", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:14:11.993488", "create_time": "2023-04-22T17:10:52.813192", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-gwv9s", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/c/4/9/dataset_c4917a74-f81b-4497-9637-8a328dc60283.dat --pe1-2 fastq:/galaxy/server/database/objects/a/e/5/dataset_ae5b24f1-c97b-4088-b12c-37c575fbd2e4.dat && python '/galaxy/server/database/jobs_directory/000/226/configs/tmpzz93lqpx' < contigs.fasta > '/galaxy/server/database/objects/9/5/8/dataset_95853f9d-31a0-4394-9cd8-8c432cd723ca.dat' && python '/galaxy/server/database/jobs_directory/000/226/configs/tmpzz93lqpx' < scaffolds.fasta > '/galaxy/server/database/objects/3/9/a/dataset_39a51637-b69d-49e0-9548-d67c93081b54.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 268, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 269, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "ea788ffde5394e11", "src": "hda", "uuid": "c4917a74-f81b-4497-9637-8a328dc60283"}, "libraries_0|files_0|rev_reads": {"id": "8aac3a40cbe945ff", "src": "hda", "uuid": "ae5b24f1-c97b-4088-b12c-37c575fbd2e4"}}, "outputs": {"out_contig_stats": {"id": "27108369e10e5439", "src": "hda", "uuid": "95853f9d-31a0-4394-9cd8-8c432cd723ca"}, "out_scaffold_stats": {"id": "925757eae3c7a63b", "src": "hda", "uuid": "39a51637-b69d-49e0-9548-d67c93081b54"}, "out_contigs": {"id": "eec6bb6402329d2b", "src": "hda", "uuid": "740fa2b6-1488-4a04-9612-df8dfec901ce"}, "out_scaffolds": {"id": "0892b43d2894d405", "src": "hda", "uuid": "15352e5f-58d6-44e3-a0ca-83216b18c130"}, "out_log": {"id": "02b09b37855e3ae0", "src": "hda", "uuid": "52f0ee40-3532-4c8c-912c-fda205b1d28e"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/226/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/c/4/9/dataset_c4917a74-f81b-4497-9637-8a328dc60283.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/a/e/5/dataset_ae5b24f1-c97b-4088-b12c-37c575fbd2e4.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/226/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/c/4/9/dataset_c4917a74-f81b-4497-9637-8a328dc60283.dat']\n      right reads: ['/galaxy/server/database/objects/a/e/5/dataset_ae5b24f1-c97b-4088-b12c-37c575fbd2e4.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/226/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/226/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/226/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/226/working/corrected/configs/config.info\n  0:00:00.008     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.008     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.008     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.009     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.010     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.010     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.011     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.011     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.013     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.013     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.013     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.013     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/c/4/9/dataset_c4917a74-f81b-4497-9637-8a328dc60283.dat\n  0:00:00.658     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/a/e/5/dataset_ae5b24f1-c97b-4088-b12c-37c575fbd2e4.dat\n  0:00:01.206     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.211    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.454    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.455    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.596    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.628    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.648    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.650    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.652    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.654    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.664    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.664    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.665    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/c/4/9/dataset_c4917a74-f81b-4497-9637-8a328dc60283.dat\n  0:00:01.704    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/a/e/5/dataset_ae5b24f1-c97b-4088-b12c-37c575fbd2e4.dat\n  0:00:01.737    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.737    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.737    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.743    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.743    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.743    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.744    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.744    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.744    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.744    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.744    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.744    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.746    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.746    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.760    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.760    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.760    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.760    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/c/4/9/dataset_c4917a74-f81b-4497-9637-8a328dc60283.dat and /galaxy/server/database/objects/a/e/5/dataset_ae5b24f1-c97b-4088-b12c-37c575fbd2e4.dat\n  0:00:01.797    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.804    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.808    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.840    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.840    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.841    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/226/working/corrected/corrected.yaml\n  0:00:01.845    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/226/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/226/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/226/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.127    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.133     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.334   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.342     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.538   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.606     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.607     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.607     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.607     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.608     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.608     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.608     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.752     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.754    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.754    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.817    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.818    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.851    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.852    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.852    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.853    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.853    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.853    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.417     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.422    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.680    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.681    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.816    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.845    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.864    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.864    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.866    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.867    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PR\n..\n 0:00:07.081    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.083    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.083    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.083    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.083    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.083    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.083    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.083    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.092    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.092    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.092    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.094    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.094    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/226/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.095    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/226/working//K33/before_rr.fasta\n  0:00:07.100    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/226/working//K33/assembly_graph.fastg\n  0:00:07.104    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/226/working//K33/simplified_contigs.fasta\n  0:00:07.108    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/226/working//K33/intermediate_contigs.fasta\n  0:00:07.117    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.117    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.117    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.117    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.117    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.117    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.188    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.305    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.080    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.080    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.086    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.243   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.245   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.251   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.254   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.254   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.254   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.270   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.276   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.294    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.294    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.294    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.294    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.295    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.295    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.295    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.295    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.295    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.295    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.295    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.295    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.295    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.295    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.296    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.296    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.296    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.296    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.296    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.296    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.296    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.298    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.299    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.299    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.299    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.299    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.299    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.299    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.299    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.299    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.299    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.299    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.299    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/226/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.300    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/226/working//K33/before_rr.fasta\n  0:00:09.305    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/226/working//K33/assembly_graph.fastg\n  0:00:09.310    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/226/working//K33/final_contigs.paths\n  0:00:09.318    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/226/working//K33/scaffolds.paths\n  0:00:09.336    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.338    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/226/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/226/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/226/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/226/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/226/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/226/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/226/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/226/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/226/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/c/4/9/dataset_c4917a74-f81b-4497-9637-8a328dc60283.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/a/e/5/dataset_ae5b24f1-c97b-4088-b12c-37c575fbd2e4.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/226/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/c/4/9/dataset_c4917a74-f81b-4497-9637-8a328dc60283.dat']\n      right reads: ['/galaxy/server/database/objects/a/e/5/dataset_ae5b24f1-c97b-4088-b12c-37c575fbd2e4.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/226/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/226/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/226/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/226/working/corrected/configs/config.info\n  0:00:00.008     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.008     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.008     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.009     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.010     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.010     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.011     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.011     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.013     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.013     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.013     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.013     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/c/4/9/dataset_c4917a74-f81b-4497-9637-8a328dc60283.dat\n  0:00:00.658     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/a/e/5/dataset_ae5b24f1-c97b-4088-b12c-37c575fbd2e4.dat\n  0:00:01.206     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.211    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.454    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.455    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.596    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.628    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.648    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.650    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.652    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.654    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.664    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.664    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.665    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/c/4/9/dataset_c4917a74-f81b-4497-9637-8a328dc60283.dat\n  0:00:01.704    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/a/e/5/dataset_ae5b24f1-c97b-4088-b12c-37c575fbd2e4.dat\n  0:00:01.737    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.737    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.737    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.743    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.743    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.743    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.744    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.744    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.744    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.744    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.744    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.744    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.746    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.746    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.760    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.760    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.760    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.760    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/c/4/9/dataset_c4917a74-f81b-4497-9637-8a328dc60283.dat and /galaxy/server/database/objects/a/e/5/dataset_ae5b24f1-c97b-4088-b12c-37c575fbd2e4.dat\n  0:00:01.797    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.804    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.808    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.840    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.840    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.841    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/226/working/corrected/corrected.yaml\n  0:00:01.845    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/226/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/226/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/226/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.127    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.133     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.334   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.342     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.538   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.606     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.607     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.607     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.607     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.608     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.608     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.608     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.752     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.754    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.754    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.817    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.818    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.851    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.852    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.852    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.853    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.853    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.853    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.417     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.422    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.680    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.681    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.816    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.845    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.864    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.864    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.866    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.867    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PR\n..\n 0:00:07.081    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.083    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.083    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.083    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.083    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.083    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.083    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.083    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.092    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.092    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.092    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.094    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.094    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/226/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.095    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/226/working//K33/before_rr.fasta\n  0:00:07.100    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/226/working//K33/assembly_graph.fastg\n  0:00:07.104    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/226/working//K33/simplified_contigs.fasta\n  0:00:07.108    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/226/working//K33/intermediate_contigs.fasta\n  0:00:07.117    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.117    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.117    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.117    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.117    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.117    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.188    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.305    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.080    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.080    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.086    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.243   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.245   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.251   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.254   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.254   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.254   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.270   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.276   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.294    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.294    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.294    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.294    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.295    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.295    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.295    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.295    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.295    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.295    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.295    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.295    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.295    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.295    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.296    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.296    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.296    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.296    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.296    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.296    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.296    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.298    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.299    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.299    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.299    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.299    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.299    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.299    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.299    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.299    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.299    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.299    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.299    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.299    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/226/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.300    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/226/working//K33/before_rr.fasta\n  0:00:09.305    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/226/working//K33/assembly_graph.fastg\n  0:00:09.310    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/226/working//K33/final_contigs.paths\n  0:00:09.318    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/226/working//K33/scaffolds.paths\n  0:00:09.336    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.338    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/226/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/226/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/226/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/226/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/226/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/226/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/226/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/226/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "12 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "12.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:13:58", "plugin": "core", "name": "end_epoch", "raw_value": "1682183638.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:13:46", "plugin": "core", "name": "start_epoch", "raw_value": "1682183626.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 1, "time_seconds": 134.11569499969482, "inputs": {"sc": false, "onlyassembler": true, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "3f6170baf4aab946"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "737aa6df0390df78"}}, "job": {"model_class": "Job", "id": "e9c55574bb21e836", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:14:29.762627", "create_time": "2023-04-22T17:12:31.346764", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-7nvdw", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output  --only-assembler  -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fasta:/galaxy/server/database/objects/1/e/2/dataset_1e252436-c97e-4adf-9079-966749eecbf1.dat --pe1-2 fasta:/galaxy/server/database/objects/0/c/6/dataset_0c6806cc-a9f2-4141-b337-d693b7b71146.dat && python '/galaxy/server/database/jobs_directory/000/229/configs/tmp279on84j' < contigs.fasta > '/galaxy/server/database/objects/b/a/d/dataset_bad9468a-d697-4220-ba72-a94178947070.dat' && python '/galaxy/server/database/jobs_directory/000/229/configs/tmp279on84j' < scaffolds.fasta > '/galaxy/server/database/objects/f/f/a/dataset_ffa0776d-7097-4301-bb05-7fe45684ec15.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 275, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 276, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"true\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "3f6170baf4aab946", "src": "hda", "uuid": "1e252436-c97e-4adf-9079-966749eecbf1"}, "libraries_0|files_0|rev_reads": {"id": "737aa6df0390df78", "src": "hda", "uuid": "0c6806cc-a9f2-4141-b337-d693b7b71146"}}, "outputs": {"out_contig_stats": {"id": "10de83be81e5a3c4", "src": "hda", "uuid": "bad9468a-d697-4220-ba72-a94178947070"}, "out_scaffold_stats": {"id": "6e666037893d71e0", "src": "hda", "uuid": "ffa0776d-7097-4301-bb05-7fe45684ec15"}, "out_contigs": {"id": "5e4741aced7359fa", "src": "hda", "uuid": "e536e1e9-c067-40ad-9c9f-387263ee34d6"}, "out_scaffolds": {"id": "0e44ce476b2a180f", "src": "hda", "uuid": "10444db9-2b55-4ea7-ac08-f24eb7f49fba"}, "out_log": {"id": "ac99381e21361416", "src": "hda", "uuid": "9a0f904b-0377-4aa9-bf4c-3422f29106bf"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/229/working\t--disable-gzip-output\t--only-assembler\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfasta:/galaxy/server/database/objects/1/e/2/dataset_1e252436-c97e-4adf-9079-966749eecbf1.dat\t--pe1-2\tfasta:/galaxy/server/database/objects/0/c/6/dataset_0c6806cc-a9f2-4141-b337-d693b7b71146.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/229/working\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/1/e/2/dataset_1e252436-c97e-4adf-9079-966749eecbf1.dat']\n      right reads: ['/galaxy/server/database/objects/0/c/6/dataset_0c6806cc-a9f2-4141-b337-d693b7b71146.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/229/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/229/working/spades.log\n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/229/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/229/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.130    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.134     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.321   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.328     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.513   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.577     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.577     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611\n  0:00:00.577     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.578     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.578     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.578     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.578     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.723     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.725    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.726    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.834    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.835    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.835    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.835    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.835    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.835    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.387     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.\n  0:00:01.391    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.645    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.\n  0:00:01.645    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.783    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.819    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.839    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).\n  0:00:01.839    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.840    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.841    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph\n  0:00:01.841    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths\n  0:00:01.842    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted\n  0:00:01.842    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops\n  0:00:01.843    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.843    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.843    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.843    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.859    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).\n  0:00:01.859    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.872    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM\n  0:00:01.879    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding\n  0:00:01.880    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0\n  0:00:01.880    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356\n  0:00:01.880    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478\n  0:00:01.880    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.921    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:02.030    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.406    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.068    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.228    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:06.130    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849\n  0:00:06.131    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568\n  0:00:06.131    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251\n  0:00:06.131    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135\n  0:00:06.131    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738\n  0:00:06.131    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705\n  0:00:06.131    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135\n  0:00:06.131    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0\n  0:00:06.131    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer\n  0:00:06.131    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill\n  0:00:06.133    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:06.133    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:06.133    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:06.134    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:06.134    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:06.692     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.\n  0:00:06.696    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:06.953    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:06.954    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:07.107    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:07.140    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:07.166    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).\n  0:00:07.166    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.\n  0:00:07.167    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled\n  0:00:07.169    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps\n  0:00:07.169    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)\n  0:00:07.174    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads\n  0:00:07.174    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices\n  0:00:07.174    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:07.174    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.175    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification\n  0:00:07.176    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:07.176    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times\n  0:00:07.176    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification\n  0:00:07.176    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started\n  0:00:07.176    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:0\n..\n   INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:08.222    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:08.223    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:08.223    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:08.223    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:08.223    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:08.223    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.223    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:08.223    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:08.223    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865\n  0:00:08.223    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:08.223    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.223    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.233    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:08.233    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:08.233    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:08.236    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:08.236    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/229/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:08.237    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working//K33/before_rr.fasta\n  0:00:08.241    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/229/working//K33/assembly_graph.fastg\n  0:00:08.246    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working//K33/simplified_contigs.fasta\n  0:00:08.250    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working//K33/intermediate_contigs.fasta\n  0:00:08.259    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:08.259    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.260    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.260    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:08.260    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:08.260    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:08.333    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.451    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.231    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.231    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges\n  0:00:10.239    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.379   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.382   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.386   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.390   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.390   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.390   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.404   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.412   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.435    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.435    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.435    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.435    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.436    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.436    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.437    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.437    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.437    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.437    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.437    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.437    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.437    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.437    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.438    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.438    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.438    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.438    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.438    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.438    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.438    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.442    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.442    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.442    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.442    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.442    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.442    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.442    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.442    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.442    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.442    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.442    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.442    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.442    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.443    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.443    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.443    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.443    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.443    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.443    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/229/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.445    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working//K33/before_rr.fasta\n  0:00:10.451    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/229/working//K33/assembly_graph.fastg\n  0:00:10.457    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/229/working//K33/final_contigs.paths\n  0:00:10.466    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/229/working//K33/scaffolds.paths\n  0:00:10.484    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.486    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/229/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/229/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/229/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/229/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/229/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/229/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/229/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/229/working\t--disable-gzip-output\t--only-assembler\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfasta:/galaxy/server/database/objects/1/e/2/dataset_1e252436-c97e-4adf-9079-966749eecbf1.dat\t--pe1-2\tfasta:/galaxy/server/database/objects/0/c/6/dataset_0c6806cc-a9f2-4141-b337-d693b7b71146.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/229/working\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/1/e/2/dataset_1e252436-c97e-4adf-9079-966749eecbf1.dat']\n      right reads: ['/galaxy/server/database/objects/0/c/6/dataset_0c6806cc-a9f2-4141-b337-d693b7b71146.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/229/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/229/working/spades.log\n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/229/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/229/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.130    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.134     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.321   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.328     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.513   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.577     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.577     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611\n  0:00:00.577     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.578     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.578     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.578     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.578     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.723     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.725    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.726    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.834    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.835    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.835    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.835    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.835    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.835    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.387     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.\n  0:00:01.391    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.645    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.\n  0:00:01.645    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.783    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.819    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.839    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).\n  0:00:01.839    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.840    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.841    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph\n  0:00:01.841    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths\n  0:00:01.842    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted\n  0:00:01.842    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops\n  0:00:01.843    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.843    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.843    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.843    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.859    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).\n  0:00:01.859    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.872    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM\n  0:00:01.879    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding\n  0:00:01.880    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0\n  0:00:01.880    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356\n  0:00:01.880    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478\n  0:00:01.880    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.921    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:02.030    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.406    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.068    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.228    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:06.130    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849\n  0:00:06.131    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568\n  0:00:06.131    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251\n  0:00:06.131    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135\n  0:00:06.131    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738\n  0:00:06.131    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705\n  0:00:06.131    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135\n  0:00:06.131    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0\n  0:00:06.131    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer\n  0:00:06.131    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill\n  0:00:06.133    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:06.133    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:06.133    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:06.134    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:06.134    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:06.692     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.\n  0:00:06.696    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:06.953    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:06.954    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:07.107    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:07.140    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:07.166    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).\n  0:00:07.166    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.\n  0:00:07.167    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled\n  0:00:07.169    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps\n  0:00:07.169    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)\n  0:00:07.174    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads\n  0:00:07.174    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices\n  0:00:07.174    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:07.174    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.175    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification\n  0:00:07.176    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:07.176    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover\n  0:00:07.176    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times\n  0:00:07.176    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification\n  0:00:07.176    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started\n  0:00:07.176    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:0\n..\n   INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:08.222    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:08.223    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:08.223    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:08.223    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:08.223    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:08.223    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.223    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:08.223    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:08.223    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:08.223    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865\n  0:00:08.223    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:08.223    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.223    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.233    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:08.233    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:08.233    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:08.236    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:08.236    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/229/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:08.237    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working//K33/before_rr.fasta\n  0:00:08.241    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/229/working//K33/assembly_graph.fastg\n  0:00:08.246    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working//K33/simplified_contigs.fasta\n  0:00:08.250    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working//K33/intermediate_contigs.fasta\n  0:00:08.259    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:08.259    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.260    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.260    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:08.260    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:08.260    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:08.333    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.451    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.231    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.231    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges\n  0:00:10.239    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.379   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.382   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.386   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.390   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.390   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.390   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.404   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.412   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.435    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.435    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.435    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.435    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.436    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.436    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.437    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.437    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.437    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.437    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.437    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.437    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.437    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.437    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.438    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.438    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.438    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.438    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.438    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.438    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.438    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.442    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.442    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.442    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.442    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.442    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.442    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.442    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.442    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.442    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.442    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.442    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.442    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.442    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.443    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.443    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.443    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.443    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.443    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.443    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.443    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.443    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/229/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.445    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working//K33/before_rr.fasta\n  0:00:10.451    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/229/working//K33/assembly_graph.fastg\n  0:00:10.457    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/229/working//K33/final_contigs.paths\n  0:00:10.466    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/229/working//K33/scaffolds.paths\n  0:00:10.484    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.486    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/229/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/229/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/229/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/229/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/229/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/229/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/229/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "11 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "11.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:14:14", "plugin": "core", "name": "end_epoch", "raw_value": "1682183654.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:14:03", "plugin": "core", "name": "start_epoch", "raw_value": "1682183643.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 2, "time_seconds": 125.00842547416687, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "29ba7420d0dda622"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "a54285236c030e8c"}}, "job": {"model_class": "Job", "id": "59279452ee7bafe9", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:15:47.070295", "create_time": "2023-04-22T17:14:01.654264", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-x84k6", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/c/c/8/dataset_cc895cca-c981-4505-b53d-1a0aecf21ca5.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/7/6/a/dataset_76af8050-b397-4183-8a76-c2f0f75dd706.dat && python '/galaxy/server/database/jobs_directory/000/234/configs/tmpahhg0rao' < contigs.fasta > '/galaxy/server/database/objects/2/c/3/dataset_2c31fb42-195d-4c64-acc8-e95d5d30a282.dat' && python '/galaxy/server/database/jobs_directory/000/234/configs/tmpahhg0rao' < scaffolds.fasta > '/galaxy/server/database/objects/9/6/d/dataset_96d70185-0702-422e-80ba-07cea1d380b6.dat'", "traceback": null, "params": {"__input_ext": "\"fastq.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 282, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 283, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "29ba7420d0dda622", "src": "hda", "uuid": "cc895cca-c981-4505-b53d-1a0aecf21ca5"}, "libraries_0|files_0|rev_reads": {"id": "a54285236c030e8c", "src": "hda", "uuid": "76af8050-b397-4183-8a76-c2f0f75dd706"}}, "outputs": {"out_contig_stats": {"id": "3d7aeb38bbd319e9", "src": "hda", "uuid": "2c31fb42-195d-4c64-acc8-e95d5d30a282"}, "out_scaffold_stats": {"id": "f36aa1657a85627f", "src": "hda", "uuid": "96d70185-0702-422e-80ba-07cea1d380b6"}, "out_contigs": {"id": "d40715f443298220", "src": "hda", "uuid": "3e5e2935-4db1-4295-b36f-376b900c6690"}, "out_scaffolds": {"id": "a13bf3c3257d82a9", "src": "hda", "uuid": "e633c613-3d74-4560-9182-3cb0f58362bb"}, "out_log": {"id": "a71612e3cd2b391b", "src": "hda", "uuid": "d4ffa43a-4990-4710-8773-4b528851b7c8"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/234/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/c/c/8/dataset_cc895cca-c981-4505-b53d-1a0aecf21ca5.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/7/6/a/dataset_76af8050-b397-4183-8a76-c2f0f75dd706.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/234/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/c/c/8/dataset_cc895cca-c981-4505-b53d-1a0aecf21ca5.dat']\n      right reads: ['/galaxy/server/database/objects/7/6/a/dataset_76af8050-b397-4183-8a76-c2f0f75dd706.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/234/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/234/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/234/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/234/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.006     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.007     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/c/c/8/dataset_cc895cca-c981-4505-b53d-1a0aecf21ca5.dat\n  0:00:00.612     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/7/6/a/dataset_76af8050-b397-4183-8a76-c2f0f75dd706.dat\n  0:00:01.229     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.234    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.489    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.489    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.631    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.667    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.690    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.692    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.695    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.698    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.708    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.709    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.709    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/c/c/8/dataset_cc895cca-c981-4505-b53d-1a0aecf21ca5.dat\n  0:00:01.744    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/7/6/a/dataset_76af8050-b397-4183-8a76-c2f0f75dd706.dat\n  0:00:01.777    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.777    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.777    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.787    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.788    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.814    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.814    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.814    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.814    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/c/c/8/dataset_cc895cca-c981-4505-b53d-1a0aecf21ca5.dat and /galaxy/server/database/objects/7/6/a/dataset_76af8050-b397-4183-8a76-c2f0f75dd706.dat\n  0:00:01.856    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.864    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.867    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.905    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.905    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.905    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/234/working/corrected/corrected.yaml\n  0:00:01.910    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/234/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/234/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/234/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.007     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.129    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.135     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.325   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.333     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.531   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.593     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.593     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.593     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.594     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.594     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.595     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.595     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.747     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.750    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.750    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.814    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.814    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.851    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.852    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.852    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.853    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.853    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.853    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.433     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.438    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.687    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.687    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.826    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.856    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.879    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.879    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.880    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.881    16M / 3G    INFO    General                 (stage.cpp                 : 101\n..\n 0:00:07.103    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.105    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.105    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.105    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.105    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.105    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.105    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.105    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.105    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.105    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.105    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.105    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.117    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.118    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.118    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.121    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.121    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.122    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/before_rr.fasta\n  0:00:07.127    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph.fastg\n  0:00:07.131    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/simplified_contigs.fasta\n  0:00:07.135    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/intermediate_contigs.fasta\n  0:00:07.143    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.143    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.143    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.143    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.143    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.143    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.214    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.328    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.101    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.101    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.109    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.248   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.251   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.256   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.258   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.258   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.258   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.271   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.278   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.297    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.298    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.298    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.298    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.298    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.298    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.298    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.298    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.298    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.298    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.299    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.299    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.299    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.299    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.299    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.299    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.299    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.299    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.299    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.299    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.300    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.300    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.300    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.300    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.300    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.300    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.300    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.300    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.300    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.300    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.300    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.300    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.300    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.301    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.301    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.301    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.301    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.301    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.301    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.301    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.301    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.301    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.301    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.301    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/before_rr.fasta\n  0:00:09.307    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph.fastg\n  0:00:09.311    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/234/working//K33/final_contigs.paths\n  0:00:09.321    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/234/working//K33/scaffolds.paths\n  0:00:09.339    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.342    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/234/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/234/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/234/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/234/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/234/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/234/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/234/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/234/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/234/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/c/c/8/dataset_cc895cca-c981-4505-b53d-1a0aecf21ca5.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/7/6/a/dataset_76af8050-b397-4183-8a76-c2f0f75dd706.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/234/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/c/c/8/dataset_cc895cca-c981-4505-b53d-1a0aecf21ca5.dat']\n      right reads: ['/galaxy/server/database/objects/7/6/a/dataset_76af8050-b397-4183-8a76-c2f0f75dd706.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/234/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/234/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/234/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/234/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.006     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.007     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/c/c/8/dataset_cc895cca-c981-4505-b53d-1a0aecf21ca5.dat\n  0:00:00.612     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/7/6/a/dataset_76af8050-b397-4183-8a76-c2f0f75dd706.dat\n  0:00:01.229     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.234    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.489    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.489    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.631    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.667    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.690    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.692    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.695    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.698    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.708    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.709    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.709    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/c/c/8/dataset_cc895cca-c981-4505-b53d-1a0aecf21ca5.dat\n  0:00:01.744    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/7/6/a/dataset_76af8050-b397-4183-8a76-c2f0f75dd706.dat\n  0:00:01.777    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.777    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.777    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.786    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.787    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.788    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.814    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.814    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.814    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.814    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/c/c/8/dataset_cc895cca-c981-4505-b53d-1a0aecf21ca5.dat and /galaxy/server/database/objects/7/6/a/dataset_76af8050-b397-4183-8a76-c2f0f75dd706.dat\n  0:00:01.856    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.864    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.867    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.905    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.905    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.905    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/234/working/corrected/corrected.yaml\n  0:00:01.910    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/234/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/234/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/234/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.007     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.129    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.135     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.325   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.333     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.531   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.593     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.593     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.593     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.594     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.594     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.595     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.595     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.747     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.750    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.750    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.814    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.814    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.851    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.852    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.852    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.853    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.853    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.853    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.433     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.438    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.687    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.687    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.826    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.856    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.879    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.879    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.880    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.881    16M / 3G    INFO    General                 (stage.cpp                 : 101\n..\n 0:00:07.103    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.105    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.105    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.105    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.105    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.105    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.105    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.105    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.105    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.105    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.105    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.105    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.117    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.118    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.118    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.121    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.121    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.122    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/before_rr.fasta\n  0:00:07.127    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph.fastg\n  0:00:07.131    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/simplified_contigs.fasta\n  0:00:07.135    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/intermediate_contigs.fasta\n  0:00:07.143    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.143    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.143    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.143    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.143    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.143    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.214    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.328    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.101    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.101    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.109    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.248   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.251   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.256   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.258   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.258   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.258   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.271   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.278   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.297    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.298    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.298    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.298    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.298    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.298    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.298    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.298    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.298    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.298    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.299    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.299    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.299    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.299    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.299    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.299    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.299    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.299    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.299    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.299    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.299    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.300    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.300    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.300    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.300    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.300    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.300    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.300    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.300    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.300    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.300    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.300    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.300    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.300    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.300    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.301    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.301    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.301    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.301    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.301    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.301    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.301    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.301    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.301    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.301    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.301    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.301    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/234/working//K33/before_rr.fasta\n  0:00:09.307    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/234/working//K33/assembly_graph.fastg\n  0:00:09.311    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/234/working//K33/final_contigs.paths\n  0:00:09.321    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/234/working//K33/scaffolds.paths\n  0:00:09.339    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.342    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/234/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/234/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/234/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/234/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/234/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/234/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/234/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/234/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "13 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "13.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:15:36", "plugin": "core", "name": "end_epoch", "raw_value": "1682183736.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:15:23", "plugin": "core", "name": "start_epoch", "raw_value": "1682183723.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 3, "time_seconds": 148.29949712753296, "inputs": {"sc": false, "careful": false, "kmer_choice|auto_kmer_choice": true, "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "6d29e856acec10d8"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "aadffa8a9f9070d3"}}, "job": {"model_class": "Job", "id": "95edaf4be3a79d1c", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:16:17.776916", "create_time": "2023-04-22T17:14:14.474702", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-z6zdm", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250}  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat --pe1-2 fastq:/galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat && python '/galaxy/server/database/jobs_directory/000/237/configs/tmpobi9b84k' < contigs.fasta > '/galaxy/server/database/objects/d/f/8/dataset_df8a652b-ed43-41d0-aa00-66f0337433d1.dat' && python '/galaxy/server/database/jobs_directory/000/237/configs/tmpobi9b84k' < scaffolds.fasta > '/galaxy/server/database/objects/3/2/8/dataset_328a33d4-9035-4b2f-9e2f-69fee1f6558c.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 291, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 292, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 1, \"auto_kmer_choice\": \"true\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "6d29e856acec10d8", "src": "hda", "uuid": "23fbad85-be90-49e3-a4e5-cda6e99ddd7a"}, "libraries_0|files_0|rev_reads": {"id": "aadffa8a9f9070d3", "src": "hda", "uuid": "533210cf-3cd1-4834-8e68-281e27179f89"}}, "outputs": {"out_log": {"id": "da12a68341a225f0", "src": "hda", "uuid": "3d2bdaeb-8e65-4f16-a83c-a1e67d4ef3cc"}, "out_scaffolds": {"id": "924307ac81b30792", "src": "hda", "uuid": "31290b95-bcfd-4882-9fe5-e1cda6c3925a"}, "out_contigs": {"id": "b525cb8071873276", "src": "hda", "uuid": "d831c13c-4311-4406-9798-a85adb42d63d"}, "out_scaffold_stats": {"id": "0ad9e1c7d81dc286", "src": "hda", "uuid": "328a33d4-9035-4b2f-9e2f-69fee1f6558c"}, "out_contig_stats": {"id": "073bd494811e1905", "src": "hda", "uuid": "df8a652b-ed43-41d0-aa00-66f0337433d1"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/237/working\t--disable-gzip-output\t-t\t4\t-m\t39\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/237/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat']\n      right reads: ['/galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: automatic selection based on read length\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/237/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/237/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/237/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/237/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat\n  0:00:00.569     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\n  0:00:01.107     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.111    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.350    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.351    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.480    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.510    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.536    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.538    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.540    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.543    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.552    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.552    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.552    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat\n  0:00:01.595    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\n  0:00:01.629    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.629    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.630    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.641    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.641    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.657    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.658    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.658    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.658    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat and /galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\n  0:00:01.693    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.702    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.706    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.740    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.740    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.740    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/237/working/corrected/corrected.yaml\n  0:00:01.744    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/237/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K21\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/237/working/K21/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/237/working/dataset.info) with K=21\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.119    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.125     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.320   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.328     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.527   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.601     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.601     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.601     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.604     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.605     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.605     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.605     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.770     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.772    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.772    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.847    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.\n  0:00:00.848    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.885    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.886    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.886    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.886    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.887    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.887    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.441     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.\n  0:00:01.447    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.746    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.\n  0:00:01.747    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.893    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.932    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.961    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).\n  0:00:01.961    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.962    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.964    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping\n  0:00:01.964    16M / 3G    INFO    General                 (construction.cpp          : \n..\n:03.790    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.791    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.791    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.791    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.791    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.791    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.791    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.791    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.791    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62\n  0:00:03.791    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.791    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.791    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.805    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.806    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.806    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.808    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.808    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/237/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:03.809    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K55/before_rr.fasta\n  0:00:03.815    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/237/working//K55/assembly_graph.fastg\n  0:00:03.819    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K55/simplified_contigs.fasta\n  0:00:03.823    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K55/intermediate_contigs.fasta\n  0:00:03.833    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.833    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.833    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.833    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945\n  0:00:03.833    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.833    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.903    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:04.018    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.786    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:05.786    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges\n  0:00:05.792    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100\n  0:00:05.929   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:05.933   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.938   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.940   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:05.940   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:05.940   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:05.954   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.960   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.977    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:05.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:05.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:05.978    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:05.978    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.978    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.978    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:05.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:05.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:05.978    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.979    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.979    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:05.979    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:05.979    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.979    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.979    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.979    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:05.979    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:05.979    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:05.979    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:05.983    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:05.983    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.983    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.983    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:05.984    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:05.984    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.984    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.984    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.984    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.984    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:05.984    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.984    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/237/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:05.986    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K55/before_rr.fasta\n  0:00:05.991    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/237/working//K55/assembly_graph.fastg\n  0:00:05.998    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/237/working//K55/final_contigs.paths\n  0:00:06.006    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/237/working//K55/scaffolds.paths\n  0:00:06.021    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.023    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 21, 33, 55 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/237/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/237/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/237/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/237/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/237/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/237/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/237/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/237/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/237/working\t--disable-gzip-output\t-t\t4\t-m\t39\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/237/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat']\n      right reads: ['/galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: automatic selection based on read length\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/237/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/237/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/237/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/237/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat\n  0:00:00.569     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\n  0:00:01.107     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.111    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.350    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.351    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.480    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.510    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.536    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.538    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.540    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.543    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.552    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.552    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.552    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat\n  0:00:01.595    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\n  0:00:01.629    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.629    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.630    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.640    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.641    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.641    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.657    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.658    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.658    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.658    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat and /galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\n  0:00:01.693    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.702    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.706    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.740    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.740    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.740    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/237/working/corrected/corrected.yaml\n  0:00:01.744    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/237/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K21\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/237/working/K21/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/237/working/dataset.info) with K=21\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.119    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.125     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.320   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.328     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.527   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.601     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.601     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.601     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.604     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.605     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.605     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.605     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.770     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.772    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.772    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.847    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.\n  0:00:00.848    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.885    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.886    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.886    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.886    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.887    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.887    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.441     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.\n  0:00:01.447    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.746    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.\n  0:00:01.747    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.893    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.932    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.961    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).\n  0:00:01.961    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.962    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.964    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping\n  0:00:01.964    16M / 3G    INFO    General                 (construction.cpp          : \n..\n:03.790    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.791    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.791    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.791    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.791    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.791    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.791    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.791    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.791    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.791    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62\n  0:00:03.791    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.791    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.791    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.805    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.806    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.806    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.808    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.808    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/237/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:03.809    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K55/before_rr.fasta\n  0:00:03.815    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/237/working//K55/assembly_graph.fastg\n  0:00:03.819    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K55/simplified_contigs.fasta\n  0:00:03.823    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K55/intermediate_contigs.fasta\n  0:00:03.833    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.833    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.833    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.833    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945\n  0:00:03.833    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.833    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.903    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:04.018    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.786    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:05.786    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges\n  0:00:05.792    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100\n  0:00:05.929   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:05.933   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.938   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.940   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:05.940   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:05.940   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:05.954   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.960   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.977    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:05.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:05.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:05.978    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:05.978    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.978    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.978    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:05.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:05.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:05.978    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.979    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.979    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:05.979    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:05.979    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.979    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.979    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.979    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:05.979    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:05.979    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:05.979    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:05.983    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:05.983    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.983    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.983    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:05.984    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:05.984    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.984    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.984    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.984    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.984    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.984    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.984    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:05.984    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.984    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/237/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:05.986    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/237/working//K55/before_rr.fasta\n  0:00:05.991    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/237/working//K55/assembly_graph.fastg\n  0:00:05.998    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/237/working//K55/final_contigs.paths\n  0:00:06.006    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/237/working//K55/scaffolds.paths\n  0:00:06.021    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.023    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 21, 33, 55 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/237/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/237/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/237/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/237/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/237/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/237/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/237/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/237/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "19 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "19.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:16:05", "plugin": "core", "name": "end_epoch", "raw_value": "1682183765.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:15:46", "plugin": "core", "name": "start_epoch", "raw_value": "1682183746.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 4, "time_seconds": 143.68408727645874, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "77", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "6d29e856acec10d8"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "aadffa8a9f9070d3"}}, "job": {"model_class": "Job", "id": "a503dd4e05139bfd", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:16:35.875501", "create_time": "2023-04-22T17:14:29.404186", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-j2smc", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"77\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat --pe1-2 fastq:/galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat && python '/galaxy/server/database/jobs_directory/000/238/configs/tmp_nddx777' < contigs.fasta > '/galaxy/server/database/objects/f/c/8/dataset_fc81b207-3d8d-4be3-ba63-753df3e3334c.dat' && python '/galaxy/server/database/jobs_directory/000/238/configs/tmp_nddx777' < scaffolds.fasta > '/galaxy/server/database/objects/6/1/8/dataset_61829d26-f45d-4d5c-b24c-32c8c2282700.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 291, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 292, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"77\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "6d29e856acec10d8", "src": "hda", "uuid": "23fbad85-be90-49e3-a4e5-cda6e99ddd7a"}, "libraries_0|files_0|rev_reads": {"id": "aadffa8a9f9070d3", "src": "hda", "uuid": "533210cf-3cd1-4834-8e68-281e27179f89"}}, "outputs": {"out_log": {"id": "2440fef97c9a688c", "src": "hda", "uuid": "ea577ca1-1cff-420e-bc68-7d03f9669b4b"}, "out_scaffolds": {"id": "10387a2a38f2183f", "src": "hda", "uuid": "3319b70e-3cf0-4153-86b8-cff87baf8c00"}, "out_contigs": {"id": "0570771407ec12a6", "src": "hda", "uuid": "eba06df6-3858-4911-be55-6bb09420d972"}, "out_scaffold_stats": {"id": "358a4ce87f38e846", "src": "hda", "uuid": "61829d26-f45d-4d5c-b24c-32c8c2282700"}, "out_contig_stats": {"id": "13760a6319ca0ff1", "src": "hda", "uuid": "fc81b207-3d8d-4be3-ba63-753df3e3334c"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/238/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t77\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/238/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat']\n      right reads: ['/galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [77]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/238/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/238/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/238/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/238/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat\n  0:00:00.576     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\n  0:00:01.142     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.147    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.387    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.388    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.527    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.558    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.581    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.583    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.585    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.588    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.601    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.601    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.601    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat\n  0:00:01.647    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\n  0:00:01.681    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.681    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.681    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.690    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.690    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.707    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.707    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.707    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.707    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat and /galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\n  0:00:01.741    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.752    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.756    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.789    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.789    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.789    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/238/working/corrected/corrected.yaml\n  0:00:01.794    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/238/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K77\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/238/working/K77/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/238/working/dataset.info) with K=77\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.124    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.128     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.318   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.325     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.513   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.577     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.577     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.577     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.578     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.578     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.578     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.578     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101\n  0:00:00.727     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.729    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.729    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.790    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.\n  0:00:00.791    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.823    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.824    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.824    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.825    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.825    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.825    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525\n  0:00:01.375     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.\n  0:00:01.382    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.628    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.\n  0:00:01.629    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.761    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.797    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.818    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).\n  0:00:01.818    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.820    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.822    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PR\n..\n 0:00:04.223    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:04.224    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:04.224    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:04.224    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:04.224    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:04.224    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:04.225    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:04.225    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:04.225    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594\n  0:00:04.225    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:04.225    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:04.225    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:04.234    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:04.234    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:04.234    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:04.237    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:04.237    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/238/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:04.238    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/238/working//K77/before_rr.fasta\n  0:00:04.243    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/238/working//K77/assembly_graph.fastg\n  0:00:04.248    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/238/working//K77/simplified_contigs.fasta\n  0:00:04.252    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/238/working//K77/intermediate_contigs.fasta\n  0:00:04.260    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:04.260    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:04.260    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:04.260    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899\n  0:00:04.260    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:04.260    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:04.331    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:04.443    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.217    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.217    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges\n  0:00:06.223    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.360   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.362   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.365   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.370   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.370   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.370   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.383   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.389   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.406    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.407    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.407    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.407    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.407    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.407    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.407    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.407    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.407    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.407    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.407    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.407    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.408    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:06.408    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:06.408    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.408    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.408    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.408    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.408    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.408    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.408    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.408    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.408    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/238/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:06.409    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/238/working//K77/before_rr.fasta\n  0:00:06.415    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/238/working//K77/assembly_graph.fastg\n  0:00:06.419    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/238/working//K77/final_contigs.paths\n  0:00:06.426    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/238/working//K77/scaffolds.paths\n  0:00:06.442    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.444    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 77 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/238/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/238/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/238/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/238/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/238/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/238/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/238/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/238/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/238/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t77\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/238/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat']\n      right reads: ['/galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [77]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/238/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/238/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/238/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/238/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat\n  0:00:00.576     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\n  0:00:01.142     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.147    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.387    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.388    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.527    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.558    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.581    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.583    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.585    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.588    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.601    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.601    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.601    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat\n  0:00:01.647    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\n  0:00:01.681    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.681    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.681    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.689    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.690    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.690    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.707    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.707    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.707    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.707    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/2/3/f/dataset_23fbad85-be90-49e3-a4e5-cda6e99ddd7a.dat and /galaxy/server/database/objects/5/3/3/dataset_533210cf-3cd1-4834-8e68-281e27179f89.dat\n  0:00:01.741    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.752    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.756    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.789    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.789    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.789    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/238/working/corrected/corrected.yaml\n  0:00:01.794    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/238/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K77\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/238/working/K77/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/238/working/dataset.info) with K=77\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.124    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.128     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.318   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.325     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.513   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.577     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.577     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.577     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.578     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.578     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.578     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.578     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101\n  0:00:00.727     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.729    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.729    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.790    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.\n  0:00:00.791    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.823    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.824    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.824    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.825    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.825    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.825    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525\n  0:00:01.375     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.\n  0:00:01.382    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.628    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.\n  0:00:01.629    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.761    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.797    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.818    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).\n  0:00:01.818    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.820    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.822    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PR\n..\n 0:00:04.223    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:04.224    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:04.224    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:04.224    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:04.224    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:04.224    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:04.225    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:04.225    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:04.225    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:04.225    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594\n  0:00:04.225    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:04.225    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:04.225    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:04.234    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:04.234    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:04.234    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:04.237    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:04.237    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/238/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:04.238    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/238/working//K77/before_rr.fasta\n  0:00:04.243    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/238/working//K77/assembly_graph.fastg\n  0:00:04.248    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/238/working//K77/simplified_contigs.fasta\n  0:00:04.252    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/238/working//K77/intermediate_contigs.fasta\n  0:00:04.260    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:04.260    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:04.260    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:04.260    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899\n  0:00:04.260    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:04.260    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:04.331    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:04.443    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.217    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.217    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges\n  0:00:06.223    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.360   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.362   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.365   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.370   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.370   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.370   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.383   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.389   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.406    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.407    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.407    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.407    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.407    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.407    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.407    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.407    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.407    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.407    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.407    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.407    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.407    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.408    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:06.408    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:06.408    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.408    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.408    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.408    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.408    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.408    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.408    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.408    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.408    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.408    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.408    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/238/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:06.409    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/238/working//K77/before_rr.fasta\n  0:00:06.415    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/238/working//K77/assembly_graph.fastg\n  0:00:06.419    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/238/working//K77/final_contigs.paths\n  0:00:06.426    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/238/working//K77/scaffolds.paths\n  0:00:06.442    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.444    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 77 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/238/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/238/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/238/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/238/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/238/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/238/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/238/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/238/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "10 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "10.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:16:20", "plugin": "core", "name": "end_epoch", "raw_value": "1682183780.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:16:10", "plugin": "core", "name": "start_epoch", "raw_value": "1682183770.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 5, "time_seconds": 143.57939171791077, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "a87bde5faa9bdb73"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "929bd4ed4afddd24"}, "contig_graph_out": true, "scaffold_graph_out": true}, "job": {"model_class": "Job", "id": "a6dad5435fa20ffe", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:16:52.881197", "create_time": "2023-04-22T17:14:45.464387", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-n2gj5", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/4/b/9/dataset_4b9cc30e-48ae-4dda-8be0-acbe0cc5537f.dat --pe1-2 fastq:/galaxy/server/database/objects/1/d/0/dataset_1d00bfdb-f821-4c5e-beb5-f94ac93d0a6b.dat && python '/galaxy/server/database/jobs_directory/000/241/configs/tmp3652eubr' < contigs.fasta > '/galaxy/server/database/objects/f/7/0/dataset_f70d4b6f-6bd4-4274-99c8-486bdd17c182.dat' && python '/galaxy/server/database/jobs_directory/000/241/configs/tmp3652eubr' < scaffolds.fasta > '/galaxy/server/database/objects/b/f/8/dataset_bf878590-0a14-4a15-8636-d2a689257132.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"true\"", "contig_graph_out": "\"true\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 303, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 304, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "a87bde5faa9bdb73", "src": "hda", "uuid": "4b9cc30e-48ae-4dda-8be0-acbe0cc5537f"}, "libraries_0|files_0|rev_reads": {"id": "929bd4ed4afddd24", "src": "hda", "uuid": "1d00bfdb-f821-4c5e-beb5-f94ac93d0a6b"}}, "outputs": {"scaffold_graph": {"id": "6a35acdce7d7ed84", "src": "hda", "uuid": "27180478-631c-4c13-945d-b0a54c4b9a53"}, "contig_graph": {"id": "de91ccbec49b7768", "src": "hda", "uuid": "6f994e2a-bbfa-411d-9ded-3a7fb4cfcda8"}, "out_log": {"id": "b9abf339b5d088e9", "src": "hda", "uuid": "872074e3-a53d-40f9-9f3b-37d3ca9a8ab9"}, "out_scaffolds": {"id": "b2d55628c9c3e3f9", "src": "hda", "uuid": "7adfe775-2281-4117-a9c8-024ecdbfbb21"}, "out_contigs": {"id": "d38791aa8d50d237", "src": "hda", "uuid": "88dd1dec-11b5-48aa-a71d-eb9f8d96e282"}, "out_scaffold_stats": {"id": "52826d61240f8b7a", "src": "hda", "uuid": "bf878590-0a14-4a15-8636-d2a689257132"}, "out_contig_stats": {"id": "a74482f5e0b10d95", "src": "hda", "uuid": "f70d4b6f-6bd4-4274-99c8-486bdd17c182"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/241/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/4/b/9/dataset_4b9cc30e-48ae-4dda-8be0-acbe0cc5537f.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/1/d/0/dataset_1d00bfdb-f821-4c5e-beb5-f94ac93d0a6b.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/241/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/4/b/9/dataset_4b9cc30e-48ae-4dda-8be0-acbe0cc5537f.dat']\n      right reads: ['/galaxy/server/database/objects/1/d/0/dataset_1d00bfdb-f821-4c5e-beb5-f94ac93d0a6b.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/241/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/241/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/241/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/241/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.007     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.008     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.008     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.008     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.008     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/4/b/9/dataset_4b9cc30e-48ae-4dda-8be0-acbe0cc5537f.dat\n  0:00:00.581     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/d/0/dataset_1d00bfdb-f821-4c5e-beb5-f94ac93d0a6b.dat\n  0:00:01.145     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.151    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.390    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.390    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.522    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.556    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.574    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.575    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.577    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.580    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.590    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.590    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.591    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/4/b/9/dataset_4b9cc30e-48ae-4dda-8be0-acbe0cc5537f.dat\n  0:00:01.634    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/d/0/dataset_1d00bfdb-f821-4c5e-beb5-f94ac93d0a6b.dat\n  0:00:01.675    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.675    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.675    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.680    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.680    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.680    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.681    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.681    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.681    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.681    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.681    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.681    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.683    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.683    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.697    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.697    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.697    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.697    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/4/b/9/dataset_4b9cc30e-48ae-4dda-8be0-acbe0cc5537f.dat and /galaxy/server/database/objects/1/d/0/dataset_1d00bfdb-f821-4c5e-beb5-f94ac93d0a6b.dat\n  0:00:01.730    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.743    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.748    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.781    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.781    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.781    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/241/working/corrected/corrected.yaml\n  0:00:01.785    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/241/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/241/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/241/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.007     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.118    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.123     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.306   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.312     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.502   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.561     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.561     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.561     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.562     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.562     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.562     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.562     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.705     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.707    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.707    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.774    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.774    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.808    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.809    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.809    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.810    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.810    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.810    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.378     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.383    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.641    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.641    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.784    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.818    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.845    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.845    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.847    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.852    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PR\n..\n 0:00:07.059    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.060    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.060    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.060    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.060    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.060    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.060    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.060    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.060    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.060    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.060    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.060    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.073    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.073    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.073    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.076    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.076    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/241/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.076    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K33/before_rr.fasta\n  0:00:07.081    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/241/working//K33/assembly_graph.fastg\n  0:00:07.085    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K33/simplified_contigs.fasta\n  0:00:07.090    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K33/intermediate_contigs.fasta\n  0:00:07.099    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.099    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.099    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.100    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.100    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.100    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.182    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.293    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.064    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.064    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.069    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.208   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.211   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.217   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.219   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.219   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.219   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.233   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.241   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.261    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.261    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.261    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.261    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.261    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.262    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.262    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.262    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.262    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.262    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.262    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.266    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.266    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.266    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.266    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.266    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.267    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.267    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.267    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.267    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.267    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.267    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.267    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.267    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.268    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.268    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.268    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.268    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.268    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.268    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.268    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.268    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.268    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/241/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.269    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K33/before_rr.fasta\n  0:00:09.275    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/241/working//K33/assembly_graph.fastg\n  0:00:09.280    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/241/working//K33/final_contigs.paths\n  0:00:09.289    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/241/working//K33/scaffolds.paths\n  0:00:09.307    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.309    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/241/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/241/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/241/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/241/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/241/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/241/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/241/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/241/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/241/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/4/b/9/dataset_4b9cc30e-48ae-4dda-8be0-acbe0cc5537f.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/1/d/0/dataset_1d00bfdb-f821-4c5e-beb5-f94ac93d0a6b.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/241/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/4/b/9/dataset_4b9cc30e-48ae-4dda-8be0-acbe0cc5537f.dat']\n      right reads: ['/galaxy/server/database/objects/1/d/0/dataset_1d00bfdb-f821-4c5e-beb5-f94ac93d0a6b.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/241/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/241/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/241/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/241/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.007     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.008     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.008     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.008     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.008     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/4/b/9/dataset_4b9cc30e-48ae-4dda-8be0-acbe0cc5537f.dat\n  0:00:00.581     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/d/0/dataset_1d00bfdb-f821-4c5e-beb5-f94ac93d0a6b.dat\n  0:00:01.145     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.151    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.390    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.390    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.522    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.556    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.574    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.575    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.577    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.580    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.590    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.590    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.591    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/4/b/9/dataset_4b9cc30e-48ae-4dda-8be0-acbe0cc5537f.dat\n  0:00:01.634    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/d/0/dataset_1d00bfdb-f821-4c5e-beb5-f94ac93d0a6b.dat\n  0:00:01.675    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.675    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.675    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.680    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.680    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.680    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.681    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.681    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.681    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.681    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.681    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.681    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.683    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.683    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.697    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.697    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.697    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.697    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/4/b/9/dataset_4b9cc30e-48ae-4dda-8be0-acbe0cc5537f.dat and /galaxy/server/database/objects/1/d/0/dataset_1d00bfdb-f821-4c5e-beb5-f94ac93d0a6b.dat\n  0:00:01.730    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.743    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.748    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.781    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.781    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.781    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/241/working/corrected/corrected.yaml\n  0:00:01.785    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/241/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/241/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/241/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.007     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.118    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.123     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.306   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.312     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.502   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.561     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.561     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.561     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.562     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.562     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.562     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.562     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.705     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.707    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.707    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.774    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.774    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.808    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.809    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.809    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.810    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.810    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.810    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.378     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.383    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.641    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.641    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.784    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.818    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.845    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.845    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.847    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.852    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PR\n..\n 0:00:07.059    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.060    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.060    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.060    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.060    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.060    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.060    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.060    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.060    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.060    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.060    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.060    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.060    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.073    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.073    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.073    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.076    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.076    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/241/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.076    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K33/before_rr.fasta\n  0:00:07.081    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/241/working//K33/assembly_graph.fastg\n  0:00:07.085    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K33/simplified_contigs.fasta\n  0:00:07.090    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K33/intermediate_contigs.fasta\n  0:00:07.099    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.099    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.099    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.100    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.100    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.100    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.182    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.293    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.064    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.064    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.069    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.208   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.211   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.217   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.219   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.219   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.219   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.233   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.241   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.261    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.261    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.261    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.261    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.261    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.262    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.262    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.262    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.262    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.262    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.262    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.266    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.266    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.266    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.266    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.266    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.267    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.267    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.267    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.267    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.267    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.267    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.267    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.267    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.268    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.268    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.268    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.268    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.268    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.268    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.268    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.268    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.268    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/241/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.269    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K33/before_rr.fasta\n  0:00:09.275    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/241/working//K33/assembly_graph.fastg\n  0:00:09.280    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/241/working//K33/final_contigs.paths\n  0:00:09.289    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/241/working//K33/scaffolds.paths\n  0:00:09.307    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.309    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/241/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/241/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/241/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/241/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/241/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/241/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/241/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/241/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "12 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "12.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:16:37", "plugin": "core", "name": "end_epoch", "raw_value": "1682183797.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:16:25", "plugin": "core", "name": "start_epoch", "raw_value": "1682183785.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 6, "time_seconds": 121.89067339897156, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "325ba3b0eebe602c"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "f75d6785729ed450"}}, "job": {"model_class": "Job", "id": "c830db0f47d3d31c", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:17:48.891110", "create_time": "2023-04-22T17:16:03.389211", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-x8w22", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/7/4/0/dataset_74003382-8608-482c-8a50-55de803b500d.dat --pe1-2 fastq:/galaxy/server/database/objects/d/c/f/dataset_dcf2c633-079b-42cd-a129-74dc42a5769e.dat && python '/galaxy/server/database/jobs_directory/000/244/configs/tmp8yw8ieb6' < contigs.fasta > '/galaxy/server/database/objects/c/9/2/dataset_c92140fc-3e34-4cd2-8c53-8365cd4ed051.dat' && python '/galaxy/server/database/jobs_directory/000/244/configs/tmp8yw8ieb6' < scaffolds.fasta > '/galaxy/server/database/objects/5/8/c/dataset_58cbe642-0e48-4ee8-b1f1-d7ace212caf6.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 312, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 313, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "325ba3b0eebe602c", "src": "hda", "uuid": "74003382-8608-482c-8a50-55de803b500d"}, "libraries_0|files_0|rev_reads": {"id": "f75d6785729ed450", "src": "hda", "uuid": "dcf2c633-079b-42cd-a129-74dc42a5769e"}}, "outputs": {"out_log": {"id": "adfe48b564b22ad9", "src": "hda", "uuid": "503c8ee5-a396-4a22-b39d-1a1eb68488f3"}, "out_scaffolds": {"id": "0001b982673f88b6", "src": "hda", "uuid": "4f93594b-a404-4a90-9aff-dd1ef2778c90"}, "out_contigs": {"id": "e435333bbfdef3dc", "src": "hda", "uuid": "4c6d9c8c-2432-4be2-a3e4-3826153b7dbc"}, "out_scaffold_stats": {"id": "a6f6f9828062b0fd", "src": "hda", "uuid": "58cbe642-0e48-4ee8-b1f1-d7ace212caf6"}, "out_contig_stats": {"id": "e4417aef0ded1e55", "src": "hda", "uuid": "c92140fc-3e34-4cd2-8c53-8365cd4ed051"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/244/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/7/4/0/dataset_74003382-8608-482c-8a50-55de803b500d.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/d/c/f/dataset_dcf2c633-079b-42cd-a129-74dc42a5769e.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/244/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/7/4/0/dataset_74003382-8608-482c-8a50-55de803b500d.dat']\n      right reads: ['/galaxy/server/database/objects/d/c/f/dataset_dcf2c633-079b-42cd-a129-74dc42a5769e.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/244/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/244/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/244/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/244/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/7/4/0/dataset_74003382-8608-482c-8a50-55de803b500d.dat\n  0:00:00.542     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/c/f/dataset_dcf2c633-079b-42cd-a129-74dc42a5769e.dat\n  0:00:01.041     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.047    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.287    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.287    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.425    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.457    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.478    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.480    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.483    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.486    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.495    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.496    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.496    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/7/4/0/dataset_74003382-8608-482c-8a50-55de803b500d.dat\n  0:00:01.527    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/c/f/dataset_dcf2c633-079b-42cd-a129-74dc42a5769e.dat\n  0:00:01.559    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.560    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.560    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.565    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.565    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.579    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.579    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.579    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.579    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/7/4/0/dataset_74003382-8608-482c-8a50-55de803b500d.dat and /galaxy/server/database/objects/d/c/f/dataset_dcf2c633-079b-42cd-a129-74dc42a5769e.dat\n  0:00:01.612    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.621    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.624    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.661    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.661    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.661    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/244/working/corrected/corrected.yaml\n  0:00:01.666    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/244/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/244/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/244/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.117    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.122     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.310   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.316     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.514   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.578     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.579     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.579     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.579     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.580     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.580     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.580     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.726     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.728    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.728    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.827    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.827    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.827    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.828    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.828    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.828    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.345     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.350    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.599    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.599    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.731    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.761    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.785    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.785    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.787    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.788    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PR\n..\n 0:00:06.851    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.852    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.852    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.852    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.852    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.852    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.852    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.852    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.852    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.852    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.852    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.852    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.866    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.866    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.866    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.870    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.870    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/244/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.870    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K33/before_rr.fasta\n  0:00:06.876    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/244/working//K33/assembly_graph.fastg\n  0:00:06.881    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K33/simplified_contigs.fasta\n  0:00:06.886    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K33/intermediate_contigs.fasta\n  0:00:06.894    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.894    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.894    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.894    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.894    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.894    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:06.967    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.086    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.852    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.852    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.858    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:08.998   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.002   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.007   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.009   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.009   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.009   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.023   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.029   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.046    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.046    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.046    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.046    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.047    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.047    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.047    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.047    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.047    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.047    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.047    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.047    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.047    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.048    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.048    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.048    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.048    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.048    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.048    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.049    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.049    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.049    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.049    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.049    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.049    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.049    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.049    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.049    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.049    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.049    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/244/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.050    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K33/before_rr.fasta\n  0:00:09.055    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/244/working//K33/assembly_graph.fastg\n  0:00:09.060    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/244/working//K33/final_contigs.paths\n  0:00:09.070    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/244/working//K33/scaffolds.paths\n  0:00:09.087    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.089    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/244/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/244/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/244/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/244/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/244/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/244/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/244/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/244/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/244/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/7/4/0/dataset_74003382-8608-482c-8a50-55de803b500d.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/d/c/f/dataset_dcf2c633-079b-42cd-a129-74dc42a5769e.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/244/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/7/4/0/dataset_74003382-8608-482c-8a50-55de803b500d.dat']\n      right reads: ['/galaxy/server/database/objects/d/c/f/dataset_dcf2c633-079b-42cd-a129-74dc42a5769e.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/244/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/244/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/244/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/244/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/7/4/0/dataset_74003382-8608-482c-8a50-55de803b500d.dat\n  0:00:00.542     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/c/f/dataset_dcf2c633-079b-42cd-a129-74dc42a5769e.dat\n  0:00:01.041     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.047    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.287    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.287    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.425    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.457    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.478    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.480    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.483    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.486    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.495    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.496    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.496    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/7/4/0/dataset_74003382-8608-482c-8a50-55de803b500d.dat\n  0:00:01.527    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/c/f/dataset_dcf2c633-079b-42cd-a129-74dc42a5769e.dat\n  0:00:01.559    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.560    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.560    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.565    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.565    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.579    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.579    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.579    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.579    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/7/4/0/dataset_74003382-8608-482c-8a50-55de803b500d.dat and /galaxy/server/database/objects/d/c/f/dataset_dcf2c633-079b-42cd-a129-74dc42a5769e.dat\n  0:00:01.612    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.621    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.624    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.661    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.661    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.661    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/244/working/corrected/corrected.yaml\n  0:00:01.666    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/244/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/244/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/244/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.117    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.122     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.310   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.316     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.514   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.578     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.579     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.579     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.579     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.580     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.580     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.580     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.726     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.728    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.728    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.827    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.827    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.827    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.828    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.828    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.828    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.345     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.350    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.599    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.599    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.731    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.761    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.785    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.785    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.787    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.788    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PR\n..\n 0:00:06.851    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.852    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.852    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.852    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.852    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.852    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.852    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.852    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.852    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.852    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.852    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.852    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.852    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.866    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.866    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.866    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.870    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.870    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/244/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.870    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K33/before_rr.fasta\n  0:00:06.876    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/244/working//K33/assembly_graph.fastg\n  0:00:06.881    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K33/simplified_contigs.fasta\n  0:00:06.886    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K33/intermediate_contigs.fasta\n  0:00:06.894    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.894    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.894    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.894    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.894    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.894    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:06.967    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.086    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.852    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.852    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.858    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:08.998   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.002   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.007   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.009   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.009   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.009   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.023   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.029   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.046    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.046    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.046    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.046    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.047    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.047    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.047    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.047    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.047    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.047    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.047    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.047    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.047    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.048    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.048    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.048    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.048    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.048    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.048    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.049    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.049    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.049    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.049    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.049    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.049    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.049    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.049    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.049    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.049    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.049    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.049    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.049    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/244/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.050    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K33/before_rr.fasta\n  0:00:09.055    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/244/working//K33/assembly_graph.fastg\n  0:00:09.060    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/244/working//K33/final_contigs.paths\n  0:00:09.070    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/244/working//K33/scaffolds.paths\n  0:00:09.087    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.089    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/244/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/244/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/244/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/244/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/244/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/244/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/244/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/244/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "11 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "11.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:17:38", "plugin": "core", "name": "end_epoch", "raw_value": "1682183858.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:17:27", "plugin": "core", "name": "start_epoch", "raw_value": "1682183847.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 7, "time_seconds": 121.50028681755066, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "0ce5939a89fe8111"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "0146cfdac5543112"}}, "job": {"model_class": "Job", "id": "c67c038157225951", "state": "ok", "exit_code": 0, "update_time": "2023-04-22T17:18:19.382109", "create_time": "2023-04-22T17:16:36.744994", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a27c58f49c315e0d", "external_id": "gxy-jx8n9", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/0/6/7/dataset_067bfa0f-d850-49e1-8328-6ee42b70a82d.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/0/6/5/dataset_0657dffc-3c73-46d9-bfe4-5aeddc10551a.dat && python '/galaxy/server/database/jobs_directory/000/247/configs/tmp8zjcl1fi' < contigs.fasta > '/galaxy/server/database/objects/f/c/5/dataset_fc5e1918-4928-4ed1-ba14-de22f199bf71.dat' && python '/galaxy/server/database/jobs_directory/000/247/configs/tmp8zjcl1fi' < scaffolds.fasta > '/galaxy/server/database/objects/4/2/e/dataset_42edce0e-2b3e-47dd-93c1-11fe71737370.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 319, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 320, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "0ce5939a89fe8111", "src": "hda", "uuid": "067bfa0f-d850-49e1-8328-6ee42b70a82d"}, "libraries_0|files_0|rev_reads": {"id": "0146cfdac5543112", "src": "hda", "uuid": "0657dffc-3c73-46d9-bfe4-5aeddc10551a"}}, "outputs": {"out_log": {"id": "16cd0cf7a63b52df", "src": "hda", "uuid": "2ee1fc17-56d7-4f82-9668-5987de6aea99"}, "out_scaffolds": {"id": "331fc20b8b1ec9ad", "src": "hda", "uuid": "a784bbf3-3374-4433-a716-828d7ab775a7"}, "out_contigs": {"id": "fbd9c6b8b1b1509f", "src": "hda", "uuid": "57ead363-ee97-4fbe-ae85-6fd5b1463f23"}, "out_scaffold_stats": {"id": "54e07273c82b066f", "src": "hda", "uuid": "42edce0e-2b3e-47dd-93c1-11fe71737370"}, "out_contig_stats": {"id": "0a0bc50ddac0b56a", "src": "hda", "uuid": "fc5e1918-4928-4ed1-ba14-de22f199bf71"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/247/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/0/6/7/dataset_067bfa0f-d850-49e1-8328-6ee42b70a82d.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/0/6/5/dataset_0657dffc-3c73-46d9-bfe4-5aeddc10551a.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/247/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/0/6/7/dataset_067bfa0f-d850-49e1-8328-6ee42b70a82d.dat']\n      right reads: ['/galaxy/server/database/objects/0/6/5/dataset_0657dffc-3c73-46d9-bfe4-5aeddc10551a.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/247/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/247/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/247/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/247/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.003     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.004     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.007     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.007     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/6/7/dataset_067bfa0f-d850-49e1-8328-6ee42b70a82d.dat\n  0:00:00.574     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/6/5/dataset_0657dffc-3c73-46d9-bfe4-5aeddc10551a.dat\n  0:00:01.138     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.143    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.394    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.394    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.522    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.551    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.572    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.574    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.582    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.585    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.597    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.598    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.598    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/6/7/dataset_067bfa0f-d850-49e1-8328-6ee42b70a82d.dat\n  0:00:01.631    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/6/5/dataset_0657dffc-3c73-46d9-bfe4-5aeddc10551a.dat\n  0:00:01.668    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.669    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.669    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.683    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.683    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.705    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.705    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.706    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.706    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/0/6/7/dataset_067bfa0f-d850-49e1-8328-6ee42b70a82d.dat and /galaxy/server/database/objects/0/6/5/dataset_0657dffc-3c73-46d9-bfe4-5aeddc10551a.dat\n  0:00:01.743    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.754    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.758    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.793    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.793    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.793    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/247/working/corrected/corrected.yaml\n  0:00:01.797    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/247/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/247/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/247/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.008     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.008     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.125    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.130     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.339   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.347     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.536   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.596     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.596     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.596     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.596     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.597     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.597     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.597     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.747     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.749    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.749    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.813    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.813    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.847    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.848    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.848    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.849    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.849    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.849    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.408     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.413    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.671    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.671    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.811    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.840    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.859    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.859    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.861    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.861    16M / 3G    INFO    General                 (stage.cpp                 : 101\n..\n 0:00:07.104    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.105    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.105    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.105    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.105    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.105    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.106    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.106    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.106    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.106    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.106    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.106    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.118    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.118    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.119    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.121    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.121    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.122    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/before_rr.fasta\n  0:00:07.127    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph.fastg\n  0:00:07.131    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/simplified_contigs.fasta\n  0:00:07.135    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/intermediate_contigs.fasta\n  0:00:07.143    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.143    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.143    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.143    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.143    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.143    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.213    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.330    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.109    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.109    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.116    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.256   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.258   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.263   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.266   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.266   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.266   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.279   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.285   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.302    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.302    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.302    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.302    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.303    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.303    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.303    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.303    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.303    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.303    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.303    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.304    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.304    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.304    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.304    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.304    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.304    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.304    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.304    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.304    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.304    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.305    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.305    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.305    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.305    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.306    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.306    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.306    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.306    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.306    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.306    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.306    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.306    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.306    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.306    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.307    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.307    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.307    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.307    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.307    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.307    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.307    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.307    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.307    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.307    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.307    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.307    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.307    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.308    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/before_rr.fasta\n  0:00:09.313    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph.fastg\n  0:00:09.318    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/247/working//K33/final_contigs.paths\n  0:00:09.326    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/247/working//K33/scaffolds.paths\n  0:00:09.341    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.343    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/247/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/247/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/247/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/247/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/247/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/247/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/247/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/247/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/247/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/0/6/7/dataset_067bfa0f-d850-49e1-8328-6ee42b70a82d.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/0/6/5/dataset_0657dffc-3c73-46d9-bfe4-5aeddc10551a.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.15\n  OS: Linux-5.10.162+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/247/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/0/6/7/dataset_067bfa0f-d850-49e1-8328-6ee42b70a82d.dat']\n      right reads: ['/galaxy/server/database/objects/0/6/5/dataset_0657dffc-3c73-46d9-bfe4-5aeddc10551a.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/247/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/247/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-3/bin/spades-hammer /galaxy/server/database/jobs_directory/000/247/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/247/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.003     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.004     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.007     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.007     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/6/7/dataset_067bfa0f-d850-49e1-8328-6ee42b70a82d.dat\n  0:00:00.574     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/6/5/dataset_0657dffc-3c73-46d9-bfe4-5aeddc10551a.dat\n  0:00:01.138     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.143    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.394    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.394    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.522    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.551    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.572    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.574    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.582    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.585    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.597    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.598    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.598    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/6/7/dataset_067bfa0f-d850-49e1-8328-6ee42b70a82d.dat\n  0:00:01.631    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/6/5/dataset_0657dffc-3c73-46d9-bfe4-5aeddc10551a.dat\n  0:00:01.668    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.669    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.669    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.683    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.683    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.705    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.705    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.706    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.706    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/0/6/7/dataset_067bfa0f-d850-49e1-8328-6ee42b70a82d.dat and /galaxy/server/database/objects/0/6/5/dataset_0657dffc-3c73-46d9-bfe4-5aeddc10551a.dat\n  0:00:01.743    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.754    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.758    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.793    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.793    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.793    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/247/working/corrected/corrected.yaml\n  0:00:01.797    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/247/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/247/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/247/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.008     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.008     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.125    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.130     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.339   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.347     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.536   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.596     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.596     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.596     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.596     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.597     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.597     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.597     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.747     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.749    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.749    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.813    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.813    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.847    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.848    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.848    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.849    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.849    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.849    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.408     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.413    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.671    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.671    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.811    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.840    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.859    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.859    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.861    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.861    16M / 3G    INFO    General                 (stage.cpp                 : 101\n..\n 0:00:07.104    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.105    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.105    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.105    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.105    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.105    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.105    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.106    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.106    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.106    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.106    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.106    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.106    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.118    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.118    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.119    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.121    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.121    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.122    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/before_rr.fasta\n  0:00:07.127    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph.fastg\n  0:00:07.131    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/simplified_contigs.fasta\n  0:00:07.135    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/intermediate_contigs.fasta\n  0:00:07.143    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.143    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.143    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.143    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.143    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.143    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.213    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.330    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.109    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.109    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.116    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.256   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.258   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.263   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.266   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.266   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.266   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.279   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.285   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.302    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.302    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.302    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.302    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.303    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.303    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.303    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.303    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.303    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.303    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.303    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.304    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.304    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.304    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.304    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.304    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.304    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.304    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.304    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.304    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.304    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.305    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.305    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.305    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.305    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.306    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.306    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.306    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.306    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.306    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.306    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.306    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.306    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.306    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.306    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.306    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.307    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.307    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.307    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.307    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.307    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.307    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.307    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.307    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.307    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.307    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.307    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.307    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.307    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.308    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/before_rr.fasta\n  0:00:09.313    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph.fastg\n  0:00:09.318    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/247/working//K33/final_contigs.paths\n  0:00:09.326    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/247/working//K33/scaffolds.paths\n  0:00:09.341    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.343    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/247/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/247/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/247/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/247/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/247/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/247/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/247/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/247/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "12 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "12.0000000"}, {"title": "Job End Time", "value": "2023-04-22 17:18:08", "plugin": "core", "name": "end_epoch", "raw_value": "1682183888.0000000"}, {"title": "Job Start Time", "value": "2023-04-22 17:17:56", "plugin": "core", "name": "start_epoch", "raw_value": "1682183876.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}]}