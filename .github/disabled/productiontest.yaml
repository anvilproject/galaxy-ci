name: (Deprecated) Production Deployment and Tool Tests
on:
  # 2023-05-23 - EA: pause production runs until intermittent run stalls are resolved
  # schedule:
  #   - cron: "0 0 * * *"
  #   - cron: "0 12 * * *"

  workflow_dispatch:
    inputs:
      chunk:
        description: 'Chunk to run. Valid range [0:13]. Out of range inputs will be ignored.'
        required: true
        default: '5'
jobs:
  deploygke:
    env:
      GKE_ZONE: us-east1-b
      GKE_VERSION: "1.24"
      GXY_TMP: /tmp/gxy
      PREFIX: gtests-prod
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    outputs:
      prefix: ${{ steps.prefix.outputs.prefix }}
    steps:
      - name: Set prefix with date
        id: prefix
        run: echo "prefix=$(echo $PREFIX-$(date +'%y-%m-%d-%H-%M'))" >> $GITHUB_OUTPUT
      - uses: 'actions/checkout@v3'
      - id: 'Auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: 'projects/526897014808/locations/global/workloadIdentityPools/galaxy-tests-identity-pool/providers/gxy-tests-provider'
          service_account: 'galaxy-tests-repo-actions-sa@anvil-and-terra-development.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: Create GKE cluster
        run: gcloud container clusters create "${{steps.prefix.outputs.prefix}}" --cluster-version="$GKE_VERSION" --disk-size=100 --num-nodes=1 --machine-type=e2-standard-16 --zone "$GKE_ZONE"

  testgalaxy1:
    needs: deploygke
    env:
      GKE_ZONE: us-east1-b
      GXY_TMP: /tmp/gxy
      GKM_VERSION: "2.0.0"
      USE_GKE_GCLOUD_AUTH_PLUGIN: True
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: 'actions/checkout@v3'
      - id: 'Auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: 'projects/526897014808/locations/global/workloadIdentityPools/galaxy-tests-identity-pool/providers/gxy-tests-provider'
          service_account: 'galaxy-tests-repo-actions-sa@anvil-and-terra-development.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: Get cluster kubeconfig
        run: gcloud container clusters get-credentials "${{needs.deploygke.outputs.prefix}}" --zone "$GKE_ZONE" --project ${{ secrets.GCP_PROJECT_ID }}
      - name: Create two GCP Disks
        run: gcloud compute disks create "${{needs.deploygke.outputs.prefix}}-1-postgres-pd" --size 10Gi --zone "$GKE_ZONE" && gcloud compute disks create "${{needs.deploygke.outputs.prefix}}-1-nfs-pd" --size 250Gi --zone "$GKE_ZONE"
      - name: Setup gcloud auth plugin for kubectl
        run: gcloud components install gke-gcloud-auth-plugin
      - name: Fetch gcloud credentials for kubectl
        run: gcloud container clusters get-credentials "${{needs.deploygke.outputs.prefix}}" --zone "$GKE_ZONE"
      - name: Install Kubectl
        run: curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl && kubectl version
      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      - name: Add anvil repository
        run: helm repo add anvil https://github.com/cloudve/helm-charts/raw/anvil
      - name: Deploy GalaxyKubeMan 1
        continue-on-error: true
        run: >
          (time sh -c "helm install --create-namespace -n ${{needs.deploygke.outputs.prefix}}-1 ${{needs.deploygke.outputs.prefix}}-1 anvil/galaxykubeman\
              --wait\
              --timeout 1000s\
              --version $GKM_VERSION\
              --set galaxy.configs.\"galaxy\.yml\".galaxy.admin_users=\"tests@fake.org\"\
              --set galaxy.configs.\"galaxy\.yml\".galaxy.master_api_key=${{secrets.COMMON_PASSWORD}}\
              --set galaxy.configs.\"galaxy\.yml\".galaxy.single_user=\"tests@fake.org\"\
              --set galaxy.configs.\"job_conf\.yml\".runners.k8s.k8s_node_selector=\"cloud.google.com/gke-nodepool: default-pool\"\
              --set galaxy.image.tag=\"21.09\"\
              --set galaxy.jobHandlers.startupDelay=5\
              --set galaxy.jobs.maxLimits.cpu=5\
              --set galaxy.jobs.maxLimits.memory=50\
              --set galaxy.jobs.maxRequests.cpu=4\
              --set galaxy.jobs.maxRequests.memory=45\
              --set galaxy.nodeSelector.\"cloud\.google\.com\/gke-nodepool\"=\"default-pool\"\
              --set galaxy.persistence.size=\"240Gi\"\
              --set galaxy.persistence.storageClass=\"nfs-${{needs.deploygke.outputs.prefix}}-1\"\
              --set galaxy.postgresql.galaxyDatabasePassword=${{secrets.COMMON_PASSWORD}}\
              --set galaxy.postgresql.master.nodeSelector.\"cloud\.google\.com\/gke-nodepool\"=\"default-pool\"\
              --set galaxy.postgresql.persistence.existingClaim=\"${{needs.deploygke.outputs.prefix}}-1-postgres-disk-pvc\"\
              --set galaxy.service.type=LoadBalancer\
              --set galaxy.webHandlers.startupDelay=10\
              --set galaxy.workflowHandlers.startupDelay=0\
              --set nfs.nodeSelector.\"cloud\.google\.com\/gke-nodepool\"=\"default-pool\"\
              --set nfs.persistence.existingClaim=\"${{needs.deploygke.outputs.prefix}}-1-nfs-disk-pvc\"\
              --set nfs.persistence.size=\"250Gi\"\
              --set nfs.storageClass.name=\"nfs-${{needs.deploygke.outputs.prefix}}-1\"\
              --set persistence.nfs.name=\"${{needs.deploygke.outputs.prefix}}-1-nfs-disk\"\
              --set persistence.nfs.persistentVolume.extraSpec.gcePersistentDisk.pdName=\"${{needs.deploygke.outputs.prefix}}-1-nfs-pd\"\
              --set persistence.nfs.size=\"250Gi\"\
              --set persistence.postgres.name=\"${{needs.deploygke.outputs.prefix}}-1-postgres-disk\"\
              --set persistence.postgres.persistentVolume.extraSpec.gcePersistentDisk.pdName=\"${{needs.deploygke.outputs.prefix}}-1-postgres-pd\"\
              --set persistence.postgres.size=\"10Gi\"\
              --set rbac.enabled=false") 1> "$GXY_TMP" 2>> "$GXY_TMP"

      - name: Print output
        run: cat "$GXY_TMP"
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install required system packages
        run: sudo apt-get install -y python3-h5py pkg-config libhdf5-dev
      - name: Install dependencies
        run: python -m pip install planemo ephemeris pysam "galaxy-tool-util>=21.1.0.dev6" bioblend Jinja2 matplotlib
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Add report from this run
        run: bash ./.github/scripts/report_deployment.sh "$GXY_TMP" anvil-production ${{ secrets.GIT_TOKEN }}
      - name: Get Galaxy IP and port
        id: gxyservice1
        run: echo "address=$(echo \"http://$(kubectl get svc -n ${{needs.deploygke.outputs.prefix}}-1 ${{needs.deploygke.outputs.prefix}}-1-galaxy-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}' | sed -e 's/\"//g'):$(kubectl get svc -n ${{needs.deploygke.outputs.prefix}}-1 ${{needs.deploygke.outputs.prefix}}-1-galaxy-nginx -o jsonpath='{.spec.ports[0].port}')$(kubectl get ingress -n ${{needs.deploygke.outputs.prefix}}-1 ${{needs.deploygke.outputs.prefix}}-1-galaxy -o jsonpath='{.spec.rules[0].http.paths[0].path}')/\")" >> $GITHUB_OUTPUT
      - name: Create remote single user
        run: curl ${{steps.gxyservice1.outputs.address}}
      - name: Create reports dir for this date
        run: mkdir -p reports/anvil-production/tool-tests/${{needs.deploygke.outputs.prefix}}-1
      - name: Get tool list
        run: cp production/anvil/tools.yaml reports/anvil-production/tools.yaml
      - name: Create and get API key
        run: echo "key=$(python .github/scripts/create_api_key.py ${{steps.gxyservice1.outputs.address}} ${{secrets.COMMON_PASSWORD}})" >> $GITHUB_OUTPUT
        id: api1
      - name: Split tool tests
        run: python .github/scripts/subset_tools.py reports/anvil-production/tools.yaml reports/anvil-production/tool-tests/${{needs.deploygke.outputs.prefix}}-1 ${{ github.event.inputs.chunk }}
      - name: Run tool tests
        run: sleep 30 && shed-tools test -g ${{steps.gxyservice1.outputs.address}} -u "tests@fake.org" -a "${{steps.api1.outputs.key}}" --parallel_tests 4 -t reports/anvil-production/tool-tests/${{needs.deploygke.outputs.prefix}}-1/tools.yaml --test_json reports/anvil-production/tool-tests/${{needs.deploygke.outputs.prefix}}-1/results.json
      - name: Create HTML report
        run: planemo test_reports reports/anvil-production/tool-tests/${{needs.deploygke.outputs.prefix}}-1/results.json --test_output_xunit reports/anvil-production/tool-tests/${{needs.deploygke.outputs.prefix}}-1/results.xunit --test_output reports/anvil-production/tool-tests/${{needs.deploygke.outputs.prefix}}-1/results.html
      - name: Update Readme
        run: python .github/scripts/update_readme.py reports/anvil-production/tool-tests/${{needs.deploygke.outputs.prefix}}-1/chunk.json reports/anvil-production/tool-tests/chunks.json reports/anvil-production/README.md
      - name: Add updated README from this run
        run: bash ./.github/scripts/report_tests.sh ${{ secrets.GIT_TOKEN }} "Updating anvil-production README for ${{needs.deploygke.outputs.prefix}}-1" reports/anvil-production

  cleanup:
    if: always()
    needs: [deploygke,testgalaxy1]
    env:
      GKE_ZONE: us-east1-b
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: 'actions/checkout@v3'
      - id: 'Auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: 'projects/526897014808/locations/global/workloadIdentityPools/galaxy-tests-identity-pool/providers/gxy-tests-provider'
          service_account: 'galaxy-tests-repo-actions-sa@anvil-and-terra-development.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: Delete the GKE cluster
        continue-on-error: true
        run: gcloud container clusters delete "${{needs.deploygke.outputs.prefix}}" --zone "$GKE_ZONE" --quiet
      - name: Delete the two GCP Disks for first Galaxy
        run: gcloud compute disks delete "${{needs.deploygke.outputs.prefix}}-1-postgres-pd" --zone "$GKE_ZONE" --quiet && gcloud compute disks delete "${{needs.deploygke.outputs.prefix}}-1-nfs-pd" --zone "$GKE_ZONE" --quiet
