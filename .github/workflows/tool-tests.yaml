name: Unified Tool Tests
on:
  schedule:
    - cron: "22 0,12 * * *"
    - cron: "22 6,18 * * *"

  workflow_dispatch:
    inputs:
      chunk:
        description: 'Chunk to run. Valid range [0:13]. Out of range inputs will be ignored.'
        required: true
        default: '3'
      type:
        description: 'Are we testing edge or production'
        type: choice
        options: ['edge', 'production']
        default: 'edge'
      tag:
        description: "Docker image tag to test"
        default: dev
      version:
        description: "Version of the Helm chart to install"
        default: '2.7.0'
      machine:
        description: "Machine type for cluster nodes"
        default: "e2-standard-16"
env:
  GKE_ZONE: us-east1-b
  GKE_VERSION: "1.24"
  GKM_VERSION: "2.0.0"
  IMAGE_TAG: "21.09"
  GXY_TMP: /tmp/gxy
  PREFIX: gtests-prod
jobs:
  deploygke:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    outputs:
      prefix: ${{ steps.prefix.outputs.prefix }}
      type: ${{ steps.config.outputs.type }
      tag: ${{ steps.config.outputs.tag }
      version: ${{ steps.config.outputs.version }
    steps:
      - name: Configure variables based on launch type
        id: config
        shell: bash
        run: |
          if [[ "${{ github.event.schedule }}" = "22 0,12 * * *" ]] ; then
            echo "Production settings"
            echo "type=prod" >> $GITHUB_OUTPUT
            echo "tag=21.09" >> $GITHUB_OUTPUT
            echo "version=2.0.0" >> $GITHUB_OUTPUT
            echo "machine=e2-custom-20-81920" >> $GITHUB_OUTPUT
            echo "chunk=${python ./.github/scripts/print_chunk_number.py)" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.schedule }}" = "22 6,18 * * *" ]] ; then
            echo "Edge settings"
            echo "type=edge" >> $GITHUB_OUTPUT
            echo "tag=23.0-auto" >> $GITHUB_OUTPUT
            echo "version=2.7.0" >> $GITHUB_OUTPUT
            echo "machine=e2-standard-16" >> $GITHUB_OUTPUT
            echo "chunk=${python ./.github/scripts/print_chunk_number.py)" >> $GITHUB_OUTPUT
          else
            echo "Custom settings"
            echo "type=${{ inputs.type }}" >> $GITHUB_OUTPUT
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "machine=${{ inputs.machine }}" >> $GITHUB_OUTPUT
            echo "chunk=${{ inputs.chunk }}" >> $GITHUB_OUTPUT
          fi
      - name: Set prefix with date
        id: prefix
        run: echo "prefix=$(echo ${{ steps.config.outputs.type }}-$(date +'%Y-%m-%d-%H-%M'))" >> $GITHUB_OUTPUT
      - uses: 'actions/checkout@v3'
      - id: 'Auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: 'projects/526897014808/locations/global/workloadIdentityPools/galaxy-tests-identity-pool/providers/gxy-tests-provider'
          service_account: 'galaxy-tests-repo-actions-sa@anvil-and-terra-development.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: gcloud version
        run:  gcloud --version
      - name: Create GKE cluster
        run: gcloud container clusters create "${{steps.prefix.outputs.prefix}}" --cluster-version="$GKE_VERSION" --disk-size=100 --num-nodes=1 --machine-type=e2-custom-20-81920 --zone "$GKE_ZONE"

  testgalaxy1:
    needs: deploygke
    env:
      USE_GKE_GCLOUD_AUTH_PLUGIN: True
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3
      - id: 'Auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: 'projects/526897014808/locations/global/workloadIdentityPools/galaxy-tests-identity-pool/providers/gxy-tests-provider'
          service_account: 'galaxy-tests-repo-actions-sa@anvil-and-terra-development.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: Get cluster kubeconfig
        run: gcloud container clusters get-credentials "${{needs.deploygke.outputs.prefix}}" --zone "$GKE_ZONE" --project ${{ secrets.GCP_PROJECT_ID }}
      - name: Create two GCP Disks
        run: gcloud compute disks create "${{needs.deploygke.outputs.prefix}}-1-postgres-pd" --size 10Gi --zone "$GKE_ZONE" && gcloud compute disks create "${{needs.deploygke.outputs.prefix}}-1-nfs-pd" --size 250Gi --zone "$GKE_ZONE"
      - name: Setup gcloud auth plugin for kubectl and fetch creds
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gcloud container clusters get-credentials "${{needs.deploygke.outputs.prefix}}" --zone "$GKE_ZONE"
      - name: Install Kubectl
        run: curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl && kubectl version
      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      - name: Add anvil repository
        run: helm repo add anvil https://github.com/cloudve/helm-charts/raw/anvil
      - name: Generate values files
        shell: bash
        run: |
          python3 .github/scripts/render_template.py\ 
            --template .github/templates/common-values.yml.j2\
            prefix=${{ needs.deploygke.outputs.prefix }} 
            common_password=galaxypassword > common.yaml
          python3 .github/scripts/render_template.py \
            --template .github/templates/${{ needs.deploygke.outputs.type }}-values.yml.j2 \
            prefix=${{ needs.deploygke.outputs.prefix }} \
            tag=${{ needs.deploygke.outputs.tag }} \
            common_password=galaxypassword > values.yaml
      - name: Deploy GalaxyKubeMan 1
        run: >
          (time sh -c "helm install --create-namespace -n ${{needs.deploygke.outputs.prefix}}-1 ${{needs.deploygke.outputs.prefix}}-1 anvil/galaxykubeman\
              --wait\
              --timeout 1000s\
              --version ${{ needs.deploygke.output.version }}\
              --values common.yml\
              --values values.yml) 1> "$GXY_TMP" 2>> "$GXY_TMP"
      - name: Print output
        run: cat "$GXY_TMP"
      - name: Helm get values
        run: helm get values -n ${{needs.deploygke.outputs.prefix}}-1 ${{needs.deploygke.outputs.prefix}}-1
      - name: Get pods, pvc, and pv, sc
        run: kubectl get pods -n ${{needs.deploygke.outputs.prefix}}-1; kubectl get pvc -n ${{needs.deploygke.outputs.prefix}}-1; kubectl get pv -n ${{needs.deploygke.outputs.prefix}}-1; kubectl get sc -n ${{needs.deploygke.outputs.prefix}}-1
      - name: Get events
        run: kubectl get events -n ${{needs.deploygke.outputs.prefix}}-1
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install required system packages
        run: sudo apt-get update && sudo apt-get install -y python3-h5py pkg-config libhdf5-dev
      - name: Install dependencies
        run: python -m pip install planemo ephemeris pysam "galaxy-tool-util>=21.1.0.dev6" bioblend Jinja2 matplotlib gxabm
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Add report from this run
        run: bash ./.github/scripts/report_deployment.sh "$GXY_TMP" anvil-${{ needs.deploygke.outputs.type }} ${{ secrets.GIT_TOKEN }}
      - name: Get Galaxy IP and port
        id: galaxy
        run: echo "url=$(echo \"http://$(kubectl get svc -n ${{needs.deploygke.outputs.prefix}}-1 ${{needs.deploygke.outputs.prefix}}-1-galaxy-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}' | sed -e 's/\"//g'):$(kubectl get svc -n ${{needs.deploygke.outputs.prefix}}-1 ${{needs.deploygke.outputs.prefix}}-1-galaxy-nginx -o jsonpath='{.spec.ports[0].port}')$(kubectl get ingress -n ${{needs.deploygke.outputs.prefix}}-1 ${{needs.deploygke.outputs.prefix}}-1-galaxy -o jsonpath='{.spec.rules[0].http.paths[0].path}')/\")" >> $GITHUB_OUTPUT
      - name: Create remote single user
        run: curl ${{steps.galaxy.outputs.url}}
      - name: Create reports dir for this date
        id: reports
        run: |
          DIR=reports/anvil-${{ needs.deploygke.outputs.type }}/tool-tests/${{needs.deploygke.outputs.prefix}}-1
          mkdir -p $DIR
          echo "dir=$DIR" >> $GITHUB_OUTPUT
      # - name: Get tool list
      #   run: cp production/anvil/tools.yaml reports/anvil-production/tools.yaml
      - name: Create and get API key
        run: echo "key=$(python .github/scripts/create_api_key.py ${{steps.galaxy.outputs.url}} galaxypassword)" >> $GITHUB_OUTPUT
        id: api
      - name: Configure ABM
        id: key
        run: |
          abm version
          cp -R .abm ~/.abm
          abm config url galaxy ${{ steps.galaxy.outputs.url }}
          echo "Key is ${{ steps.api.outputs.key }}"
          abm config key galaxy ${{ steps.api.outputs.key }}
          echo "key=$key" >> $GITHUB_OUTPUT
      - name: Split tool tests
        run: python .github/scripts/get_chunk.py --chunk ${{ ${{ needs.deploygke.outputs.chunk }} -o ${{ steps.reports.outputs.dir }} reports/anvil-${{ needs.deploygke.outputs.type }}/tools.yaml
      - name: Generate a history name
        id: history
        run: echo "history_name=anvil-test-$(date '+%F-%H-%M')" >> $GITHUB_OUTPUT
      - name: Run tool tests
        run: sleep 30 && .github/scripts/run-galaxy-tests.sh ${{ steps.history.outputs.history_name }} ${{ steps.reports.outputs.dir }}
      - name: Write job results
        run: abm galaxy jobs list --history ${{ steps.history.outputs.history_name }} > ${{ steps.reports.outputs.dir }}/jobs.txt
      - name: Create HTML report
        run: planemo test_reports ${{ steps.reports.outputs.dir }}/results.json --test_output_xunit ${{ steps.reports.outputs.dir }}/results.xunit --test_output ${{ steps.reports.outputs.dir }}/results.html
      - name: Update Readme
        run: python .github/scripts/update_readme.py ${{ steps.reports.outputs.dir }}/chunk.json reports/anvil-${{ needs.deploygke.outputs.type }}/tool-tests/chunks.json reports/anvil-${{ needs.deploygke.outputs.type }}/README.md
      - name: Add updated README from this run
        run: bash ./.github/scripts/report_tests.sh ${{ secrets.GIT_TOKEN }} "Updating anvil-${{ needs.deploygke.outputs.type }} README for ${{needs.deploygke.outputs.prefix}}-1" reports/anvil-${{ needs.deploygke.outputs.type }}

  cleanup:
    if: always()
    needs: [deploygke,testgalaxy1]
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: 'actions/checkout@v3'
      - id: 'Auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: 'projects/526897014808/locations/global/workloadIdentityPools/galaxy-tests-identity-pool/providers/gxy-tests-provider'
          service_account: 'galaxy-tests-repo-actions-sa@anvil-and-terra-development.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: Delete the GKE cluster
        continue-on-error: true
        run: gcloud container clusters delete "${{needs.deploygke.outputs.prefix}}" --zone "$GKE_ZONE" --quiet
      - name: Delete the two GCP Disks for first Galaxy
        run: gcloud compute disks delete "${{needs.deploygke.outputs.prefix}}-1-postgres-pd" --zone "$GKE_ZONE" --quiet && gcloud compute disks delete "${{needs.deploygke.outputs.prefix}}-1-nfs-pd" --zone "$GKE_ZONE" --quiet
