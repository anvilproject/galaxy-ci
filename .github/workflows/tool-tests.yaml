name: Run the tool tests
on:
  workflow_call:
    inputs:
      prefix:
        type: string
        required: true
      chunk:
        required: true
        type: string
      type:
        type: string
        default: edge
      idp:
        type: string
        required: true
      account:
        type: string
        required: true
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: 'Auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.idp }}
          service_account: ${{ inputs.account }}
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: 'Download kubeconfig'
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
          path: ~/.kube/
      - name: Install Kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"  
          chmod +x ./kubectl 
          sudo mv ./kubectl /usr/local/bin/kubectl 
          kubectl version --short
      - name: Install required system packages
        run: sudo apt-get update && sudo apt-get install -y python3-h5py pkg-config libhdf5-dev
      - name: Install dependencies
        run: python -m pip install planemo ephemeris pysam "galaxy-tool-util>=21.1.0.dev6" bioblend Jinja2 matplotlib gxabm
      - name: Get Galaxy IP and port
        id: galaxy
        run: echo "url=$(echo \"http://$(kubectl get svc -n ${{inputs.prefix}}-1 ${{inputs.prefix}}-1-galaxy-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}' | sed -e 's/\"//g'):$(kubectl get svc -n ${{inputs.prefix}}-1 ${{inputs.prefix}}-1-galaxy-nginx -o jsonpath='{.spec.ports[0].port}')$(kubectl get ingress -n ${{inputs.prefix}}-1 ${{inputs.prefix}}-1-galaxy -o jsonpath='{.spec.rules[0].http.paths[0].path}')/\")" >> $GITHUB_OUTPUT
      - name: Create remote single user
        run: curl ${{steps.galaxy.outputs.url}}
      - name: Create reports dir for this date
        id: reports
        run: |
          DIR=reports/anvil-${{ inputs.type }}/tool-tests/${{inputs.prefix}}-1
          mkdir -p $DIR
          echo "dir=$DIR" >> $GITHUB_OUTPUT
      # - name: Get tool list
      #   run: cp production/anvil/tools.yaml reports/anvil-edge/tools.yaml
      - name: Create and get API key
        run: echo "key=$(python .github/scripts/create_api_key.py ${{steps.galaxy.outputs.url}} galaxypassword)" >> $GITHUB_OUTPUT
        id: api
      - name: Configure ABM
        id: key
        run: |
          abm version
          cp -R .abm ~/.abm
          abm config url galaxy ${{ steps.galaxy.outputs.url }}
          echo "Key is ${{ steps.api.outputs.key }}"
          abm config key galaxy ${{ steps.api.outputs.key }}
          abm config show galaxy
      - name: Split tool tests (workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: python .github/scripts/get_chunk.py --chunk ${{ github.event.inputs.chunk }} -o ${{ steps.reports.outputs.dir }} reports/anvil-${{ inputs.type }}/tools.yaml
      - name: Split tool tests (cron job)
        if: ${{ github.event_name }} != 'workflow_dispatch'
        run: python .github/scripts/get_chunk.py reports/anvil-${{ inputs.type }}/tools.yaml -o ${{ steps.reports.outputs.dir }}
      - name: Generate a history name
        id: history
        run: echo "history_name=anvil-test-$(date '+%F-%H-%M')" >> $GITHUB_OUTPUT
      - name: Run tool tests
        run: sleep 30 && .github/scripts/run-galaxy-tests.sh ${{ steps.history.outputs.history_name }} ${{ steps.reports.outputs.dir }}
      - name: Write job results
        run: abm galaxy jobs list --history ${{ steps.history.outputs.history_name }} > ${{ steps.reports.outputs.dir }}/jobs.txt
      - name: Create HTML report
        run: planemo test_reports ${{ steps.reports.outputs.dir }}/results.json --test_output_xunit ${{ steps.reports.outputs.dir }}/results.xunit --test_output ${{ steps.reports.outputs.dir }}/results.html
      - name: Update Readme
        run: python .github/scripts/update_readme.py ${{ steps.reports.outputs.dir }}/chunk.json reports/anvil-${{ inputs.type }}/tool-tests/chunks.json reports/anvil-${{ inputs.type }}/README.md
      - name: Add updated README from this run
        run: bash ./.github/scripts/report_tests.sh ${{ secrets.GIT_TOKEN }} "Updating anvil-${{ inputs.type }} README for ${{needs.deploygke.outputs.prefix}}-1" reports/anvil-${{ inputs.type }}
