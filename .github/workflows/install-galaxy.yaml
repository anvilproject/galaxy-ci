name: Install Galaxy
on:
  workflow_call:
    inputs:
      chart:
        type: string
        default: anvil/galaxykubeman
      version:
        type: string
        required: true
      prefix:
        type: string
        required: true
      type:
        type: string
        required: true
      temp:
        type: string
        default: /tmp/gxy
      idp:
        type: string
        required: true
      account:
        type: string
        required: true
      zone:
        type: string
        default: 'us-east1-b'
#      token:
#        type: string
#        required: true
jobs:
  install:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3
      - id: 'Auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.idp }}
          service_account: ${{ inputs.account }}
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: Download the kubeconfig
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
          path: ~/.kube
      - name: Setup gcloud auth plugin for kubectl and fetch creds
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gcloud container clusters get-credentials "${{inputs.prefix}}" --zone ${{ inputs.zone }}
      - name: Install Kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"  
          chmod +x ./kubectl 
          sudo mv ./kubectl /usr/local/bin/kubectl 
          kubectl version
      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      - name: Add anvil repository
        run: helm repo add anvil https://github.com/cloudve/helm-charts/raw/anvil
      - name: Deploy GalaxyKubeMan
        run: >
          (time sh -c "helm install --create-namespace -n ${{ inputs.prefix }}-1 ${{ inputs.prefix }}-1 ${{ inputs.chart }}\
              --wait\
              --wait-for-jobs\
              --timeout 720s\
              --version ${{ inputs.version }}\
              --set galaxy.service.type=LoadBalancer\
              --set galaxy.configs.\"galaxy\.yml\".galaxy.admin_users=\"tests@fake.org\"\
              --set galaxy.configs.\"galaxy\.yml\".galaxy.master_api_key=galaxypassword\
              --set galaxy.configs.\"galaxy\.yml\".galaxy.single_user=\"tests@fake.org\"\
              --set galaxy.configs.\"job_conf\.yml\".runners.k8s.k8s_node_selector=\"cloud.google.com/gke-nodepool: default-pool\"\
              --set 'galaxy.configs.job_conf\.yml.execution.environments.tpv_dispatcher.tpv_config_files={https://raw.githubusercontent.com/galaxyproject/tpv-shared-database/main/tools.yml,lib/galaxy/jobs/rules/tpv_rules_local.yml,https://gist.githubusercontent.com/afgane/68d1dbbe0af2468ba347dc74b6d3f7fa/raw/20edda50161bdcb74ff38935e7f76d79bfdaf303/tvp_rules_tests.yml}'\
              --set galaxy.nodeSelector.\"cloud\.google\.com\/gke-nodepool\"=\"default-pool\"\
              --set galaxy.persistence.storageClass=\"nfs-${{inputs.prefix}}-1\"\
              --set galaxy.postgresql.galaxyDatabasePassword=galaxypassword\
              --set galaxy.postgresql.master.nodeSelector.\"cloud\.google\.com\/gke-nodepool\"=\"default-pool\"\
              --set galaxy.postgresql.persistence.existingClaim=\"${{inputs.prefix}}-1-postgres-disk-pvc\"\
              --set galaxy.rabbitmq.nodeSelector.\"cloud\.google\.com\/gke-nodepool\"=\"default-pool\"\
              --set galaxy.rabbitmq.persistence.storageClassName=\"nfs-${{inputs.prefix}}-1\"\
              --set galaxy.ingress.ingressClassName=\"\"\
              --set galaxy.tusd.ingress.ingressClassName=\"\"\
              --set cvmfs.cvmfscsi.cache.alien.pvc.storageClass=\"nfs-${{inputs.prefix}}-1\"\
              --set nfs.nodeSelector.\"cloud\.google\.com\/gke-nodepool\"=\"default-pool\"\
              --set nfs.persistence.existingClaim=\"${{inputs.prefix}}-1-nfs-disk-pvc\"\
              --set nfs.storageClass.name=\"nfs-${{inputs.prefix}}-1\"\
              --set persistence.nfs.name=\"${{inputs.prefix}}-1-nfs-disk\"\
              --set persistence.nfs.persistentVolume.extraSpec.gcePersistentDisk.pdName=\"${{inputs.prefix}}-1-nfs-pd\"\
              --set persistence.postgres.name=\"${{inputs.prefix}}-1-postgres-disk\"\
              --set persistence.postgres.persistentVolume.extraSpec.gcePersistentDisk.pdName=\"${{inputs.prefix}}-1-postgres-pd\"") 1> "${{ inputs.temp }}" 2>> "${{ inputs.temp }}"
      - name: Print output
        run: cat ${{ inputs.temp }}
      - name: Helm get values
        run: helm get values -n ${{inputs.prefix}}-1 ${{inputs.prefix}}-1
      - name: Get pods, pvc, and pv, sc
        run: |
          kubectl get pods -n ${{inputs.prefix}}-1
          kubectl get pvc -n ${{inputs.prefix}}-1
          kubectl get pv -n ${{inputs.prefix}}-1
          kubectl get sc -n ${{inputs.prefix}}-1
      - name: Get events
        run: kubectl get events -n ${{inputs.prefix}}-1
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install required system packages
        run: sudo apt-get update && sudo apt-get install -y python3-h5py pkg-config libhdf5-dev
      - name: Install dependencies
        run: python -m pip install planemo ephemeris pysam "galaxy-tool-util>=21.1.0.dev6" bioblend Jinja2 matplotlib
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Add report from this run
        run: bash ./.github/scripts/report_deployment.sh ${{ inputs.temp }} anvil-${{ inputs.type }} ${{ github.token }}
